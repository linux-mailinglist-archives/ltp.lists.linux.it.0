Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [IPv6:2001:1418:10:5::2])
	by mail.lfdr.de (Postfix) with ESMTPS id C91B57A60BC
	for <lists+linux-ltp@lfdr.de>; Tue, 19 Sep 2023 13:10:11 +0200 (CEST)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id 88E713CE454
	for <lists+linux-ltp@lfdr.de>; Tue, 19 Sep 2023 13:10:11 +0200 (CEST)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-5.smtp.seeweb.it (in-5.smtp.seeweb.it
 [IPv6:2001:4b78:1:20::5])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-384))
 (No client certificate requested)
 by picard.linux.it (Postfix) with ESMTPS id CDB003CE418
 for <ltp@lists.linux.it>; Tue, 19 Sep 2023 13:09:54 +0200 (CEST)
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
 (No client certificate requested)
 by in-5.smtp.seeweb.it (Postfix) with ESMTPS id 01B8862D1C5
 for <ltp@lists.linux.it>; Tue, 19 Sep 2023 13:09:53 +0200 (CEST)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
 (No client certificate requested)
 by smtp-out1.suse.de (Postfix) with ESMTPS id 736A42296D;
 Tue, 19 Sep 2023 11:09:53 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1695121793; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=aF8W2jOO+J23VPwkbK5wzMmTSQaaECke0r+q033ShpM=;
 b=MigCKODWNXJe3I3lhlivY+2aDlLhqLYPUPsn5I6wMriPRmqFV9hl76W8QA468jwUEiLfJH
 5EOZykqatUEi2RETWcPAY887FALvT3pR1tB9vEJcsnkbAhQRjhVsiRc3NlzuQkV1J3tOyV
 elO6EJ/fPfESjL/BbXxfVROongGgQZc=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1695121793;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=aF8W2jOO+J23VPwkbK5wzMmTSQaaECke0r+q033ShpM=;
 b=59gfzh3XRnhl8tb2h2/YSqKFyKPAefUiljSvllTtI6yPPDYpDKIN8O+busSpBic70Z/NFr
 GlIT0TI9/E37CWBQ==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
 (No client certificate requested)
 by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 598DC13A49;
 Tue, 19 Sep 2023 11:09:53 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
 by imap2.suse-dmz.suse.de with ESMTPSA id kJbiFIGBCWVVYwAAMHmgww
 (envelope-from <mkittler@suse.de>); Tue, 19 Sep 2023 11:09:53 +0000
From: Marius Kittler <mkittler@suse.de>
To: ltp@lists.linux.it
Date: Tue, 19 Sep 2023 13:09:48 +0200
Message-ID: <20230919110951.31500-2-mkittler@suse.de>
X-Mailer: git-send-email 2.42.0
In-Reply-To: <20230919110951.31500-1-mkittler@suse.de>
References: <20230919110951.31500-1-mkittler@suse.de>
MIME-Version: 1.0
X-Virus-Scanned: clamav-milter 1.0.1 at in-5.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=0.1 required=7.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,DKIM_VALID_EF,SPF_HELO_NONE,SPF_PASS shortcircuit=no
 autolearn=disabled version=4.0.0
X-Spam-Checker-Version: SpamAssassin 4.0.0 (2022-12-13) on in-5.smtp.seeweb.it
Subject: [LTP] [PATCH v6 1/4] Refactor ioctl02.c to use the new test API
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

KiBVc2UgY2hlY2twb2ludCBBUEkgaW5zdGVhZCBvZiBzaWduYWxzCiogVXNlIFNBRkVf4oCmLW1h
Y3JvcyBpbnN0ZWFkIG9mIG1hbnVhbCBlcnJvciBoYW5kbGluZwoqIFNlZSBodHRwczovL2dpdGh1
Yi5jb20vbGludXgtdGVzdC1wcm9qZWN0L2x0cC9pc3N1ZXMvNjM3CiAgZm9yIHJlbGF0ZWQgZGlz
Y3Vzc2lvbi4KClNpZ25lZC1vZmYtYnk6IE1hcml1cyBLaXR0bGVyIDxta2l0dGxlckBzdXNlLmRl
PgotLS0KIHRlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvaW9jdGwvaW9jdGwwMi5jIHwgMzgxICsr
KysrLS0tLS0tLS0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCA4NyBpbnNlcnRpb25zKCspLCAy
OTQgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9p
b2N0bC9pb2N0bDAyLmMgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL2lvY3RsL2lvY3RsMDIu
YwppbmRleCBiNGQ0YTM1OTQuLjI2YmEzNDJmYSAxMDA2NDQKLS0tIGEvdGVzdGNhc2VzL2tlcm5l
bC9zeXNjYWxscy9pb2N0bC9pb2N0bDAyLmMKKysrIGIvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxs
cy9pb2N0bC9pb2N0bDAyLmMKQEAgLTEsMTk1ICsxLDg4IEBACisvLyBTUERYLUxpY2Vuc2UtSWRl
bnRpZmllcjogR1BMLTIuMC1vci1sYXRlcgogLyoKLSAqICAgQ29weXJpZ2h0IChjKSBJbnRlcm5h
dGlvbmFsIEJ1c2luZXNzIE1hY2hpbmVzICBDb3JwLiwgMjAwMQotICogICBDb3B5cmlnaHQgKGMp
IDIwMjAgUGV0ciBWb3JlbCA8cHZvcmVsQHN1c2UuY3o+Ci0gKgotICogICBUaGlzIHByb2dyYW0g
aXMgZnJlZSBzb2Z0d2FyZTsgIHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkK
LSAqICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5z
ZSBhcyBwdWJsaXNoZWQgYnkKLSAqICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0
aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IKLSAqICAgKGF0IHlvdXIgb3B0aW9uKSBh
bnkgbGF0ZXIgdmVyc2lvbi4KLSAqCi0gKiAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBp
biB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAotICogICBidXQgV0lUSE9VVCBBTlkg
V0FSUkFOVFk7ICB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKLSAqICAgTUVS
Q0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlCi0g
KiAgIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgotICoK
LSAqICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwg
UHVibGljIExpY2Vuc2UKLSAqICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07ICBpZiBub3QsIHdy
aXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCi0gKiAgIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5r
bGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0EKKyAqIENv
cHlyaWdodCAoYykgSW50ZXJuYXRpb25hbCBCdXNpbmVzcyBNYWNoaW5lcyAgQ29ycC4sIDIwMDEK
KyAqIENvcHlyaWdodCAoYykgMjAyMCBQZXRyIFZvcmVsIDxwdm9yZWxAc3VzZS5jej4KKyAqIENv
cHlyaWdodCAoYykgMjAyMyBNYXJpdXMgS2l0dGxlciA8bWtpdHRsZXJAc3VzZS5kZT4KICAqLwog
Ci0vKgotICogTkFNRQotICoJaW9jdGwwMi5jCi0gKgotICogREVTQ1JJUFRJT04KLSAqCVRlc3Rj
YXNlIHRvIHRlc3QgdGhlIFRDR0VUQSwgYW5kIFRDU0VUQSBpb2N0bCBpbXBsZW1lbnRhdGlvbnMg
Zm9yCi0gKgl0aGUgdHR5IGRyaXZlcgorLypcCisgKiBbRGVzY3JpcHRpb25dCiAgKgotICogQUxH
T1JJVEhNCi0gKglJbiB0aGlzIHRlc3QsIHRoZSBwYXJlbnQgYW5kIGNoaWxkIG9wZW4gdGhlIHBh
cmVudHR5IGFuZCB0aGUgY2hpbGR0dHkKLSAqCXJlc3BlY3RpdmVseS4gIEFmdGVyIG9wZW5pbmcg
dGhlIGNoaWxkdHR5IHRoZSBjaGlsZCBmbHVzaGVzIHRoZSBzdHJlYW0KLSAqCWFuZCBzZW5kcyBh
IFNJR1VTUjEgdG8gdGhlIHBhcmVudCAodGhlcmVieSBhc2tpbmcgaXQgdG8gY29udGludWUgaXRz
Ci0gKgl0ZXN0aW5nKS4gVGhlIHBhcmVudCwgd2hpY2ggd2FzIHdhaXRpbmcgZm9yIHRoaXMgc2ln
bmFsIHRvIGFycml2ZSwgbm93Ci0gKglzdGFydHMgdGhlIHRlc3RpbmcuIEl0IGlzc3VlcyBhIFRD
R0VUQSBpb2N0bCB0byBnZXQgYWxsIHRoZSB0dHkKLSAqCXBhcmFtZXRlcnMuIEl0IHRoZW4gY2hh
bmdlcyB0aGVtIHRvIGtub3duIHZhbHVlcyBieSBpc3N1aW5nIGEgVENTRVRBCi0gKglpb2N0bC4g
IFRoZW4gdGhlIHBhcmVudCBpc3N1ZXMgYSBUQ0dFVEEgaW9jdGwgYWdhaW4gYW5kIGNvbXBhcmVz
IHRoZQotICoJcmVjZWl2ZWQgdmFsdWVzIHdpdGggd2hhdCBpdCBoYWQgc2V0IGVhcmxpZXIuIFRo
ZSB0ZXN0IGZhaWxzIGlmIFRDR0VUQQotICoJb3IgVENTRVRBIGZhaWxzLCBvciBpZiB0aGUgcmVj
ZWl2ZWQgdmFsdWVzIGRvbid0IG1hdGNoIHRob3NlIHRoYXQgd2VyZQotICoJc2V0LiBUaGUgcGFy
ZW50IGRvZXMgYWxsIHRoZSB0ZXN0aW5nLCB0aGUgcmVxdWlyZW1lbnQgb2YgdGhlIGNoaWxkCi0g
Kglwcm9jZXNzIGlzIHRvIG1vbml0ZXIgdGhlIHRlc3RpbmcgZG9uZSBieSB0aGUgcGFyZW50LCBh
bmQgaGVuY2UgdGhlCi0gKgljaGlsZCBqdXN0IHdhaXRzIGZvciB0aGUgcGFyZW50LgorICogVGVz
dGNhc2UgdG8gdGVzdCB0aGUgVENHRVRBLCBhbmQgVENTRVRBIGlvY3RsIGltcGxlbWVudGF0aW9u
cyBmb3IKKyAqIHRoZSB0dHkgZHJpdmVyCiAgKgotICogVVNBR0U6ICA8Zm9yIGNvbW1hbmQtbGlu
ZT4KLSAqICBpb2N0bDAyIC1EIC9kZXYvdHR5WzAtOV0gWy1jIG5dIFstZl0gWy1pIG5dIFstSSB4
XSBbLVAgeF0gWy10XQotICogICAgIHdoZXJlLCAgLWMgbiA6IFJ1biBuIGNvcGllcyBjb25jdXJy
ZW50bHkuCi0gKiAgICAgICAgICAgICAtZiAgIDogVHVybiBvZmYgZnVuY3Rpb25hbGl0eSBUZXN0
aW5nLgotICogICAgICAgICAgICAgLWkgbiA6IEV4ZWN1dGUgdGVzdCBuIHRpbWVzLgotICogICAg
ICAgICAgICAgLUkgeCA6IEV4ZWN1dGUgdGVzdCBmb3IgeCBzZWNvbmRzLgotICogICAgICAgICAg
ICAgLVAgeCA6IFBhdXNlIGZvciB4IHNlY29uZHMgYmV0d2VlbiBpdGVyYXRpb25zLgotICogICAg
ICAgICAgICAgLXQgICA6IFR1cm4gb24gc3lzY2FsbCB0aW1pbmcuCi0gKgotICogSElTVE9SWQot
ICoJMDcvMjAwMSBQb3J0ZWQgYnkgV2F5bmUgQm95ZXIKLSAqCi0gKiBSRVNUUklDVElPTlMKLSAq
CXRlc3QgbXVzdCBiZSBydW4gd2l0aCB0aGUgLUQgb3B0aW9uCi0gKgl0ZXN0IG1heSBoYXZlIHRv
IGJlIHJ1biBhcyByb290IGRlcGVuZGluZyBvbiB0aGUgdHR5IHBlcm1pc3Npb25zCisgKiBJbiB0
aGlzIHRlc3QsIHRoZSBwYXJlbnQgYW5kIGNoaWxkIG9wZW4gdGhlIHBhcmVudHR5IGFuZCB0aGUg
Y2hpbGR0dHkKKyAqIHJlc3BlY3RpdmVseS4gIEFmdGVyIG9wZW5pbmcgdGhlIGNoaWxkdHR5IHRo
ZSBjaGlsZCBmbHVzaGVzIHRoZSBzdHJlYW0KKyAqIGFuZCB3YWtlcyB0aGUgcGFyZW50ICh0aGVy
ZWJ5IGFza2luZyBpdCB0byBjb250aW51ZSBpdHMgdGVzdGluZykuIFRoZQorICogcGFyZW50LCB0
aGVuIHN0YXJ0cyB0aGUgdGVzdGluZy4gSXQgaXNzdWVzIGEgVENHRVRBIGlvY3RsIHRvIGdldCBh
bGwKKyAqIHRoZSB0dHkgcGFyYW1ldGVycy4gSXQgdGhlbiBjaGFuZ2VzIHRoZW0gdG8ga25vd24g
dmFsdWVzIGJ5IGlzc3VpbmcgYQorICogVENTRVRBIGlvY3RsLiBUaGVuIHRoZSBwYXJlbnQgaXNz
dWVzIGEgVENHRVRBIGlvY3RsIGFnYWluIGFuZCBjb21wYXJlcworICogdGhlIHJlY2VpdmVkIHZh
bHVlcyB3aXRoIHdoYXQgaXQgaGFkIHNldCBlYXJsaWVyLiBUaGUgdGVzdCBmYWlscyBpZgorICog
VENHRVRBIG9yIFRDU0VUQSBmYWlscywgb3IgaWYgdGhlIHJlY2VpdmVkIHZhbHVlcyBkb24ndCBt
YXRjaCB0aG9zZQorICogdGhhdCB3ZXJlIHNldC4gVGhlIHBhcmVudCBkb2VzIGFsbCB0aGUgdGVz
dGluZywgdGhlIHJlcXVpcmVtZW50IG9mIHRoZQorICogY2hpbGQgcHJvY2VzcyBpcyB0byBtb25p
dGVyIHRoZSB0ZXN0aW5nIGRvbmUgYnkgdGhlIHBhcmVudCwgYW5kIGhlbmNlCisgKiB0aGUgY2hp
bGQganVzdCB3YWl0cyBmb3IgdGhlIHBhcmVudC4KICAqLwogCiAjaW5jbHVkZSA8c3RkaW8uaD4K
ICNpbmNsdWRlIDxmY250bC5oPgotI2luY2x1ZGUgPHNpZ25hbC5oPgogI2luY2x1ZGUgPGVycm5v
Lmg+CiAjaW5jbHVkZSA8c3lzL3dhaXQuaD4KICNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KICNpbmNs
dWRlIDxzeXMvc3RhdC5oPgogI2luY2x1ZGUgPHRlcm1pb3MuaD4KLSNpbmNsdWRlICJ0ZXN0Lmgi
Ci0jaW5jbHVkZSAic2FmZV9tYWNyb3MuaCIKLSNpbmNsdWRlICJsYXBpL2lvY3RsLmgiCiAKLSNk
ZWZpbmUJQ05VTAkwCisjaW5jbHVkZSAibGFwaS9pb2N0bC5oIgogCi1jaGFyICpUQ0lEID0gImlv
Y3RsMDIiOwotaW50IFRTVF9UT1RBTCA9IDE7CisjaW5jbHVkZSAidHN0X2NoZWNrcG9pbnQuaCIK
KyNpbmNsdWRlICJ0c3RfdGVzdC5oIgorI2luY2x1ZGUgInRzdF9zYWZlX21hY3Jvcy5oIgogCiBz
dGF0aWMgc3RydWN0IHRlcm1pbyB0ZXJtaW8sIHNhdmVfaW87CiAKIHN0YXRpYyBjaGFyICpwYXJl
bnR0dHksICpjaGlsZHR0eTsKLXN0YXRpYyBpbnQgcGFyZW50ZmQsIGNoaWxkZmQ7CitzdGF0aWMg
aW50IHBhcmVudGZkID0gLTEsIGNoaWxkZmQgPSAtMTsKIHN0YXRpYyBpbnQgcGFyZW50cGlkLCBj
aGlsZHBpZDsKLXN0YXRpYyB2b2xhdGlsZSBpbnQgc2lndGVybSwgc2lndXNyMSwgc2lndXNyMjsK
LXN0YXRpYyBpbnQgY2xvc2VkID0gMTsKIAogc3RhdGljIGludCBkb19jaGlsZF9zZXR1cCh2b2lk
KTsKLXN0YXRpYyBpbnQgZG9fcGFyZW50X3NldHVwKHZvaWQpOwogc3RhdGljIGludCBydW5fcHRl
c3Qodm9pZCk7CiBzdGF0aWMgaW50IHJ1bl9jdGVzdCh2b2lkKTsKLXN0YXRpYyBpbnQgY2hrX3R0
eV9wYXJtcygpOworc3RhdGljIGludCBjaGtfdHR5X3Bhcm1zKHZvaWQpOwogc3RhdGljIHZvaWQg
c2V0dXAodm9pZCk7CiBzdGF0aWMgdm9pZCBjbGVhbnVwKHZvaWQpOwotc3RhdGljIHZvaWQgaGVs
cCh2b2lkKTsKIHN0YXRpYyB2b2lkIGRvX2NoaWxkKHZvaWQpOwotdm9pZCBkb19jaGlsZF91Y2xp
bnV4KHZvaWQpOwotc3RhdGljIHZvaWQgc2lndGVybV9oYW5kbGVyKHZvaWQpOwogCi1zdGF0aWMg
aW50IERldmZsYWc7Ci1zdGF0aWMgY2hhciAqZGV2bmFtZTsKK3N0YXRpYyBjaGFyICpkZXZpY2U7
CiAKLXN0YXRpYyBvcHRpb25fdCBvcHRpb25zW10gPSB7Ci0JeyJEOiIsICZEZXZmbGFnLCAmZGV2
bmFtZX0sCi0Je05VTEwsIE5VTEwsIE5VTEx9Ci19Oworc3RhdGljIGNvbnN0IGludCBjaGVja3Bv
aW50X2NoaWxkX3JlYWR5ID0gMTsKK3N0YXRpYyBjb25zdCBpbnQgY2hlY2twb2ludF9wYXJlbnRf
ZG9uZV90ZXN0aW5nID0gMjsKIAotaW50IG1haW4oaW50IGFjLCBjaGFyICoqYXYpCitzdGF0aWMg
dm9pZCB2ZXJpZnlfaW9jdGwodm9pZCkKIHsKLQlpbnQgbGM7Ci0JaW50IHJ2YWw7Ci0KLQl0c3Rf
cGFyc2Vfb3B0cyhhYywgYXYsIG9wdGlvbnMsICZoZWxwKTsKLQotI2lmZGVmIFVDTElOVVgKLQlt
YXliZV9ydW5fY2hpbGQoJmRvX2NoaWxkX3VjbGludXgsICJkUyIsICZwYXJlbnRwaWQsICZjaGls
ZHR0eSk7Ci0jZW5kaWYKLQotCWlmICghRGV2ZmxhZykKLQkJdHN0X2Jya20oVEJST0ssIE5VTEws
ICJZb3UgbXVzdCBzcGVjaWZ5IGEgdHR5IGRldmljZSB3aXRoICIKLQkJCSAidGhlIC1EIG9wdGlv
bi4iKTsKLQotCXRzdF9yZXF1aXJlX3Jvb3QoKTsKLQotCXNldHVwKCk7Ci0KLQlmb3IgKGxjID0g
MDsgVEVTVF9MT09QSU5HKGxjKTsgbGMrKykgewotCi0JCXRzdF9jb3VudCA9IDA7Ci0KLQkJcGFy
ZW50dHR5ID0gZGV2bmFtZTsKLQkJY2hpbGR0dHkgPSBkZXZuYW1lOwotCi0JCXBhcmVudHBpZCA9
IGdldHBpZCgpOworCXBhcmVudHR0eSA9IGRldmljZTsKKwljaGlsZHR0eSA9IGRldmljZTsKIAot
CQljaGlsZHBpZCA9IEZPUktfT1JfVkZPUksoKTsKLQkJaWYgKGNoaWxkcGlkIDwgMCkKLQkJCXRz
dF9icmttKFRCUk9LLCBjbGVhbnVwLCAiZm9yayBmYWlsZWQiKTsKKwlwYXJlbnRwaWQgPSBnZXRw
aWQoKTsKKwljaGlsZHBpZCA9IFNBRkVfRk9SSygpOworCWlmIChjaGlsZHBpZCA9PSAwKQorCQlk
b19jaGlsZCgpOwogCi0JCWlmIChjaGlsZHBpZCA9PSAwKSB7CS8qIGNoaWxkICovCi0jaWZkZWYg
VUNMSU5VWAotCQkJaWYgKHNlbGZfZXhlYyhhdlswXSwgImRTIiwgcGFyZW50cGlkLCBjaGlsZHR0
eSkgPCAwKQotCQkJCXRzdF9icmttKFRCUk9LLCBjbGVhbnVwLCAic2VsZl9leGVjIGZhaWxlZCIp
OwotI2Vsc2UKLQkJCWRvX2NoaWxkKCk7Ci0jZW5kaWYKLQkJfQotCi0JCXdoaWxlICghc2lndXNy
MSkKLQkJCXNsZWVwKDEpOworCVRTVF9DSEVDS1BPSU5UX1dBSVQyKGNoZWNrcG9pbnRfY2hpbGRf
cmVhZHksIDUwMDApOwogCi0JCXNpZ3VzcjEgPSAwOwotCi0JCXBhcmVudGZkID0gZG9fcGFyZW50
X3NldHVwKCk7Ci0JCWlmIChwYXJlbnRmZCA8IDApIHsKLQkJCWtpbGwoY2hpbGRwaWQsIFNJR1RF
Uk0pOwotCQkJd2FpdHBpZChjaGlsZHBpZCwgTlVMTCwgMCk7Ci0JCQljbGVhbnVwKCk7Ci0JCX0K
KwlwYXJlbnRmZCA9IFNBRkVfT1BFTihwYXJlbnR0dHksIE9fUkRXUiwgMDc3Nyk7CisJLyogZmx1
c2ggdHR5IHF1ZXVlcyB0byByZW1vdmUgb2xkIG91dHB1dCAqLworCVNBRkVfSU9DVEwocGFyZW50
ZmQsIFRDRkxTSCwgMik7CiAKLQkJLyogcnVuIHRoZSBwYXJlbnQgdGVzdCAqLwotCQlydmFsID0g
cnVuX3B0ZXN0KCk7Ci0JCWlmIChydmFsID09IC0xKSB7Ci0JCQkvKgotCQkJICogUGFyZW50IGNh
bm5vdCBzZXQvZ2V0IGlvY3RsIHBhcmFtZXRlcnMuCi0JCQkgKiBTSUdURVJNIHRoZSBjaGlsZCBh
bmQgY2xlYW51cC4KLQkJCSAqLwotCQkJa2lsbChjaGlsZHBpZCwgU0lHVEVSTSk7Ci0JCQl3YWl0
cGlkKGNoaWxkcGlkLCBOVUxMLCAwKTsKLQkJCWNsZWFudXAoKTsKLQkJfQorCS8qIHJ1biB0aGUg
cGFyZW50IHRlc3QgKi8KKwlpbnQgcnZhbCA9IHJ1bl9wdGVzdCgpOwogCi0JCWlmIChydmFsICE9
IDApCi0JCQl0c3RfcmVzbShURkFJTCwgIlRDR0VUQS9UQ1NFVEEgdGVzdHMgRkFJTEVEIHdpdGgg
IgotCQkJCSAiJWQgJXMiLCBydmFsLCBydmFsID4gMSA/ICJlcnJvcnMiIDogImVycm9yIik7Ci0J
CWVsc2UKLQkJCXRzdF9yZXNtKFRQQVNTLCAiVENHRVRBL1RDU0VUQSB0ZXN0cyBTVUNDRUVERUQi
KTsKLQotCQkvKiBGSVhNRTogY2hlY2sgcmV0dXJuIGNvZGVzLiAqLwotCQkodm9pZClraWxsKGNo
aWxkcGlkLCBTSUdURVJNKTsKLQkJKHZvaWQpd2FpdHBpZChjaGlsZHBpZCwgTlVMTCwgMCk7Ci0K
LQkJLyoKLQkJICogQ2xlYW4gdXAgdGhpbmdzIGZyb20gdGhlIHBhcmVudCBieSByZXN0b3Jpbmcg
dGhlCi0JCSAqIHR0eSBkZXZpY2UgaW5mb3JtYXRpb24gdGhhdCB3YXMgc2F2ZWQgaW4gc2V0dXAo
KQotCQkgKiBhbmQgY2xvc2luZyB0aGUgdHR5IGZpbGUgZGVzY3JpcHRvci4KLQkJICovCi0JCWlm
IChpb2N0bChwYXJlbnRmZCwgVENTRVRBLCAmc2F2ZV9pbykgPT0gLTEpCi0JCQl0c3RfcmVzbShU
SU5GTywgImlvY3RsIHJlc3RvcmUgZmFpbGVkIGluIG1haW4iKTsKLQkJU0FGRV9DTE9TRShjbGVh
bnVwLCBwYXJlbnRmZCk7Ci0KLQkJY2xvc2VkID0gMTsKLQl9Ci0JY2xlYW51cCgpOworCWlmIChy
dmFsICE9IDApCisJCXRzdF9yZXMoVEZBSUwsICJUQ0dFVEEvVENTRVRBIHRlc3RzIEZBSUxFRCB3
aXRoICIKKwkJCQkiJWQgJXMiLCBydmFsLCBydmFsID4gMSA/ICJlcnJvcnMiIDogImVycm9yIik7
CisJZWxzZQorCQl0c3RfcmVzKFRQQVNTLCAiVENHRVRBL1RDU0VUQSB0ZXN0cyBTVUNDRUVERUQi
KTsKIAotCXRzdF9leGl0KCk7CisJVFNUX0NIRUNLUE9JTlRfV0FLRShjaGVja3BvaW50X3BhcmVu
dF9kb25lX3Rlc3RpbmcpOwogfQogCiBzdGF0aWMgdm9pZCBkb19jaGlsZCh2b2lkKQpAQCAtMjAx
LDI4ICs5NCwxMiBAQCBzdGF0aWMgdm9pZCBkb19jaGlsZCh2b2lkKQogCV9leGl0KDApOwogfQog
Ci12b2lkIGRvX2NoaWxkX3VjbGludXgodm9pZCkKLXsKLQlzdHJ1Y3Qgc2lnYWN0aW9uIGFjdDsK
LQotCS8qIFNldCB1cCB0aGUgc2lnbmFsIGhhbmRsZXJzIGFnYWluICovCi0JYWN0LnNhX2hhbmRs
ZXIgPSAodm9pZCAqKXNpZ3Rlcm1faGFuZGxlcjsKLQlhY3Quc2FfZmxhZ3MgPSAwOwotCXNpZ2Vt
cHR5c2V0KCZhY3Quc2FfbWFzayk7Ci0JKHZvaWQpc2lnYWN0aW9uKFNJR1RFUk0sICZhY3QsIDAp
OwotCi0JLyogUnVuIHRoZSBub3JtYWwgY2hpbGQgKi8KLQlkb19jaGlsZCgpOwotfQotCiAvKgog
ICogcnVuX3B0ZXN0KCkgLSBzZXR1cCB0aGUgdmFyaW91cyB0ZXJtaW8gc3RydWN0dXJlIHZhbHVl
cyBhbmQgaXNzdWUKICAqCQkgdGhlIFRDU0VUQSBpb2N0bCBjYWxsIHdpdGggdGhlIFRFU1QgbWFj
cm8uCiAgKi8KIHN0YXRpYyBpbnQgcnVuX3B0ZXN0KHZvaWQpCiB7Ci0JaW50IGksIHJ2YWw7Ci0K
IAkvKiBVc2UgIm9sZCIgbGluZSBkaXNjaXBsaW5lICovCiAJdGVybWlvLmNfbGluZSA9IDA7CiAK
QEAgLTIzMCw3ICsxMDcsNyBAQCBzdGF0aWMgaW50IHJ1bl9wdGVzdCh2b2lkKQogCXRlcm1pby5j
X2NmbGFnID0gQjUwIHwgQ1M3IHwgQ1JFQUQgfCBQQVJFTkIgfCBQQVJPREQgfCBDTE9DQUw7CiAK
IAkvKiBTZXQgY29udHJvbCBjaGFycy4gKi8KLQlmb3IgKGkgPSAwOyBpIDwgTkNDOyBpKyspIHsK
Kwlmb3IgKGludCBpID0gMDsgaSA8IE5DQzsgaSsrKSB7CiAJCWlmIChpID09IFZFT0wyKQogCQkJ
Y29udGludWU7CiAJCXRlcm1pby5jX2NjW2ldID0gQ1NUQVJUOwpAQCAtMjQ4LDM4ICsxMjUsMTgg
QEAgc3RhdGljIGludCBydW5fcHRlc3Qodm9pZCkKIAkvKiBTZXQgb3V0cHV0IG1vZGVzLiAqLwog
CXRlcm1pby5jX29mbGFnID0gT1BPU1QgfCBPTENVQyB8IE9OTENSIHwgT05PQ1I7CiAKLQlURVNU
KGlvY3RsKHBhcmVudGZkLCBUQ1NFVEEsICZ0ZXJtaW8pKTsKLQotCWlmIChURVNUX1JFVFVSTiA8
IDApIHsKLQkJdHN0X3Jlc20oVEZBSUwsICJpb2N0bCBUQ1NFVEEgZmFpbGVkIDogIgotCQkJICJl
cnJubyA9ICVkIiwgVEVTVF9FUlJOTyk7Ci0JCXJldHVybiAtMTsKLQl9CisJU0FGRV9JT0NUTChw
YXJlbnRmZCwgVENTRVRBLCAmdGVybWlvKTsKIAogCS8qIEdldCB0ZXJtaW8gYW5kIHNlZSBpZiBh
bGwgcGFyYW1ldGVycyBhY3R1YWxseSBnb3Qgc2V0ICovCi0JcnZhbCA9IGlvY3RsKHBhcmVudGZk
LCBUQ0dFVEEsICZ0ZXJtaW8pOwotCWlmIChydmFsIDwgMCkgewotCQl0c3RfcmVzbShURkFJTCwg
ImlvY3RsIFRDR0VUQSBmYWlsZWQuICBFbmRpbmcgdGVzdC4iKTsKLQkJcmV0dXJuIC0xOwotCX0K
LQorCVNBRkVfSU9DVEwocGFyZW50ZmQsIFRDR0VUQSwgJnRlcm1pbyk7CiAJcmV0dXJuIGNoa190
dHlfcGFybXMoKTsKIH0KIAogc3RhdGljIGludCBydW5fY3Rlc3Qodm9pZCkKIHsKLQkvKgotCSAq
IFdhaXQgdGlsbCB0aGUgcGFyZW50IGhhcyBmaW5pc2hlZCB0ZXN0aW5nLgotCSAqLwotCXdoaWxl
ICghc2lndGVybSkKLQkJc2xlZXAoMSk7Ci0KLQlzaWd0ZXJtID0gMDsKLQotCXRzdF9yZXNtKFRJ
TkZPLCAiY2hpbGQ6IEdvdCBTSUdURVJNIGZyb20gcGFyZW50LiIpOwotCi0JaWYgKGNsb3NlKGNo
aWxkZmQpID09IC0xKQotCQl0c3RfcmVzbShUSU5GTywgImNsb3NlKCkgaW4gcnVuX2N0ZXN0KCkg
ZmFpbGVkIik7CisJVFNUX0NIRUNLUE9JTlRfV0FJVChjaGVja3BvaW50X3BhcmVudF9kb25lX3Rl
c3RpbmcpOworCXRzdF9yZXMoVElORk8sICJjaGlsZDogcGFyZW50IGhhcyBmaW5pc2hlZCB0ZXN0
aW5nIik7CisJU0FGRV9DTE9TRShjaGlsZGZkKTsKIAlyZXR1cm4gMDsKIH0KIApAQCAtMjg4LDcg
KzE0NSw3IEBAIHN0YXRpYyBpbnQgY2hrX3R0eV9wYXJtcyh2b2lkKQogCWludCBpLCBmbGFnID0g
MDsKIAogCWlmICh0ZXJtaW8uY19saW5lICE9IDApIHsKLQkJdHN0X3Jlc20oVElORk8sICJsaW5l
IGRpc2NpcGxpbmUgaGFzIGluY29ycmVjdCB2YWx1ZSAlbyIsCisJCXRzdF9yZXMoVElORk8sICJs
aW5lIGRpc2NpcGxpbmUgaGFzIGluY29ycmVjdCB2YWx1ZSAlbyIsCiAJCQkgdGVybWlvLmNfbGlu
ZSk7CiAJCWZsYWcrKzsKIAl9CkBAIC0zMDEsNyArMTU4LDcgQEAgc3RhdGljIGludCBjaGtfdHR5
X3Bhcm1zKHZvaWQpCiAJICovCiAjaWYgMAogCWlmICh0ZXJtaW8uY19jZmxhZyAhPSAoQjUwIHwg
Q1M3IHwgQ1JFQUQgfCBQQVJFTkIgfCBQQVJPREQgfCBDTE9DQUwpKSB7Ci0JCXRzdF9yZXNtKFRJ
TkZPLCAiY2ZsYWcgaGFzIGluY29ycmVjdCB2YWx1ZS4gJW8iLAorCQl0c3RfcmVzKFRJTkZPLCAi
Y2ZsYWcgaGFzIGluY29ycmVjdCB2YWx1ZS4gJW8iLAogCQkJIHRlcm1pby5jX2NmbGFnKTsKIAkJ
ZmxhZysrOwogCX0KQEAgLTMwOSwxOSArMTY2LDE4IEBAIHN0YXRpYyBpbnQgY2hrX3R0eV9wYXJt
cyh2b2lkKQogCiAJZm9yIChpID0gMDsgaSA8IE5DQzsgaSsrKSB7CiAJCWlmIChpID09IFZFT0wy
KSB7Ci0JCQlpZiAodGVybWlvLmNfY2NbVkVPTDJdID09IENOVUwpIHsKKwkJCWlmICghdGVybWlv
LmNfY2NbaV0pIHsKIAkJCQljb250aW51ZTsKIAkJCX0gZWxzZSB7Ci0JCQkJdHN0X3Jlc20oVElO
Rk8sICJjb250cm9sIGNoYXIgJWQgaGFzICIKLQkJCQkJICJpbmNvcnJlY3QgdmFsdWUgJWQgJWQi
LCBpLAotCQkJCQkgdGVybWlvLmNfY2NbaV0sIENOVUwpOworCQkJCXRzdF9yZXMoVElORk8sICJj
b250cm9sIGNoYXIgJWQgaGFzICIKKwkJCQkJICJpbmNvcnJlY3QgdmFsdWUgJWQiLCBpLCB0ZXJt
aW8uY19jY1tpXSk7CiAJCQkJZmxhZysrOwogCQkJCWNvbnRpbnVlOwogCQkJfQogCQl9CiAKIAkJ
aWYgKHRlcm1pby5jX2NjW2ldICE9IENTVEFSVCkgewotCQkJdHN0X3Jlc20oVElORk8sICJjb250
cm9sIGNoYXIgJWQgaGFzIGluY29ycmVjdCAiCisJCQl0c3RfcmVzKFRJTkZPLCAiY29udHJvbCBj
aGFyICVkIGhhcyBpbmNvcnJlY3QgIgogCQkJCSAidmFsdWUgJWQuIiwgaSwgdGVybWlvLmNfY2Nb
aV0pOwogCQkJZmxhZysrOwogCQl9CkBAIC0zMzAsNyArMTg2LDcgQEAgc3RhdGljIGludCBjaGtf
dHR5X3Bhcm1zKHZvaWQpCiAJaWYgKCEKIAkgICAgKHRlcm1pby5jX2xmbGFnCiAJICAgICAmJiAo
SVNJRyB8IElDQU5PTiB8IFhDQVNFIHwgRUNITyB8IEVDSE9FIHwgTk9GTFNIKSkpIHsKLQkJdHN0
X3Jlc20oVElORk8sICJsZmxhZyBoYXMgaW5jb3JyZWN0IHZhbHVlLiAlbyIsCisJCXRzdF9yZXMo
VElORk8sICJsZmxhZyBoYXMgaW5jb3JyZWN0IHZhbHVlLiAlbyIsCiAJCQkgdGVybWlvLmNfbGZs
YWcpOwogCQlmbGFnKys7CiAJfQpAQCAtMzM5LDEzMCArMTk1LDY3IEBAIHN0YXRpYyBpbnQgY2hr
X3R0eV9wYXJtcyh2b2lkKQogCSAgICAodGVybWlvLmNfaWZsYWcKIAkgICAgICYmIChCUktJTlQg
fCBJR05QQVIgfCBJTlBDSyB8IElTVFJJUCB8IElDUk5MIHwgSVVDTEMgfCBJWE9OIHwgSVhBTlkK
IAkJIHwgSVhPRkYpKSkgewotCQl0c3RfcmVzbShUSU5GTywgImlmbGFnIGhhcyBpbmNvcnJlY3Qg
dmFsdWUuICVvIiwKKwkJdHN0X3JlcyhUSU5GTywgImlmbGFnIGhhcyBpbmNvcnJlY3QgdmFsdWUu
ICVvIiwKIAkJCSB0ZXJtaW8uY19pZmxhZyk7CiAJCWZsYWcrKzsKIAl9CiAKIAlpZiAoISh0ZXJt
aW8uY19vZmxhZyAmJiAoT1BPU1QgfCBPTENVQyB8IE9OTENSIHwgT05PQ1IpKSkgewotCQl0c3Rf
cmVzbShUSU5GTywgIm9mbGFnIGhhcyBpbmNvcnJlY3QgdmFsdWUuICVvIiwKKwkJdHN0X3JlcyhU
SU5GTywgIm9mbGFnIGhhcyBpbmNvcnJlY3QgdmFsdWUuICVvIiwKIAkJCSB0ZXJtaW8uY19vZmxh
Zyk7CiAJCWZsYWcrKzsKIAl9CiAKIAlpZiAoIWZsYWcpCi0JCXRzdF9yZXNtKFRJTkZPLCAidGVy
bWlvIHZhbHVlcyBhcmUgc2V0IGFzIGV4cGVjdGVkIik7CisJCXRzdF9yZXMoVElORk8sICJ0ZXJt
aW8gdmFsdWVzIGFyZSBzZXQgYXMgZXhwZWN0ZWQiKTsKIAogCXJldHVybiBmbGFnOwogfQogCi1z
dGF0aWMgaW50IGRvX3BhcmVudF9zZXR1cCh2b2lkKQotewotCWludCBwZmQ7Ci0KLQlwZmQgPSBT
QUZFX09QRU4oY2xlYW51cCwgcGFyZW50dHR5LCBPX1JEV1IsIDA3NzcpOwotCi0JLyogdW5zZXQg
dGhlIGNsb3NlZCBmbGFnICovCi0JY2xvc2VkID0gMDsKLQotCS8qIGZsdXNoIHR0eSBxdWV1ZXMg
dG8gcmVtb3ZlIG9sZCBvdXRwdXQgKi8KLQlTQUZFX0lPQ1RMKGNsZWFudXAsIHBmZCwgVENGTFNI
LCAyKTsKLQlyZXR1cm4gcGZkOwotfQotCiBzdGF0aWMgaW50IGRvX2NoaWxkX3NldHVwKHZvaWQp
CiB7Ci0JaW50IGNmZDsKLQotCWNmZCA9IG9wZW4oY2hpbGR0dHksIE9fUkRXUiwgMDc3Nyk7Ci0J
aWYgKGNmZCA8IDApIHsKLQkJdHN0X3Jlc20oVElORk8sICJDb3VsZCBub3Qgb3BlbiAlcyBpbiBk
b19jaGlsZF9zZXR1cCgpLCBlcnJubyAiCi0JCQkgIj0gJWQiLCBjaGlsZHR0eSwgZXJybm8pOwot
CQkvKiBzaWduYWwgdGhlIHBhcmVudCBzbyB3ZSBkb24ndCBoYW5nIHRoZSB0ZXN0ICovCi0JCWtp
bGwocGFyZW50cGlkLCBTSUdVU1IxKTsKLQkJcmV0dXJuIC0xOwotCX0KKwlpbnQgY2ZkID0gU0FG
RV9PUEVOKGNoaWxkdHR5LCBPX1JEV1IsIDA3NzcpOwogCiAJLyogZmx1c2ggdHR5IHF1ZXVlcyB0
byByZW1vdmUgb2xkIG91dHB1dCAqLwotCWlmIChpb2N0bChjZmQsIFRDRkxTSCwgMikgPCAwKSB7
Ci0JCXRzdF9yZXNtKFRJTkZPLCAiaW9jdGwgVENGTFNIIGZhaWxlZC4gOiBlcnJubyA9ICVkIiwg
ZXJybm8pOwotCQkvKiBzaWduYWwgdGhlIHBhcmVudCBzbyB3ZSBkb24ndCBoYW5nIHRoZSB0ZXN0
ICovCi0JCWtpbGwocGFyZW50cGlkLCBTSUdVU1IxKTsKLQkJcmV0dXJuIC0xOwotCX0KKwlTQUZF
X0lPQ1RMKGNmZCwgVENGTFNILCAyKTsKIAogCS8qIHRlbGwgdGhlIHBhcmVudCB0aGF0IHdlJ3Jl
IGRvbmUgKi8KLQlraWxsKHBhcmVudHBpZCwgU0lHVVNSMSk7Ci0KKwlUU1RfQ0hFQ0tQT0lOVF9X
QUtFKGNoZWNrcG9pbnRfY2hpbGRfcmVhZHkpOwogCXJldHVybiBjZmQ7CiB9CiAKLS8qCi0gKiBE
ZWZpbmUgdGhlIHNpZ25hbHMgaGFuZGxlcnMgaGVyZS4KLSAqLwotc3RhdGljIHZvaWQgc2lndGVy
bV9oYW5kbGVyKHZvaWQpCi17Ci0Jc2lndGVybSA9IDE7Ci19Ci0KLXN0YXRpYyB2b2lkIHNpZ3Vz
cjFfaGFuZGxlcih2b2lkKQotewotCXNpZ3VzcjEgPSAxOwotfQotCi1zdGF0aWMgdm9pZCBzaWd1
c3IyX2hhbmRsZXIodm9pZCkKLXsKLQlzaWd1c3IyID0gMTsKLX0KLQotc3RhdGljIHZvaWQgaGVs
cCh2b2lkKQotewotCXByaW50ZigiICAtRCA8dHR5IGRldmljZT4gOiBmb3IgZXhhbXBsZSwgL2Rl
di90dHlbMC05XVxuIik7Ci19Ci0KIHN0YXRpYyB2b2lkIHNldHVwKHZvaWQpCiB7Ci0JaW50IGZk
OwotCXN0cnVjdCBzaWdhY3Rpb24gYWN0OworCWlmICghZGV2aWNlKQorCQl0c3RfYnJrKFRCUk9L
LCAiWW91IG11c3Qgc3BlY2lmeSBhIHR0eSBkZXZpY2Ugd2l0aCAtRCBvcHRpb24iKTsKIAogCS8q
IFhYWDogVEVSUk5PIHJlcXVpcmVkIGFsbCBvdmVyIHRoZSBwbGFjZSAqLwotCWZkID0gU0FGRV9P
UEVOKE5VTEwsIGRldm5hbWUsIE9fUkRXUiwgMDc3Nyk7CisJaW50IGZkID0gU0FGRV9PUEVOKGRl
dmljZSwgT19SRFdSLCAwNzc3KTsKIAogCS8qIFNhdmUgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm9y
bWF0aW9uIC0gdG8gYmUgcmVzdG9yZWQgaW4gY2xlYW51cCgpICovCi0JU0FGRV9JT0NUTChjbGVh
bnVwLCBmZCwgVENHRVRBLCAmc2F2ZV9pbyk7CisJU0FGRV9JT0NUTChmZCwgVENHRVRBLCAmc2F2
ZV9pbyk7CiAKIAkvKiBDbG9zZSB0aGUgZGV2aWNlICovCi0JU0FGRV9DTE9TRShjbGVhbnVwLCBm
ZCk7Ci0KLQkvKiBTZXQgdXAgdGhlIHNpZ25hbCBoYW5kbGVycyAqLwotCWFjdC5zYV9oYW5kbGVy
ID0gKHZvaWQgKilzaWd0ZXJtX2hhbmRsZXI7Ci0JYWN0LnNhX2ZsYWdzID0gMDsKLQlzaWdlbXB0
eXNldCgmYWN0LnNhX21hc2spOwotCSh2b2lkKXNpZ2FjdGlvbihTSUdURVJNLCAmYWN0LCAwKTsK
LQotCWFjdC5zYV9oYW5kbGVyID0gKHZvaWQgKilzaWd1c3IxX2hhbmRsZXI7Ci0JYWN0LnNhX2Zs
YWdzID0gMDsKLQkodm9pZClzaWdhY3Rpb24oU0lHVVNSMSwgJmFjdCwgMCk7Ci0KLQlhY3Quc2Ff
aGFuZGxlciA9ICh2b2lkICopc2lndXNyMl9oYW5kbGVyOwotCWFjdC5zYV9mbGFncyA9IDA7Ci0J
KHZvaWQpc2lnYWN0aW9uKFNJR1VTUjIsICZhY3QsIDApOwotCi0JYWN0LnNhX2hhbmRsZXIgPSBT
SUdfSUdOOwotCWFjdC5zYV9mbGFncyA9IDA7Ci0JKHZvaWQpc2lnYWN0aW9uKFNJR1RUT1UsICZh
Y3QsIDApOwotCi0Jc2lndGVybSA9IHNpZ3VzcjEgPSBzaWd1c3IyID0gMDsKLQotCVRFU1RfUEFV
U0U7CisJU0FGRV9DTE9TRShmZCk7CiB9CiAKIHN0YXRpYyB2b2lkIGNsZWFudXAodm9pZCkKIHsK
LQlpZiAoIWNsb3NlZCkgewotCQlpZiAoaW9jdGwocGFyZW50ZmQsIFRDU0VUQSwgJnNhdmVfaW8p
ID09IC0xKQotCQkJdHN0X3Jlc20oVElORk8sICJpb2N0bCByZXN0b3JlIGZhaWxlZCBpbiBjbGVh
bnVwKCkiKTsKLQkJaWYgKGNsb3NlKHBhcmVudGZkKSA9PSAtMSkKLQkJCXRzdF9yZXNtKFRJTkZP
LCAiY2xvc2UoKSBmYWlsZWQgaW4gY2xlYW51cCgpIik7CisJaWYgKHBhcmVudGZkID49IDApIHsK
KwkJU0FGRV9JT0NUTChwYXJlbnRmZCwgVENTRVRBLCAmc2F2ZV9pbyk7CisJCVNBRkVfQ0xPU0Uo
cGFyZW50ZmQpOwogCX0KIH0KKworc3RhdGljIHN0cnVjdCB0c3RfdGVzdCB0ZXN0ID0geworCS5u
ZWVkc19yb290ID0gMSwKKwkubmVlZHNfY2hlY2twb2ludHMgPSAxLAorCS5mb3Jrc19jaGlsZCA9
IDEsCisJLnNldHVwID0gc2V0dXAsCisJLmNsZWFudXAgPSBjbGVhbnVwLAorCS50ZXN0X2FsbCA9
IHZlcmlmeV9pb2N0bCwKKwkub3B0aW9ucyA9IChzdHJ1Y3QgdHN0X29wdGlvbltdKSB7CisJCXsi
RDoiLCAmZGV2aWNlLCAiVHR5IGRldmljZS4gRm9yIGV4YW1wbGUsIC9kZXYvdHR5WzAtOV0ifSwK
KwkJe30KKwl9Cit9OwpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKLS0gCjIuNDIuMAoKCi0t
IApNYWlsaW5nIGxpc3QgaW5mbzogaHR0cHM6Ly9saXN0cy5saW51eC5pdC9saXN0aW5mby9sdHAK
