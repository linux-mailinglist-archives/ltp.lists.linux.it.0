Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [213.254.12.146])
	by mail.lfdr.de (Postfix) with ESMTPS id 1F19D197BE
	for <lists+linux-ltp@lfdr.de>; Fri, 10 May 2019 06:42:37 +0200 (CEST)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id DEFE4294A89
	for <lists+linux-ltp@lfdr.de>; Fri, 10 May 2019 06:42:36 +0200 (CEST)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-7.smtp.seeweb.it (in-7.smtp.seeweb.it
 [IPv6:2001:4b78:1:20::7])
 by picard.linux.it (Postfix) with ESMTP id 4BED43EA09B
 for <ltp@lists.linux.it>; Fri, 10 May 2019 06:42:32 +0200 (CEST)
Received: from mx1.redhat.com (mx1.redhat.com [209.132.183.28])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by in-7.smtp.seeweb.it (Postfix) with ESMTPS id 56EBD200B1E
 for <ltp@lists.linux.it>; Fri, 10 May 2019 06:42:31 +0200 (CEST)
Received: from smtp.corp.redhat.com (int-mx01.intmail.prod.int.phx2.redhat.com
 [10.5.11.11])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by mx1.redhat.com (Postfix) with ESMTPS id 90A60307B963;
 Fri, 10 May 2019 04:42:29 +0000 (UTC)
Received: from localhost (dhcp-12-130.nay.redhat.com [10.66.12.130])
 by smtp.corp.redhat.com (Postfix) with ESMTP id 7FDA5600CC;
 Fri, 10 May 2019 04:42:26 +0000 (UTC)
From: Murphy Zhou <xzhou@redhat.com>
To: ltp@lists.linux.it
Date: Fri, 10 May 2019 12:42:17 +0800
Message-Id: <20190510044217.5215-1-xzhou@redhat.com>
In-Reply-To: <CAOQ4uxjDyx7JFBSmkDe-rHNe=NriT710Ldsva=s+HasaDL0CTw@mail.gmail.com>
References: <CAOQ4uxjDyx7JFBSmkDe-rHNe=NriT710Ldsva=s+HasaDL0CTw@mail.gmail.com>
MIME-Version: 1.0
X-Scanned-By: MIMEDefang 2.79 on 10.5.11.11
X-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.5.16
 (mx1.redhat.com [10.5.110.47]); Fri, 10 May 2019 04:42:29 +0000 (UTC)
X-Virus-Scanned: clamav-milter 0.99.2 at in-7.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=-0.0 required=7.0 tests=SPF_HELO_PASS,SPF_PASS
 autolearn=disabled version=3.4.0
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on in-7.smtp.seeweb.it
Cc: liwan@redhat.com
Subject: [LTP] [PATCH v4] syscalls/swap{on,
	off}: fail softly if FIBMAP ioctl trial fails
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

QWRkIGEgdGVzdCBoZWxwZXIgdG8gZG8gYSBGSUJNQVAgaW9jdGwgdGVzdC4gUmVtb3ZlIG9sZCBm
cyB0eXBlIHdoaXRlbGlzdCBjb2RlLgpMZWF2ZSBzd2Fwb2ZmMDIgYWxvbmUgYmVjYXVzZSBpdCdz
IHBlcm1pc3Npb24gY2hlY2tpbmcgb25seSBpbiBpdC4KClNpZ25lZC1vZmYtYnk6IE11cnBoeSBa
aG91IDx4emhvdUByZWRoYXQuY29tPgotLS0KdjI6CiAgVGVzdCBGSUJNQVAgaW5zdGVhZCBvZiBm
c3R5cGUgd2hpdGVsaXN0Lgp2MzoKICBGaXggZnNfdHlwZSB1bmRlY2xhcmVkIGluIHN3YXBvZmYw
MS5jLgp2NDoKICBGYWlsIHNvZnRseSBpZiBGSUJNQVAgbml0IHN1cHBvcnRlZCwgaW5zdGVhZCBv
ZiBza2lwIGVudGlyZSB0ZXN0Y2FzZS4KCiBpbmNsdWRlL3RzdF9mcy5oICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgfCAgNSArKwogbGliL3RzdF9pb2N0bC5jICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIHwgMzkgKysrKysrKysrKysrKysKIHRlc3RjYXNlcy9rZXJuZWwvc3lzY2Fs
bHMvc3dhcG9mZi9zd2Fwb2ZmMDEuYyB8IDQ2ICsrKysrKysrKy0tLS0tLS0KIHRlc3RjYXNlcy9r
ZXJuZWwvc3lzY2FsbHMvc3dhcG9mZi9zd2Fwb2ZmMDIuYyB8IDEwIC0tLS0KIHRlc3RjYXNlcy9r
ZXJuZWwvc3lzY2FsbHMvc3dhcG9uL3N3YXBvbjAxLmMgICB8IDIzICsrKystLS0tCiB0ZXN0Y2Fz
ZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMi5jICAgfCAzMSArKysrKystLS0tLQog
dGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9zd2Fwb24vc3dhcG9uMDMuYyAgIHwgNTIgKysrKysr
KysrLS0tLS0tLS0tLQogNyBmaWxlcyBjaGFuZ2VkLCAxMjEgaW5zZXJ0aW9ucygrKSwgODUgZGVs
ZXRpb25zKC0pCiBjcmVhdGUgbW9kZSAxMDA2NDQgbGliL3RzdF9pb2N0bC5jCgpkaWZmIC0tZ2l0
IGEvaW5jbHVkZS90c3RfZnMuaCBiL2luY2x1ZGUvdHN0X2ZzLmgKaW5kZXggYjJiMTlhZGE2Li40
MjNjYTgyZWMgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUvdHN0X2ZzLmgKKysrIGIvaW5jbHVkZS90c3Rf
ZnMuaApAQCAtMTcyLDYgKzE3MiwxMSBAQCBjb25zdCBjaGFyICoqdHN0X2dldF9zdXBwb3J0ZWRf
ZnNfdHlwZXModm9pZCk7CiAgKi8KIHZvaWQgdHN0X2ZpbGxfZnMoY29uc3QgY2hhciAqcGF0aCwg
aW50IHZlcmJvc2UpOwogCisvKgorICogdGVzdCBpZiBGSUJNQVAgaW9jdGwgaXMgc3VwcG9ydGVk
CisgKi8KK2ludCB0c3RfZmlibWFwKGNvbnN0IGNoYXIgKmZpbGVuYW1lLCBjb25zdCBjaGFyICpm
c3R5cGUpOworCiAjaWZkZWYgVFNUX1RFU1RfSF9fCiBzdGF0aWMgaW5saW5lIGxvbmcgdHN0X2Zz
X3R5cGUoY29uc3QgY2hhciAqcGF0aCkKIHsKZGlmZiAtLWdpdCBhL2xpYi90c3RfaW9jdGwuYyBi
L2xpYi90c3RfaW9jdGwuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAuLmY2
M2ViNTU2NQotLS0gL2Rldi9udWxsCisrKyBiL2xpYi90c3RfaW9jdGwuYwpAQCAtMCwwICsxLDM5
IEBACisvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMC1vci1sYXRlcgorCisjaW5j
bHVkZSA8ZXJybm8uaD4KKyNpbmNsdWRlIDxzdGRpby5oPgorI2luY2x1ZGUgPHN0ZGxpYi5oPgor
I2luY2x1ZGUgPHN5cy9pb2N0bC5oPgorI2luY2x1ZGUgPGxpbnV4L2ZzLmg+CisKKyNkZWZpbmUg
VFNUX05PX0RFRkFVTFRfTUFJTgorCisjaW5jbHVkZSAidHN0X3Rlc3QuaCIKKworaW50IHRzdF9m
aWJtYXAoY29uc3QgY2hhciAqZmlsZW5hbWUsIGNvbnN0IGNoYXIgKmZzdHlwZSkKK3sKKwkvKiB0
ZXN0IGlmIEZJQk1BUCBpb2N0bCBpcyBzdXBwb3J0ZWQgKi8KKwlpbnQgZmQsIGJsb2NrID0gMDsK
KworCXRzdF9yZXMoVElORk8sICJUZXN0aW5nIGlmIEZJQk1BUCBpb2N0bCBpcyBzdXBwb3J0ZWQg
b24gJXMiLCBmc3R5cGUpOworCisJZmQgPSBvcGVuKGZpbGVuYW1lLCBPX1JEV1IgfCBPX0NSRUFU
LCAwNjY2KTsKKwlpZiAoZmQgPCAwKSB7CisJCXRzdF9yZXMoVFdBUk4gfCBURVJSTk8sCisJCQkg
Im9wZW4oJXMsIE9fUkRXUiB8IE9fQ1JFQVQsIDA2NjYpIGZhaWxlZCIsIGZpbGVuYW1lKTsKKwkJ
cmV0dXJuIDE7CisJfQorCisJaWYgKGlvY3RsKGZkLCBGSUJNQVAsICZibG9jaykpIHsKKwkJdHN0
X3JlcyhUSU5GTywgIkZJQk1BUCBpb2N0bCBpcyBOT1Qgc3VwcG9ydGVkIik7CisJCWNsb3NlKGZk
KTsKKwkJcmV0dXJuIDE7CisJfQorCXRzdF9yZXMoVElORk8sICJGSUJNQVAgaW9jdGwgaXMgc3Vw
cG9ydGVkIik7CisKKwlpZiAoY2xvc2UoZmQpKSB7CisJCXRzdF9yZXMoVFdBUk4gfCBURVJSTk8s
ICJjbG9zZShmZCkgZmFpbGVkIik7CisJCXJldHVybiAxOworCX0KKwlyZXR1cm4gMDsKK30KZGlm
ZiAtLWdpdCBhL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvc3dhcG9mZi9zd2Fwb2ZmMDEuYyBi
L3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvc3dhcG9mZi9zd2Fwb2ZmMDEuYwppbmRleCBhNjNl
NjYxYTUuLmZiY2U2NmZjOCAxMDA2NDQKLS0tIGEvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9z
d2Fwb2ZmL3N3YXBvZmYwMS5jCisrKyBiL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvc3dhcG9m
Zi9zd2Fwb2ZmMDEuYwpAQCAtMzIsNiArMzIsNyBAQCBzdGF0aWMgdm9pZCB2ZXJpZnlfc3dhcG9m
Zih2b2lkKTsKIAogY2hhciAqVENJRCA9ICJzd2Fwb2ZmMDEiOwogaW50IFRTVF9UT1RBTCA9IDE7
CitpbnQgZmlibWFwID0gMTsKIAogc3RhdGljIGxvbmcgZnNfdHlwZTsKIApAQCAtNTUsMjIgKzU2
LDI2IEBAIGludCBtYWluKGludCBhYywgY2hhciAqKmF2KQogc3RhdGljIHZvaWQgdmVyaWZ5X3N3
YXBvZmYodm9pZCkKIHsKIAlpZiAobHRwX3N5c2NhbGwoX19OUl9zd2Fwb24sICIuL3N3YXBmaWxl
MDEiLCAwKSAhPSAwKSB7Ci0JCWlmIChmc190eXBlID09IFRTVF9CVFJGU19NQUdJQyAmJiBlcnJu
byA9PSBFSU5WQUwpIHsKLQkJCXRzdF9icmttKFRDT05GLCBjbGVhbnVwLAotCQkJICAgICAgICAg
IlN3YXBmaWxlcyBvbiBCVFJGUyBhcmUgbm90IGltcGxlbWVudGVkIik7CisJCWlmIChmaWJtYXAg
PT0gMSkgeworCQkJdHN0X3Jlc20oVEJST0ssICJGYWlsZWQgdG8gdHVybiBvbiB0aGUgc3dhcCBm
aWxlIgorCQkJCSAiLCBza2lwcGluZyB0ZXN0IGl0ZXJhdGlvbiIpOworCQkJcmV0dXJuOworCQl9
IGVsc2UgeworCQkJdHN0X3Jlc20oVENPTkYsICJGYWlsZWQgdG8gdHVybiBvbiB0aGUgc3dhcCBm
aWxlIgorCQkJCSAiLCBrZWVwIGdvaW5nIGZvciBzYW5pdHkgY2hlY2siKTsKIAkJfQotCi0JCXRz
dF9yZXNtKFRCUk9LLCAiRmFpbGVkIHRvIHR1cm4gb24gdGhlIHN3YXAgZmlsZSIKLQkJCSAiLCBz
a2lwcGluZyB0ZXN0IGl0ZXJhdGlvbiIpOwotCQlyZXR1cm47CiAJfQogCiAJVEVTVChsdHBfc3lz
Y2FsbChfX05SX3N3YXBvZmYsICIuL3N3YXBmaWxlMDEiKSk7CiAKIAlpZiAoVEVTVF9SRVRVUk4g
PT0gLTEpIHsKLQkJdHN0X3Jlc20oVEZBSUwgfCBUVEVSUk5PLCAiRmFpbGVkIHRvIHR1cm4gb2Zm
IHN3YXBmaWxlLCIKLQkJICAgICAgICAgIiBzeXN0ZW0gcmVib290IGFmdGVyIGV4ZWN1dGlvbiBv
ZiBMVFAgIgotCQkJICJ0ZXN0IHN1aXRlIGlzIHJlY29tbWVuZGVkLiIpOworCQlpZiAoZmlibWFw
ID09IDEpIHsKKwkJCXRzdF9yZXNtKFRGQUlMIHwgVFRFUlJOTywgIkZhaWxlZCB0byB0dXJuIG9m
ZiBzd2FwZmlsZSwiCisJCQkJICIgc3lzdGVtIHJlYm9vdCBhZnRlciBleGVjdXRpb24gb2YgTFRQ
ICIKKwkJCQkgInRlc3Qgc3VpdGUgaXMgcmVjb21tZW5kZWQuIik7CisJCX0gZWxzZSB7CisJCQl0
c3RfcmVzbShUQ09ORiwgIkZhaWxlZCB0byB0dXJuIG9mZiBzd2FwZmlsZSIpOworCQl9CiAJfSBl
bHNlIHsKIAkJdHN0X3Jlc20oVFBBU1MsICJTdWNjZWVkZWQgdG8gdHVybiBvZmYgc3dhcGZpbGUi
KTsKIAl9CkBAIC04NiwxMyArOTEsMTEgQEAgc3RhdGljIHZvaWQgc2V0dXAodm9pZCkKIAogCXRz
dF90bXBkaXIoKTsKIAotCXN3aXRjaCAoKGZzX3R5cGUgPSB0c3RfZnNfdHlwZShjbGVhbnVwLCAi
LiIpKSkgewotCWNhc2UgVFNUX05GU19NQUdJQzoKLQljYXNlIFRTVF9UTVBGU19NQUdJQzoKLQkJ
dHN0X2Jya20oVENPTkYsIGNsZWFudXAsCi0JCQkgIkNhbm5vdCBkbyBzd2Fwb2ZmIG9uIGEgZmls
ZSBvbiAlcyBmaWxlc3lzdGVtIiwKLQkJCSB0c3RfZnNfdHlwZV9uYW1lKGZzX3R5cGUpKTsKLQli
cmVhazsKKwlmc190eXBlID0gdHN0X2ZzX3R5cGUoY2xlYW51cCwgIi4iKTsKKwlpZiAodHN0X2Zp
Ym1hcCgiLi90c3RfZmlibWFwIiwgdHN0X2ZzX3R5cGVfbmFtZShmc190eXBlKSkpIHsKKwkJdHN0
X3Jlc20oVENPTkYsCisJCQkgIldpbGwgbm90IHJlcG9ydCBGQUlMIGFzIEZJQk1BUCBpb2N0bCBu
b3Qgc3VwcG9ydGVkIik7CisJCWZpYm1hcCA9IDA7CiAJfQogCiAJaWYgKCF0c3RfZnNfaGFzX2Zy
ZWUoTlVMTCwgIi4iLCA2NCwgVFNUX01CKSkgewpAQCAtMTAzLDggKzEwNiwxMyBAQCBzdGF0aWMg
dm9pZCBzZXR1cCh2b2lkKQogCWlmICh0c3RfZmlsbF9maWxlKCJzd2FwZmlsZTAxIiwgMHgwMCwg
MTAyNCwgNjU1MzYpKQogCQl0c3RfYnJrbShUQlJPSywgY2xlYW51cCwgIkZhaWxlZCB0byBjcmVh
dGUgZmlsZSBmb3Igc3dhcCIpOwogCi0JaWYgKHN5c3RlbSgibWtzd2FwIHN3YXBmaWxlMDEgPiB0
bXBmaWxlIDI+JjEiKSAhPSAwKQotCQl0c3RfYnJrbShUQlJPSywgY2xlYW51cCwgIkZhaWxlZCB0
byBtYWtlIHN3YXBmaWxlIik7CisJaWYgKHN5c3RlbSgibWtzd2FwIHN3YXBmaWxlMDEgPiB0bXBm
aWxlIDI+JjEiKSAhPSAwKSB7CisJCWlmIChmaWJtYXAgPT0gMSkgeworCQkJdHN0X2Jya20oVEJS
T0ssIGNsZWFudXAsICJGYWlsZWQgdG8gbWFrZSBzd2FwZmlsZSIpOworCQl9IGVsc2UgeworCQkJ
dHN0X3Jlc20oVENPTkYsICJGYWlsZWQgdG8gbWFrZSBzd2FwZmlsZSIpOworCQl9CisJfQogfQog
CiBzdGF0aWMgdm9pZCBjbGVhbnVwKHZvaWQpCmRpZmYgLS1naXQgYS90ZXN0Y2FzZXMva2VybmVs
L3N5c2NhbGxzL3N3YXBvZmYvc3dhcG9mZjAyLmMgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxz
L3N3YXBvZmYvc3dhcG9mZjAyLmMKaW5kZXggYjVjNjMxMmExLi4yMjY3NDQ5ZWIgMTAwNjQ0Ci0t
LSBhL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvc3dhcG9mZi9zd2Fwb2ZmMDIuYworKysgYi90
ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvZmYvc3dhcG9mZjAyLmMKQEAgLTEyNCw3ICsx
MjQsNiBAQCBzdGF0aWMgdm9pZCBjbGVhbnVwMDEodm9pZCkKIAogc3RhdGljIHZvaWQgc2V0dXAo
dm9pZCkKIHsKLQlsb25nIHR5cGU7CiAJc3RydWN0IHBhc3N3ZCAqbm9ib2R5OwogCiAJdHN0X3Np
ZyhGT1JLLCBERUZfSEFORExFUiwgY2xlYW51cCk7CkBAIC0xMzgsMTUgKzEzNyw2IEBAIHN0YXRp
YyB2b2lkIHNldHVwKHZvaWQpCiAKIAl0c3RfdG1wZGlyKCk7CiAKLQlzd2l0Y2ggKCh0eXBlID0g
dHN0X2ZzX3R5cGUoY2xlYW51cCwgIi4iKSkpIHsKLQljYXNlIFRTVF9ORlNfTUFHSUM6Ci0JY2Fz
ZSBUU1RfVE1QRlNfTUFHSUM6Ci0JCXRzdF9icmttKFRDT05GLCBjbGVhbnVwLAotCQkJICJDYW5u
b3QgZG8gc3dhcG9mZiBvbiBhIGZpbGUgb24gJXMgZmlsZXN5c3RlbSIsCi0JCQkgdHN0X2ZzX3R5
cGVfbmFtZSh0eXBlKSk7Ci0JYnJlYWs7Ci0JfQotCiAJaWYgKCF0c3RfZnNfaGFzX2ZyZWUoTlVM
TCwgIi4iLCAxLCBUU1RfS0IpKSB7CiAJCXRzdF9icmttKFRCUk9LLCBjbGVhbnVwLAogCQkJICJJ
bnN1ZmZpY2llbnQgZGlzayBzcGFjZSB0byBjcmVhdGUgc3dhcCBmaWxlIik7CmRpZmYgLS1naXQg
YS90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMS5jIGIvdGVzdGNhc2Vz
L2tlcm5lbC9zeXNjYWxscy9zd2Fwb24vc3dhcG9uMDEuYwppbmRleCAzMjUzOGY4MmIuLjA0MTlj
YWUyOCAxMDA2NDQKLS0tIGEvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9zd2Fwb24vc3dhcG9u
MDEuYworKysgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMS5jCkBA
IC0zMSw2ICszMSw3IEBAIHN0YXRpYyB2b2lkIGNsZWFudXAodm9pZCk7CiAKIGNoYXIgKlRDSUQg
PSAic3dhcG9uMDEiOwogaW50IFRTVF9UT1RBTCA9IDE7CitpbnQgZmlibWFwID0gMTsKIAogc3Rh
dGljIGxvbmcgZnNfdHlwZTsKIApAQCAtMzksMTIgKzQwLDExIEBAIHN0YXRpYyB2b2lkIHZlcmlm
eV9zd2Fwb24odm9pZCkKIAlURVNUKGx0cF9zeXNjYWxsKF9fTlJfc3dhcG9uLCAiLi9zd2FwZmls
ZTAxIiwgMCkpOwogCiAJaWYgKFRFU1RfUkVUVVJOID09IC0xKSB7Ci0JCWlmIChmc190eXBlID09
IFRTVF9CVFJGU19NQUdJQyAmJiBlcnJubyA9PSBFSU5WQUwpIHsKLQkJCXRzdF9icmttKFRDT05G
LCBjbGVhbnVwLAotCQkJICAgICAgICAgIlN3YXBmaWxlIG9uIEJUUkZTIG5vdCBpbXBsZW1ldGVk
Iik7Ci0JCQlyZXR1cm47CisJCWlmIChmaWJtYXAgPT0gMCkgeworCQkJdHN0X3Jlc20oVENPTkYs
ICJGYWlsZWQgdG8gdHVybiBvbiBzd2FwZmlsZSIpOworCQl9IGVsc2UgeworCQkJdHN0X3Jlc20o
VEZBSUwgfCBUVEVSUk5PLCAiRmFpbGVkIHRvIHR1cm4gb24gc3dhcGZpbGUiKTsKIAkJfQotCQl0
c3RfcmVzbShURkFJTCB8IFRURVJSTk8sICJGYWlsZWQgdG8gdHVybiBvbiBzd2FwZmlsZSIpOwog
CX0gZWxzZSB7CiAJCXRzdF9yZXNtKFRQQVNTLCAiU3VjY2VlZGVkIHRvIHR1cm4gb24gc3dhcGZp
bGUiKTsKIAkJLyp3ZSBuZWVkIHRvIHR1cm4gdGhpcyBzd2FwIGZpbGUgb2ZmIGZvciAtaSBvcHRp
b24gKi8KQEAgLTU4LDcgKzU4LDYgQEAgc3RhdGljIHZvaWQgdmVyaWZ5X3N3YXBvbih2b2lkKQog
CiBpbnQgbWFpbihpbnQgYWMsIGNoYXIgKiphdikKIHsKLQogCWludCBsYzsKIAogCXRzdF9wYXJz
ZV9vcHRzKGFjLCBhdiwgTlVMTCwgTlVMTCk7CkBAIC04NCwxMyArODMsMTEgQEAgc3RhdGljIHZv
aWQgc2V0dXAodm9pZCkKIAogCXRzdF90bXBkaXIoKTsKIAotCXN3aXRjaCAoKGZzX3R5cGUgPSB0
c3RfZnNfdHlwZShjbGVhbnVwLCAiLiIpKSkgewotCWNhc2UgVFNUX05GU19NQUdJQzoKLQljYXNl
IFRTVF9UTVBGU19NQUdJQzoKLQkJdHN0X2Jya20oVENPTkYsIGNsZWFudXAsCi0JCQkgIkNhbm5v
dCBkbyBzd2Fwb24gb24gYSBmaWxlIG9uICVzIGZpbGVzeXN0ZW0iLAotCQkJIHRzdF9mc190eXBl
X25hbWUoZnNfdHlwZSkpOwotCWJyZWFrOworCWZzX3R5cGUgPSB0c3RfZnNfdHlwZShjbGVhbnVw
LCAiLiIpOworCWlmICh0c3RfZmlibWFwKCIuL3RzdF9maWJtYXAiLCB0c3RfZnNfdHlwZV9uYW1l
KGZzX3R5cGUpKSkgeworCQl0c3RfcmVzbShUQ09ORiwKKwkJCSAiV2lsbCBub3QgcmVwb3J0IEZB
SUwgYXMgRklCTUFQIGlvY3RsIG5vdCBzdXBwb3J0ZWQiKTsKKwkJZmlibWFwID0gMDsKIAl9CiAK
IAltYWtlX3N3YXBmaWxlKGNsZWFudXAsICJzd2FwZmlsZTAxIik7CmRpZmYgLS1naXQgYS90ZXN0
Y2FzZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMi5jIGIvdGVzdGNhc2VzL2tlcm5l
bC9zeXNjYWxscy9zd2Fwb24vc3dhcG9uMDIuYwppbmRleCA0YWY1MTA1YzYuLjgxMjBiZTk4NyAx
MDA2NDQKLS0tIGEvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9zd2Fwb24vc3dhcG9uMDIuYwor
KysgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMi5jCkBAIC00NCw2
ICs0NCw3IEBAIHN0YXRpYyB2b2lkIGNsZWFudXAwMSh2b2lkKTsKIAogY2hhciAqVENJRCA9ICJz
d2Fwb24wMiI7CiBpbnQgVFNUX1RPVEFMID0gNDsKK2ludCBmaWJtYXAgPSAxOwogCiBzdGF0aWMg
dWlkX3Qgbm9ib2R5X3VpZDsKIHN0YXRpYyBpbnQgZG9fc3dhcG9mZjsKQEAgLTgxLDE0ICs4Miwx
NSBAQCBzdGF0aWMgdm9pZCB2ZXJpZnlfc3dhcG9uKHN0cnVjdCB0ZXN0X2Nhc2VfdCAqdGVzdCkK
IAkJcmV0dXJuOwogCX0KIAotCWlmIChmc190eXBlID09IFRTVF9CVFJGU19NQUdJQyAmJiBlcnJu
byA9PSBFSU5WQUwpIHsKLQkJdHN0X3Jlc20oVENPTkYsICJTd2FwZmlsZSBvbiBCVFJGUyBub3Qg
aW1wbGVtZXRlZCIpOwotCQkJcmV0dXJuOworCWlmIChmaWJtYXAgPT0gMSkgeworCQl0c3RfcmVz
bShURkFJTCwgInN3YXBvbigyKSBmYWlsZWQgdG8gcHJvZHVjZSBleHBlY3RlZCBlcnJvcjoiCisJ
CQkgIiAlZCwgZXJybm86ICVzIGFuZCBnb3QgJWQuIiwgdGVzdC0+ZXhwX2Vycm5vLAorCQkJIHRl
c3QtPmV4cF9lcnJ2YWwsIFRFU1RfRVJSTk8pOworCX0gZWxzZSB7CisJCXRzdF9yZXNtKFRDT05G
LCAic3dhcG9uKDIpIGZhaWxlZCB0byBwcm9kdWNlIGV4cGVjdGVkIGVycm9yOiIKKwkJCSAiICVk
LCBlcnJubzogJXMgYW5kIGdvdCAlZC4iLCB0ZXN0LT5leHBfZXJybm8sCisJCQkgdGVzdC0+ZXhw
X2VycnZhbCwgVEVTVF9FUlJOTyk7CiAJfQotCi0JdHN0X3Jlc20oVEZBSUwsICJzd2Fwb24oMikg
ZmFpbGVkIHRvIHByb2R1Y2UgZXhwZWN0ZWQgZXJyb3I6IgotCSAgICAgICAgICIgJWQsIGVycm5v
OiAlcyBhbmQgZ290ICVkLiIsIHRlc3QtPmV4cF9lcnJubywKLQkgICAgICAgICB0ZXN0LT5leHBf
ZXJydmFsLCBURVNUX0VSUk5PKTsKIH0KIAogaW50IG1haW4oaW50IGFjLCBjaGFyICoqYXYpCkBA
IC0xMzIsMTMgKzEzNCwxMSBAQCBzdGF0aWMgdm9pZCBzZXR1cCh2b2lkKQogCiAJdHN0X3RtcGRp
cigpOwogCi0Jc3dpdGNoICgoZnNfdHlwZSA9IHRzdF9mc190eXBlKGNsZWFudXAsICIuIikpKSB7
Ci0JY2FzZSBUU1RfTkZTX01BR0lDOgotCWNhc2UgVFNUX1RNUEZTX01BR0lDOgotCQl0c3RfYnJr
bShUQ09ORiwgY2xlYW51cCwKLQkJCSAiQ2Fubm90IGRvIHN3YXBvbiBvbiBhIGZpbGUgb24gJXMg
ZmlsZXN5c3RlbSIsCi0JCQkgdHN0X2ZzX3R5cGVfbmFtZShmc190eXBlKSk7Ci0JYnJlYWs7CisJ
ZnNfdHlwZSA9IHRzdF9mc190eXBlKGNsZWFudXAsICIuIik7CisJaWYgKHRzdF9maWJtYXAoIi4v
dHN0X2ZpYm1hcCIsIHRzdF9mc190eXBlX25hbWUoZnNfdHlwZSkpKSB7CisJCXRzdF9yZXNtKFRD
T05GLAorCQkJICJXaWxsIG5vdCByZXBvcnQgRkFJTCBhcyBGSUJNQVAgaW9jdGwgbm90IHN1cHBv
cnRlZCIpOworCQlmaWJtYXAgPSAwOwogCX0KIAogCVNBRkVfVE9VQ0goY2xlYW51cCwgIm5vdHN3
YXAiLCAwNzc3LCBOVUxMKTsKQEAgLTE0Niw4ICsxNDYsNyBAQCBzdGF0aWMgdm9pZCBzZXR1cCh2
b2lkKQogCW1ha2Vfc3dhcGZpbGUoY2xlYW51cCwgImFscmVhZHl1c2VkIik7CiAKIAlpZiAobHRw
X3N5c2NhbGwoX19OUl9zd2Fwb24sICJhbHJlYWR5dXNlZCIsIDApKSB7Ci0JCWlmIChmc190eXBl
ICE9IFRTVF9CVFJGU19NQUdJQyB8fCBlcnJubyAhPSBFSU5WQUwpCi0JCQl0c3RfcmVzbShUV0FS
TiB8IFRFUlJOTywgInN3YXBvbihhbHJlYWR5dXNlZCkgZmFpbGVkIik7CisJCXRzdF9yZXNtKFRX
QVJOIHwgVEVSUk5PLCAic3dhcG9uKGFscmVhZHl1c2VkKSBmYWlsZWQiKTsKIAl9IGVsc2Ugewog
CQlkb19zd2Fwb2ZmID0gMTsKIAl9CmRpZmYgLS1naXQgYS90ZXN0Y2FzZXMva2VybmVsL3N5c2Nh
bGxzL3N3YXBvbi9zd2Fwb24wMy5jIGIvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9zd2Fwb24v
c3dhcG9uMDMuYwppbmRleCA5NTVhYzI0N2IuLjY5NmQwYTNkZCAxMDA2NDQKLS0tIGEvdGVzdGNh
c2VzL2tlcm5lbC9zeXNjYWxscy9zd2Fwb24vc3dhcG9uMDMuYworKysgYi90ZXN0Y2FzZXMva2Vy
bmVsL3N5c2NhbGxzL3N3YXBvbi9zd2Fwb24wMy5jCkBAIC00OSw2ICs0OSw3IEBAIHN0YXRpYyBp
bnQgY2hlY2tfYW5kX3N3YXBvZmYoY29uc3QgY2hhciAqZmlsZW5hbWUpOwogCiBjaGFyICpUQ0lE
ID0gInN3YXBvbjAzIjsKIGludCBUU1RfVE9UQUwgPSAxOworaW50IGZpYm1hcCA9IDE7CiAKIHN0
YXRpYyBpbnQgc3dhcGZpbGVzOwogCkBAIC02NSw2ICs2NiwxNCBAQCBzdGF0aWMgc3RydWN0IHN3
YXBfdGVzdGZpbGVfdCB7CiAKIGludCBleHBlY3RlZF9lcnJubyA9IEVQRVJNOwogCit2b2lkIHJl
Y29yZF9mYWlsdXJlX3NvZnQoaW50IGZsYWcsIGNoYXIgKnMsIGludCBleHAsIGNoYXIgKmVycikK
K3sKKwlpZiAoZmlibWFwICE9IDEpCisJCWZsYWcgPSBUQ09ORjsKKworCXRzdF9yZXNtKGZsYWcs
IHMsIGV4cCwgZXJyKTsKK30KKwogaW50IG1haW4oaW50IGFjLCBjaGFyICoqYXYpCiB7CiAJaW50
IGxjOwpAQCAtODgsMTAgKzk3LDEwIEBAIGludCBtYWluKGludCBhYywgY2hhciAqKmF2KQogCQkJ
dHN0X3Jlc20oVFBBU1MsICJzd2Fwb24oMikgZ290IGV4cGVjdGVkIGZhaWx1cmUgKCVkKSwiLAog
CQkJCSBleHBlY3RlZF9lcnJubyk7CiAJCX0gZWxzZSBpZiAoVEVTVF9SRVRVUk4gPCAwKSB7Ci0J
CQl0c3RfcmVzbShURkFJTCB8IFRURVJSTk8sCisJCQlyZWNvcmRfZmFpbHVyZV9zb2Z0KFRGQUlM
IHwgVFRFUlJOTywKIAkJCQkgInN3YXBvbigyKSBmYWlsZWQgdG8gcHJvZHVjZSBleHBlY3RlZCBl
cnJvciAiCi0JCQkJICIoJWQpLiBTeXN0ZW0gcmVib290IHJlY29tbWVuZGVkLiIsCi0JCQkJIGV4
cGVjdGVkX2Vycm5vKTsKKwkJCQkgIiglZCksIGdvdCAoJXMpLiBTeXN0ZW0gcmVib290IHJlY29t
bWVuZGVkLiIsCisJCQkJIGV4cGVjdGVkX2Vycm5vLCBzdHJlcnJvcihURVNUX0VSUk5PKSk7CiAJ
CX0gZWxzZSB7CiAJCQkvKiBQcm9iYWJseSB0aGUgc3lzdGVtIHN1cHBvcnRzIE1BWF9TV0FQRklM
RVMgPiAzMCwKIAkJCSAqIGxldCdzIHRyeSB3aXRoIE1BWF9TV0FQRklMRVMgPT0gMzIgKi8KQEAg
LTEwMyw4ICsxMTIsMTAgQEAgaW50IG1haW4oaW50IGFjLCBjaGFyICoqYXYpCiAKIAkJCS8qIENo
ZWNrIHJldHVybiBjb2RlIChub3cgd2UncmUgZXhwZWN0aW5nIHN1Y2Nlc3MpICovCiAJCQlpZiAo
VEVTVF9SRVRVUk4gPCAwKSB7Ci0JCQkJdHN0X3Jlc20oVEZBSUwgfCBUVEVSUk5PLAotCQkJCQkg
InN3YXBvbigyKSBnb3QgYW4gdW5leHBlY3RlZCBmYWlsdXJlIik7CisJCQkJcmVjb3JkX2ZhaWx1
cmVfc29mdChURkFJTCB8IFRURVJSTk8sCisJCQkJCSAic3dhcG9uKDIpIGdvdCBhbiB1bmV4cGVj
dGVkIGZhaWx1cmUiCisJCQkJCSAiKCVkOiAlcykuIiwKKwkJCQkJIFRFU1RfUkVUVVJOLCBzdHJl
cnJvcihURVNUX0VSUk5PKSk7CiAJCQl9IGVsc2UgewogCQkJCS8qIENhbGwgc3dhcG9uIHN5cyBj
YWxsIG9uY2UgYWdhaW4gZm9yIDMzCiAJCQkJICogbm93IHdlIGhhdmUgdG8gcmVjZWl2ZSBhbiBl
cnJvciAqLwpAQCAtMTIxLDcgKzEzMiw3IEBAIGludCBtYWluKGludCBhYywgY2hhciAqKmF2KQog
CQkJCQkJICIgTUFYX1NXQVBGSUxFUyBpcyAzMiIsCiAJCQkJCQkgZXhwZWN0ZWRfZXJybm8pOwog
CQkJCX0gZWxzZSB7Ci0JCQkJCXRzdF9yZXNtKFRGQUlMLAorCQkJCQlyZWNvcmRfZmFpbHVyZV9z
b2Z0KFRGQUlMLAogCQkJCQkJICJzd2Fwb24oMikgZmFpbGVkIHRvIHByb2R1Y2UiCiAJCQkJCQkg
IiBleHBlY3RlZCBlcnJvcjogJWQsIGdvdCAlcy4iCiAJCQkJCQkgIiBTeXN0ZW0gcmVib290IGFm
dGVyIGV4ZWN1dGlvbiBvZiBMVFAiCkBAIC0xNDEsNyArMTUyLDYgQEAgaW50IG1haW4oaW50IGFj
LCBjaGFyICoqYXYpCiAKIAljbGVhbnVwKCk7CiAJdHN0X2V4aXQoKTsKLQogfQogCiAvKgpAQCAt
MjE1LDkgKzIyNSw2IEBAIHN0YXRpYyBpbnQgc2V0dXBfc3dhcCh2b2lkKQogCQkJLyogdHVybiBv
biB0aGUgc3dhcCBmaWxlICovCiAJCQlyZXMgPSBsdHBfc3lzY2FsbChfX05SX3N3YXBvbiwgZmls
ZW5hbWUsIDApOwogCQkJaWYgKHJlcyAhPSAwKSB7Ci0JCQkJaWYgKGZzX3R5cGUgPT0gVFNUX0JU
UkZTX01BR0lDICYmIGVycm5vID09IEVJTlZBTCkKLQkJCQkJZXhpdCgyKTsKLQogCQkJCWlmIChl
cnJubyA9PSBFUEVSTSkgewogCQkJCQlwcmludGYoIlN1Y2Nlc3NmdWxseSBjcmVhdGVkICVkICIK
IAkJCQkJICAgICAgICJzd2FwZmlsZXNcbiIsIGopOwpAQCAtMjI1LDcgKzIzMiw4IEBAIHN0YXRp
YyBpbnQgc2V0dXBfc3dhcCh2b2lkKQogCQkJCX0gZWxzZSB7CiAJCQkJCXByaW50ZigiRmFpbGVk
IHRvIGNyZWF0ZSAiCiAJCQkJCSAgICAgICAic3dhcGZpbGU6ICVzXG4iLCBmaWxlbmFtZSk7Ci0J
CQkJCWV4aXQoMSk7CisJCQkJCWlmIChmaWJtYXAgPT0gMSkKKwkJCQkJCWV4aXQoMSk7CiAJCQkJ
fQogCQkJfQogCQl9CkBAIC0yMzMsMTUgKzI0MSw4IEBAIHN0YXRpYyBpbnQgc2V0dXBfc3dhcCh2
b2lkKQogCX0gZWxzZQogCQl3YWl0cGlkKHBpZCwgJnN0YXR1cywgMCk7CiAKLQlzd2l0Y2ggKFdF
WElUU1RBVFVTKHN0YXR1cykpIHsKLQljYXNlIDA6Ci0JYnJlYWs7Ci0JY2FzZSAyOgotCQl0c3Rf
YnJrbShUQ09ORiwgY2xlYW51cCwgIlN3YXBmaWxlIG9uIEJUUkZTIG5vdCBpbXBsZW1ldGVkIik7
Ci0JYnJlYWs7Ci0JZGVmYXVsdDoKKwlpZiAoV0VYSVRTVEFUVVMoc3RhdHVzKSkgewogCQl0c3Rf
YnJrbShURkFJTCwgY2xlYW51cCwgIkZhaWxlZCB0byBzZXR1cCBzd2FwcyIpOwotCWJyZWFrOwog
CX0KIAogCS8qIENyZWF0ZSBhbGwgbmVlZGVkIGV4dHJhIHN3YXBmaWxlcyBmb3IgdGVzdGluZyAq
LwpAQCAtMjQ5LDcgKzI1MCw2IEBAIHN0YXRpYyBpbnQgc2V0dXBfc3dhcCh2b2lkKQogCQltYWtl
X3N3YXBmaWxlKGNsZWFudXAsIHN3YXBfdGVzdGZpbGVzW2pdLmZpbGVuYW1lKTsKIAogCXJldHVy
biAwOwotCiB9CiAKIC8qCkBAIC0zMzMsMTMgKzMzMywxMSBAQCBzdGF0aWMgdm9pZCBzZXR1cCh2
b2lkKQogCiAJdHN0X3RtcGRpcigpOwogCi0Jc3dpdGNoICgoZnNfdHlwZSA9IHRzdF9mc190eXBl
KGNsZWFudXAsICIuIikpKSB7Ci0JY2FzZSBUU1RfTkZTX01BR0lDOgotCWNhc2UgVFNUX1RNUEZT
X01BR0lDOgotCQl0c3RfYnJrbShUQ09ORiwgY2xlYW51cCwKLQkJCSAiQ2Fubm90IGRvIHN3YXBv
biBvbiBhIGZpbGUgb24gJXMgZmlsZXN5c3RlbSIsCi0JCQkgdHN0X2ZzX3R5cGVfbmFtZShmc190
eXBlKSk7Ci0JYnJlYWs7CisJZnNfdHlwZSA9IHRzdF9mc190eXBlKGNsZWFudXAsICIuIik7CisJ
aWYgKHRzdF9maWJtYXAoIi4vdHN0X2ZpYm1hcCIsIHRzdF9mc190eXBlX25hbWUoZnNfdHlwZSkp
KSB7CisJCXRzdF9yZXNtKFRDT05GLAorCQkJICJXaWxsIG5vdCByZXBvcnQgRkFJTCBhcyBGSUJN
QVAgaW9jdGwgbm90IHN1cHBvcnRlZCIpOworCQlmaWJtYXAgPSAwOwogCX0KIAogCVRFU1RfUEFV
U0U7Ci0tIAoyLjIxLjAKCgotLSAKTWFpbGluZyBsaXN0IGluZm86IGh0dHBzOi8vbGlzdHMubGlu
dXguaXQvbGlzdGluZm8vbHRwCg==
