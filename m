Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [213.254.12.146])
	by mail.lfdr.de (Postfix) with ESMTPS id 8A9377A4532
	for <lists+linux-ltp@lfdr.de>; Mon, 18 Sep 2023 10:55:13 +0200 (CEST)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id C57FC3CE4EE
	for <lists+linux-ltp@lfdr.de>; Mon, 18 Sep 2023 10:55:12 +0200 (CEST)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-4.smtp.seeweb.it (in-4.smtp.seeweb.it [217.194.8.4])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-384))
 (No client certificate requested)
 by picard.linux.it (Postfix) with ESMTPS id 3F9753CB08C
 for <ltp@lists.linux.it>; Mon, 18 Sep 2023 10:55:07 +0200 (CEST)
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
 (No client certificate requested)
 by in-4.smtp.seeweb.it (Postfix) with ESMTPS id 2A5EB100034D
 for <ltp@lists.linux.it>; Mon, 18 Sep 2023 10:55:05 +0200 (CEST)
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
 (No client certificate requested)
 by smtp-out2.suse.de (Postfix) with ESMTPS id 823151F8C1;
 Mon, 18 Sep 2023 08:55:05 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1695027305; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=I7A7H3Ls9lsi8JNWuzHYV8p+lq39YyweFtqtEr3BSdo=;
 b=i0OT0tXbr+tCGeEFEXUtr95J7cZTKGsFe3wisKDt4TprOz2/ze0beIYSP8v8Rsy0LhDX/i
 gUmdvXjFhdqdFkrMJvgbszjRWKdhn2Lqq5cEUK8KVokGpwslI1taeYgQZb27LfJKCIAdD5
 9g/PmrnPIfCOkCFQNEafXZLYIQ7sPqY=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1695027305;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=I7A7H3Ls9lsi8JNWuzHYV8p+lq39YyweFtqtEr3BSdo=;
 b=hoBwGBThTA2XLcPYkjd52L6uUyj9TFmwJXiZdlSCmbddsLrY9khrSbE7SeoawcivpkGWGf
 BrR5VmeVpN0aikAQ==
Received: from imap2.suse-dmz.suse.de (imap2.suse-dmz.suse.de [192.168.254.74])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature ECDSA (P-521) server-digest SHA512)
 (No client certificate requested)
 by imap2.suse-dmz.suse.de (Postfix) with ESMTPS id 6DC9513A64;
 Mon, 18 Sep 2023 08:55:05 +0000 (UTC)
Received: from dovecot-director2.suse.de ([192.168.254.65])
 by imap2.suse-dmz.suse.de with ESMTPSA id MHXhGWkQCGXlBQAAMHmgww
 (envelope-from <mkittler@suse.de>); Mon, 18 Sep 2023 08:55:05 +0000
From: Marius Kittler <mkittler@suse.de>
To: ltp@lists.linux.it
Date: Mon, 18 Sep 2023 10:55:01 +0200
Message-ID: <20230918085502.17091-2-mkittler@suse.de>
X-Mailer: git-send-email 2.42.0
In-Reply-To: <20230918085502.17091-1-mkittler@suse.de>
References: <20230918085502.17091-1-mkittler@suse.de>
MIME-Version: 1.0
X-Virus-Scanned: clamav-milter 1.0.1 at in-4.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=0.1 required=7.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,DKIM_VALID_EF,SPF_HELO_NONE,SPF_PASS shortcircuit=no
 autolearn=disabled version=4.0.0
X-Spam-Checker-Version: SpamAssassin 4.0.0 (2022-12-13) on in-4.smtp.seeweb.it
Subject: [LTP] [PATCH v4 1/2] Refactor ioctl02.c to use the new test API
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

KiBVc2UgY2hlY2twb2ludCBBUEkgaW5zdGVhZCBvZiBzaWduYWxzCiogVXNlIFNBRkVf4oCmLW1h
Y3JvcyBpbnN0ZWFkIG9mIG1hbnVhbCBlcnJvciBoYW5kbGluZwoqIFNlZSBodHRwczovL2dpdGh1
Yi5jb20vbGludXgtdGVzdC1wcm9qZWN0L2x0cC9pc3N1ZXMvNjM3CiAgZm9yIHJlbGF0ZWQgZGlz
Y3Vzc2lvbi4KClNpZ25lZC1vZmYtYnk6IE1hcml1cyBLaXR0bGVyIDxta2l0dGxlckBzdXNlLmRl
PgotLS0KIHRlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvaW9jdGwvaW9jdGwwMi5jIHwgMzgxICsr
KysrLS0tLS0tLS0tLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCA4OSBpbnNlcnRpb25zKCspLCAy
OTIgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9p
b2N0bC9pb2N0bDAyLmMgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL2lvY3RsL2lvY3RsMDIu
YwppbmRleCBiNGQ0YTM1OTQuLmU1NTEwMTI0YyAxMDA2NDQKLS0tIGEvdGVzdGNhc2VzL2tlcm5l
bC9zeXNjYWxscy9pb2N0bC9pb2N0bDAyLmMKKysrIGIvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxs
cy9pb2N0bC9pb2N0bDAyLmMKQEAgLTEsMTk1ICsxLDk0IEBACisvLyBTUERYLUxpY2Vuc2UtSWRl
bnRpZmllcjogR1BMLTIuMC1vci1sYXRlcgogLyoKLSAqICAgQ29weXJpZ2h0IChjKSBJbnRlcm5h
dGlvbmFsIEJ1c2luZXNzIE1hY2hpbmVzICBDb3JwLiwgMjAwMQotICogICBDb3B5cmlnaHQgKGMp
IDIwMjAgUGV0ciBWb3JlbCA8cHZvcmVsQHN1c2UuY3o+Ci0gKgotICogICBUaGlzIHByb2dyYW0g
aXMgZnJlZSBzb2Z0d2FyZTsgIHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkK
LSAqICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5z
ZSBhcyBwdWJsaXNoZWQgYnkKLSAqICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0
aGVyIHZlcnNpb24gMiBvZiB0aGUgTGljZW5zZSwgb3IKLSAqICAgKGF0IHlvdXIgb3B0aW9uKSBh
bnkgbGF0ZXIgdmVyc2lvbi4KLSAqCi0gKiAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBp
biB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAotICogICBidXQgV0lUSE9VVCBBTlkg
V0FSUkFOVFk7ICB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKLSAqICAgTUVS
Q0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlCi0g
KiAgIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgotICoK
LSAqICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwg
UHVibGljIExpY2Vuc2UKLSAqICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07ICBpZiBub3QsIHdy
aXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCi0gKiAgIEZvdW5kYXRpb24sIEluYy4sIDUxIEZyYW5r
bGluIFN0cmVldCwgRmlmdGggRmxvb3IsIEJvc3RvbiwgTUEgMDIxMTAtMTMwMSBVU0EKKyAqIENv
cHlyaWdodCAoYykgSW50ZXJuYXRpb25hbCBCdXNpbmVzcyBNYWNoaW5lcyAgQ29ycC4sIDIwMDEK
KyAqIENvcHlyaWdodCAoYykgMjAyMCBQZXRyIFZvcmVsIDxwdm9yZWxAc3VzZS5jej4KKyAqIENv
cHlyaWdodCAoYykgMjAyMyBNYXJpdXMgS2l0dGxlciA8bWtpdHRsZXJAc3VzZS5kZT4KICAqLwog
Ci0vKgotICogTkFNRQotICoJaW9jdGwwMi5jCisvKlwKKyAqIFtEZXNjcmlwdGlvbl0KICAqCi0g
KiBERVNDUklQVElPTgogICoJVGVzdGNhc2UgdG8gdGVzdCB0aGUgVENHRVRBLCBhbmQgVENTRVRB
IGlvY3RsIGltcGxlbWVudGF0aW9ucyBmb3IKICAqCXRoZSB0dHkgZHJpdmVyCiAgKgotICogQUxH
T1JJVEhNCiAgKglJbiB0aGlzIHRlc3QsIHRoZSBwYXJlbnQgYW5kIGNoaWxkIG9wZW4gdGhlIHBh
cmVudHR5IGFuZCB0aGUgY2hpbGR0dHkKICAqCXJlc3BlY3RpdmVseS4gIEFmdGVyIG9wZW5pbmcg
dGhlIGNoaWxkdHR5IHRoZSBjaGlsZCBmbHVzaGVzIHRoZSBzdHJlYW0KLSAqCWFuZCBzZW5kcyBh
IFNJR1VTUjEgdG8gdGhlIHBhcmVudCAodGhlcmVieSBhc2tpbmcgaXQgdG8gY29udGludWUgaXRz
Ci0gKgl0ZXN0aW5nKS4gVGhlIHBhcmVudCwgd2hpY2ggd2FzIHdhaXRpbmcgZm9yIHRoaXMgc2ln
bmFsIHRvIGFycml2ZSwgbm93Ci0gKglzdGFydHMgdGhlIHRlc3RpbmcuIEl0IGlzc3VlcyBhIFRD
R0VUQSBpb2N0bCB0byBnZXQgYWxsIHRoZSB0dHkKLSAqCXBhcmFtZXRlcnMuIEl0IHRoZW4gY2hh
bmdlcyB0aGVtIHRvIGtub3duIHZhbHVlcyBieSBpc3N1aW5nIGEgVENTRVRBCi0gKglpb2N0bC4g
IFRoZW4gdGhlIHBhcmVudCBpc3N1ZXMgYSBUQ0dFVEEgaW9jdGwgYWdhaW4gYW5kIGNvbXBhcmVz
IHRoZQotICoJcmVjZWl2ZWQgdmFsdWVzIHdpdGggd2hhdCBpdCBoYWQgc2V0IGVhcmxpZXIuIFRo
ZSB0ZXN0IGZhaWxzIGlmIFRDR0VUQQotICoJb3IgVENTRVRBIGZhaWxzLCBvciBpZiB0aGUgcmVj
ZWl2ZWQgdmFsdWVzIGRvbid0IG1hdGNoIHRob3NlIHRoYXQgd2VyZQotICoJc2V0LiBUaGUgcGFy
ZW50IGRvZXMgYWxsIHRoZSB0ZXN0aW5nLCB0aGUgcmVxdWlyZW1lbnQgb2YgdGhlIGNoaWxkCi0g
Kglwcm9jZXNzIGlzIHRvIG1vbml0ZXIgdGhlIHRlc3RpbmcgZG9uZSBieSB0aGUgcGFyZW50LCBh
bmQgaGVuY2UgdGhlCi0gKgljaGlsZCBqdXN0IHdhaXRzIGZvciB0aGUgcGFyZW50LgotICoKLSAq
IFVTQUdFOiAgPGZvciBjb21tYW5kLWxpbmU+Ci0gKiAgaW9jdGwwMiAtRCAvZGV2L3R0eVswLTld
IFstYyBuXSBbLWZdIFstaSBuXSBbLUkgeF0gWy1QIHhdIFstdF0KLSAqICAgICB3aGVyZSwgIC1j
IG4gOiBSdW4gbiBjb3BpZXMgY29uY3VycmVudGx5LgotICogICAgICAgICAgICAgLWYgICA6IFR1
cm4gb2ZmIGZ1bmN0aW9uYWxpdHkgVGVzdGluZy4KLSAqICAgICAgICAgICAgIC1pIG4gOiBFeGVj
dXRlIHRlc3QgbiB0aW1lcy4KLSAqICAgICAgICAgICAgIC1JIHggOiBFeGVjdXRlIHRlc3QgZm9y
IHggc2Vjb25kcy4KLSAqICAgICAgICAgICAgIC1QIHggOiBQYXVzZSBmb3IgeCBzZWNvbmRzIGJl
dHdlZW4gaXRlcmF0aW9ucy4KLSAqICAgICAgICAgICAgIC10ICAgOiBUdXJuIG9uIHN5c2NhbGwg
dGltaW5nLgotICoKLSAqIEhJU1RPUlkKLSAqCTA3LzIwMDEgUG9ydGVkIGJ5IFdheW5lIEJveWVy
Ci0gKgotICogUkVTVFJJQ1RJT05TCi0gKgl0ZXN0IG11c3QgYmUgcnVuIHdpdGggdGhlIC1EIG9w
dGlvbgotICoJdGVzdCBtYXkgaGF2ZSB0byBiZSBydW4gYXMgcm9vdCBkZXBlbmRpbmcgb24gdGhl
IHR0eSBwZXJtaXNzaW9ucworICoJYW5kIHNlbmRzIGEgd2FrZXMgdGhlIHBhcmVudCAodGhlcmVi
eSBhc2tpbmcgaXQgdG8gY29udGludWUgaXRzCisgKgl0ZXN0aW5nKS4gVGhlIHBhcmVudCwgdGhl
biBzdGFydHMgdGhlIHRlc3RpbmcuIEl0IGlzc3VlcyBhIFRDR0VUQQorICoJaW9jdGwgdG8gZ2V0
IGFsbCB0aGUgdHR5IHBhcmFtZXRlcnMuIEl0IHRoZW4gY2hhbmdlcyB0aGVtIHRvIGtub3duCisg
Kgl2YWx1ZXMgYnkgaXNzdWluZyBhIFRDU0VUQSBpb2N0bC4gVGhlbiB0aGUgcGFyZW50IGlzc3Vl
cyBhIFRDR0VUQQorICoJaW9jdGwgYWdhaW4gYW5kIGNvbXBhcmVzIHRoZSByZWNlaXZlZCB2YWx1
ZXMgd2l0aCB3aGF0IGl0IGhhZCBzZXQKKyAqCWVhcmxpZXIuIFRoZSB0ZXN0IGZhaWxzIGlmIFRD
R0VUQSBvciBUQ1NFVEEgZmFpbHMsIG9yIGlmIHRoZSByZWNlaXZlZAorICoJdmFsdWVzIGRvbid0
IG1hdGNoIHRob3NlIHRoYXQgd2VyZSBzZXQuIFRoZSBwYXJlbnQgZG9lcyBhbGwgdGhlCisgKgl0
ZXN0aW5nLCB0aGUgcmVxdWlyZW1lbnQgb2YgdGhlIGNoaWxkIHByb2Nlc3MgaXMgdG8gbW9uaXRl
ciB0aGUKKyAqCXRlc3RpbmcgZG9uZSBieSB0aGUgcGFyZW50LCBhbmQgaGVuY2UgdGhlIGNoaWxk
IGp1c3Qgd2FpdHMgZm9yIHRoZQorICoJcGFyZW50LgogICovCiAKICNpbmNsdWRlIDxzdGRpby5o
PgogI2luY2x1ZGUgPGZjbnRsLmg+Ci0jaW5jbHVkZSA8c2lnbmFsLmg+CiAjaW5jbHVkZSA8ZXJy
bm8uaD4KICNpbmNsdWRlIDxzeXMvd2FpdC5oPgogI2luY2x1ZGUgPHN5cy90eXBlcy5oPgogI2lu
Y2x1ZGUgPHN5cy9zdGF0Lmg+CiAjaW5jbHVkZSA8dGVybWlvcy5oPgotI2luY2x1ZGUgInRlc3Qu
aCIKLSNpbmNsdWRlICJzYWZlX21hY3Jvcy5oIgotI2luY2x1ZGUgImxhcGkvaW9jdGwuaCIKLQot
I2RlZmluZQlDTlVMCTAKIAotY2hhciAqVENJRCA9ICJpb2N0bDAyIjsKLWludCBUU1RfVE9UQUwg
PSAxOworI2luY2x1ZGUgInRzdF9jaGVja3BvaW50LmgiCisjaW5jbHVkZSAidHN0X3Rlc3QuaCIK
KyNpbmNsdWRlICJ0c3Rfc2FmZV9tYWNyb3MuaCIKIAogc3RhdGljIHN0cnVjdCB0ZXJtaW8gdGVy
bWlvLCBzYXZlX2lvOwogCiBzdGF0aWMgY2hhciAqcGFyZW50dHR5LCAqY2hpbGR0dHk7Ci1zdGF0
aWMgaW50IHBhcmVudGZkLCBjaGlsZGZkOworc3RhdGljIGludCBwYXJlbnRmZCA9IC0xLCBjaGls
ZGZkID0gLTE7CiBzdGF0aWMgaW50IHBhcmVudHBpZCwgY2hpbGRwaWQ7Ci1zdGF0aWMgdm9sYXRp
bGUgaW50IHNpZ3Rlcm0sIHNpZ3VzcjEsIHNpZ3VzcjI7Ci1zdGF0aWMgaW50IGNsb3NlZCA9IDE7
CiAKIHN0YXRpYyBpbnQgZG9fY2hpbGRfc2V0dXAodm9pZCk7Ci1zdGF0aWMgaW50IGRvX3BhcmVu
dF9zZXR1cCh2b2lkKTsKIHN0YXRpYyBpbnQgcnVuX3B0ZXN0KHZvaWQpOwogc3RhdGljIGludCBy
dW5fY3Rlc3Qodm9pZCk7Ci1zdGF0aWMgaW50IGNoa190dHlfcGFybXMoKTsKK3N0YXRpYyBpbnQg
Y2hrX3R0eV9wYXJtcyh2b2lkKTsKIHN0YXRpYyB2b2lkIHNldHVwKHZvaWQpOwogc3RhdGljIHZv
aWQgY2xlYW51cCh2b2lkKTsKLXN0YXRpYyB2b2lkIGhlbHAodm9pZCk7CiBzdGF0aWMgdm9pZCBk
b19jaGlsZCh2b2lkKTsKLXZvaWQgZG9fY2hpbGRfdWNsaW51eCh2b2lkKTsKLXN0YXRpYyB2b2lk
IHNpZ3Rlcm1faGFuZGxlcih2b2lkKTsKIAotc3RhdGljIGludCBEZXZmbGFnOwotc3RhdGljIGNo
YXIgKmRldm5hbWU7CitzdGF0aWMgY2hhciAqZGV2aWNlOwogCi1zdGF0aWMgb3B0aW9uX3Qgb3B0
aW9uc1tdID0gewotCXsiRDoiLCAmRGV2ZmxhZywgJmRldm5hbWV9LAotCXtOVUxMLCBOVUxMLCBO
VUxMfQotfTsKK3N0YXRpYyBjb25zdCBpbnQgY2hlY2twb2ludF9jaGlsZF9yZWFkeSA9IDE7Citz
dGF0aWMgY29uc3QgaW50IGNoZWNrcG9pbnRfcGFyZW50X2RvbmVfdGVzdGluZyA9IDI7CiAKLWlu
dCBtYWluKGludCBhYywgY2hhciAqKmF2KQorc3RhdGljIHZvaWQgdmVyaWZ5X2lvY3RsKHZvaWQp
CiB7Ci0JaW50IGxjOwotCWludCBydmFsOwotCi0JdHN0X3BhcnNlX29wdHMoYWMsIGF2LCBvcHRp
b25zLCAmaGVscCk7Ci0KLSNpZmRlZiBVQ0xJTlVYCi0JbWF5YmVfcnVuX2NoaWxkKCZkb19jaGls
ZF91Y2xpbnV4LCAiZFMiLCAmcGFyZW50cGlkLCAmY2hpbGR0dHkpOwotI2VuZGlmCi0KLQlpZiAo
IURldmZsYWcpCi0JCXRzdF9icmttKFRCUk9LLCBOVUxMLCAiWW91IG11c3Qgc3BlY2lmeSBhIHR0
eSBkZXZpY2Ugd2l0aCAiCi0JCQkgInRoZSAtRCBvcHRpb24uIik7Ci0KLQl0c3RfcmVxdWlyZV9y
b290KCk7Ci0KLQlzZXR1cCgpOwotCi0JZm9yIChsYyA9IDA7IFRFU1RfTE9PUElORyhsYyk7IGxj
KyspIHsKKwlwYXJlbnR0dHkgPSBkZXZpY2U7CisJY2hpbGR0dHkgPSBkZXZpY2U7CiAKLQkJdHN0
X2NvdW50ID0gMDsKKwlwYXJlbnRwaWQgPSBnZXRwaWQoKTsKKwljaGlsZHBpZCA9IFNBRkVfRk9S
SygpOworCWlmIChjaGlsZHBpZCA9PSAwKQorCQlkb19jaGlsZCgpOwogCi0JCXBhcmVudHR0eSA9
IGRldm5hbWU7Ci0JCWNoaWxkdHR5ID0gZGV2bmFtZTsKLQotCQlwYXJlbnRwaWQgPSBnZXRwaWQo
KTsKLQotCQljaGlsZHBpZCA9IEZPUktfT1JfVkZPUksoKTsKLQkJaWYgKGNoaWxkcGlkIDwgMCkK
LQkJCXRzdF9icmttKFRCUk9LLCBjbGVhbnVwLCAiZm9yayBmYWlsZWQiKTsKLQotCQlpZiAoY2hp
bGRwaWQgPT0gMCkgewkvKiBjaGlsZCAqLwotI2lmZGVmIFVDTElOVVgKLQkJCWlmIChzZWxmX2V4
ZWMoYXZbMF0sICJkUyIsIHBhcmVudHBpZCwgY2hpbGR0dHkpIDwgMCkKLQkJCQl0c3RfYnJrbShU
QlJPSywgY2xlYW51cCwgInNlbGZfZXhlYyBmYWlsZWQiKTsKLSNlbHNlCi0JCQlkb19jaGlsZCgp
OwotI2VuZGlmCi0JCX0KKwlUU1RfQ0hFQ0tQT0lOVF9XQUlUMihjaGVja3BvaW50X2NoaWxkX3Jl
YWR5LCA1MDAwKTsKIAotCQl3aGlsZSAoIXNpZ3VzcjEpCi0JCQlzbGVlcCgxKTsKLQotCQlzaWd1
c3IxID0gMDsKLQotCQlwYXJlbnRmZCA9IGRvX3BhcmVudF9zZXR1cCgpOwotCQlpZiAocGFyZW50
ZmQgPCAwKSB7Ci0JCQlraWxsKGNoaWxkcGlkLCBTSUdURVJNKTsKLQkJCXdhaXRwaWQoY2hpbGRw
aWQsIE5VTEwsIDApOwotCQkJY2xlYW51cCgpOwotCQl9CisJcGFyZW50ZmQgPSBTQUZFX09QRU4o
cGFyZW50dHR5LCBPX1JEV1IsIDA3NzcpOworCS8qIGZsdXNoIHR0eSBxdWV1ZXMgdG8gcmVtb3Zl
IG9sZCBvdXRwdXQgKi8KKwlTQUZFX0lPQ1RMKHBhcmVudGZkLCBUQ0ZMU0gsIDIpOwogCi0JCS8q
IHJ1biB0aGUgcGFyZW50IHRlc3QgKi8KLQkJcnZhbCA9IHJ1bl9wdGVzdCgpOwotCQlpZiAocnZh
bCA9PSAtMSkgewotCQkJLyoKLQkJCSAqIFBhcmVudCBjYW5ub3Qgc2V0L2dldCBpb2N0bCBwYXJh
bWV0ZXJzLgotCQkJICogU0lHVEVSTSB0aGUgY2hpbGQgYW5kIGNsZWFudXAuCi0JCQkgKi8KLQkJ
CWtpbGwoY2hpbGRwaWQsIFNJR1RFUk0pOwotCQkJd2FpdHBpZChjaGlsZHBpZCwgTlVMTCwgMCk7
Ci0JCQljbGVhbnVwKCk7Ci0JCX0KKwkvKiBydW4gdGhlIHBhcmVudCB0ZXN0ICovCisJaW50IHJ2
YWwgPSBydW5fcHRlc3QoKTsKKwlpZiAocnZhbCAhPSAwKQorCQl0c3RfcmVzKFRGQUlMLCAiVENH
RVRBL1RDU0VUQSB0ZXN0cyBGQUlMRUQgd2l0aCAiCisJCQkJIiVkICVzIiwgcnZhbCwgcnZhbCA+
IDEgPyAiZXJyb3JzIiA6ICJlcnJvciIpOworCWVsc2UKKwkJdHN0X3JlcyhUUEFTUywgIlRDR0VU
QS9UQ1NFVEEgdGVzdHMgU1VDQ0VFREVEIik7CiAKLQkJaWYgKHJ2YWwgIT0gMCkKLQkJCXRzdF9y
ZXNtKFRGQUlMLCAiVENHRVRBL1RDU0VUQSB0ZXN0cyBGQUlMRUQgd2l0aCAiCi0JCQkJICIlZCAl
cyIsIHJ2YWwsIHJ2YWwgPiAxID8gImVycm9ycyIgOiAiZXJyb3IiKTsKLQkJZWxzZQotCQkJdHN0
X3Jlc20oVFBBU1MsICJUQ0dFVEEvVENTRVRBIHRlc3RzIFNVQ0NFRURFRCIpOwotCi0JCS8qIEZJ
WE1FOiBjaGVjayByZXR1cm4gY29kZXMuICovCi0JCSh2b2lkKWtpbGwoY2hpbGRwaWQsIFNJR1RF
Uk0pOwotCQkodm9pZCl3YWl0cGlkKGNoaWxkcGlkLCBOVUxMLCAwKTsKLQotCQkvKgotCQkgKiBD
bGVhbiB1cCB0aGluZ3MgZnJvbSB0aGUgcGFyZW50IGJ5IHJlc3RvcmluZyB0aGUKLQkJICogdHR5
IGRldmljZSBpbmZvcm1hdGlvbiB0aGF0IHdhcyBzYXZlZCBpbiBzZXR1cCgpCi0JCSAqIGFuZCBj
bG9zaW5nIHRoZSB0dHkgZmlsZSBkZXNjcmlwdG9yLgotCQkgKi8KLQkJaWYgKGlvY3RsKHBhcmVu
dGZkLCBUQ1NFVEEsICZzYXZlX2lvKSA9PSAtMSkKLQkJCXRzdF9yZXNtKFRJTkZPLCAiaW9jdGwg
cmVzdG9yZSBmYWlsZWQgaW4gbWFpbiIpOwotCQlTQUZFX0NMT1NFKGNsZWFudXAsIHBhcmVudGZk
KTsKLQotCQljbG9zZWQgPSAxOwotCX0KLQljbGVhbnVwKCk7CisJVFNUX0NIRUNLUE9JTlRfV0FL
RShjaGVja3BvaW50X3BhcmVudF9kb25lX3Rlc3RpbmcpOwogCi0JdHN0X2V4aXQoKTsKKwkvKgor
CSAqIENsZWFuIHVwIHRoaW5ncyBmcm9tIHRoZSBwYXJlbnQgYnkgcmVzdG9yaW5nIHRoZQorCSAq
IHR0eSBkZXZpY2UgaW5mb3JtYXRpb24gdGhhdCB3YXMgc2F2ZWQgaW4gc2V0dXAoKQorCSAqIGFu
ZCBjbG9zaW5nIHRoZSB0dHkgZmlsZSBkZXNjcmlwdG9yLgorCSAqLworCVNBRkVfSU9DVEwocGFy
ZW50ZmQsIFRDU0VUQSwgJnNhdmVfaW8pOworCVNBRkVfQ0xPU0UocGFyZW50ZmQpOwogfQogCiBz
dGF0aWMgdm9pZCBkb19jaGlsZCh2b2lkKQpAQCAtMjAxLDI4ICsxMDAsMTIgQEAgc3RhdGljIHZv
aWQgZG9fY2hpbGQodm9pZCkKIAlfZXhpdCgwKTsKIH0KIAotdm9pZCBkb19jaGlsZF91Y2xpbnV4
KHZvaWQpCi17Ci0Jc3RydWN0IHNpZ2FjdGlvbiBhY3Q7Ci0KLQkvKiBTZXQgdXAgdGhlIHNpZ25h
bCBoYW5kbGVycyBhZ2FpbiAqLwotCWFjdC5zYV9oYW5kbGVyID0gKHZvaWQgKilzaWd0ZXJtX2hh
bmRsZXI7Ci0JYWN0LnNhX2ZsYWdzID0gMDsKLQlzaWdlbXB0eXNldCgmYWN0LnNhX21hc2spOwot
CSh2b2lkKXNpZ2FjdGlvbihTSUdURVJNLCAmYWN0LCAwKTsKLQotCS8qIFJ1biB0aGUgbm9ybWFs
IGNoaWxkICovCi0JZG9fY2hpbGQoKTsKLX0KLQogLyoKICAqIHJ1bl9wdGVzdCgpIC0gc2V0dXAg
dGhlIHZhcmlvdXMgdGVybWlvIHN0cnVjdHVyZSB2YWx1ZXMgYW5kIGlzc3VlCiAgKgkJIHRoZSBU
Q1NFVEEgaW9jdGwgY2FsbCB3aXRoIHRoZSBURVNUIG1hY3JvLgogICovCiBzdGF0aWMgaW50IHJ1
bl9wdGVzdCh2b2lkKQogewotCWludCBpLCBydmFsOwotCiAJLyogVXNlICJvbGQiIGxpbmUgZGlz
Y2lwbGluZSAqLwogCXRlcm1pby5jX2xpbmUgPSAwOwogCkBAIC0yMzAsNyArMTEzLDcgQEAgc3Rh
dGljIGludCBydW5fcHRlc3Qodm9pZCkKIAl0ZXJtaW8uY19jZmxhZyA9IEI1MCB8IENTNyB8IENS
RUFEIHwgUEFSRU5CIHwgUEFST0REIHwgQ0xPQ0FMOwogCiAJLyogU2V0IGNvbnRyb2wgY2hhcnMu
ICovCi0JZm9yIChpID0gMDsgaSA8IE5DQzsgaSsrKSB7CisJZm9yIChpbnQgaSA9IDA7IGkgPCBO
Q0M7IGkrKykgewogCQlpZiAoaSA9PSBWRU9MMikKIAkJCWNvbnRpbnVlOwogCQl0ZXJtaW8uY19j
Y1tpXSA9IENTVEFSVDsKQEAgLTI0OCwzOCArMTMxLDE4IEBAIHN0YXRpYyBpbnQgcnVuX3B0ZXN0
KHZvaWQpCiAJLyogU2V0IG91dHB1dCBtb2Rlcy4gKi8KIAl0ZXJtaW8uY19vZmxhZyA9IE9QT1NU
IHwgT0xDVUMgfCBPTkxDUiB8IE9OT0NSOwogCi0JVEVTVChpb2N0bChwYXJlbnRmZCwgVENTRVRB
LCAmdGVybWlvKSk7Ci0KLQlpZiAoVEVTVF9SRVRVUk4gPCAwKSB7Ci0JCXRzdF9yZXNtKFRGQUlM
LCAiaW9jdGwgVENTRVRBIGZhaWxlZCA6ICIKLQkJCSAiZXJybm8gPSAlZCIsIFRFU1RfRVJSTk8p
OwotCQlyZXR1cm4gLTE7Ci0JfQorCVNBRkVfSU9DVEwocGFyZW50ZmQsIFRDU0VUQSwgJnRlcm1p
byk7CiAKIAkvKiBHZXQgdGVybWlvIGFuZCBzZWUgaWYgYWxsIHBhcmFtZXRlcnMgYWN0dWFsbHkg
Z290IHNldCAqLwotCXJ2YWwgPSBpb2N0bChwYXJlbnRmZCwgVENHRVRBLCAmdGVybWlvKTsKLQlp
ZiAocnZhbCA8IDApIHsKLQkJdHN0X3Jlc20oVEZBSUwsICJpb2N0bCBUQ0dFVEEgZmFpbGVkLiAg
RW5kaW5nIHRlc3QuIik7Ci0JCXJldHVybiAtMTsKLQl9Ci0KKwlTQUZFX0lPQ1RMKHBhcmVudGZk
LCBUQ0dFVEEsICZ0ZXJtaW8pOwogCXJldHVybiBjaGtfdHR5X3Bhcm1zKCk7CiB9CiAKIHN0YXRp
YyBpbnQgcnVuX2N0ZXN0KHZvaWQpCiB7Ci0JLyoKLQkgKiBXYWl0IHRpbGwgdGhlIHBhcmVudCBo
YXMgZmluaXNoZWQgdGVzdGluZy4KLQkgKi8KLQl3aGlsZSAoIXNpZ3Rlcm0pCi0JCXNsZWVwKDEp
OwotCi0Jc2lndGVybSA9IDA7Ci0KLQl0c3RfcmVzbShUSU5GTywgImNoaWxkOiBHb3QgU0lHVEVS
TSBmcm9tIHBhcmVudC4iKTsKLQotCWlmIChjbG9zZShjaGlsZGZkKSA9PSAtMSkKLQkJdHN0X3Jl
c20oVElORk8sICJjbG9zZSgpIGluIHJ1bl9jdGVzdCgpIGZhaWxlZCIpOworCVRTVF9DSEVDS1BP
SU5UX1dBSVQoY2hlY2twb2ludF9wYXJlbnRfZG9uZV90ZXN0aW5nKTsKKwl0c3RfcmVzKFRJTkZP
LCAiY2hpbGQ6IHBhcmVudCBoYXMgZmluaXNoZWQgdGVzdGluZyIpOworCVNBRkVfQ0xPU0UoY2hp
bGRmZCk7CiAJcmV0dXJuIDA7CiB9CiAKQEAgLTI4OCw3ICsxNTEsNyBAQCBzdGF0aWMgaW50IGNo
a190dHlfcGFybXModm9pZCkKIAlpbnQgaSwgZmxhZyA9IDA7CiAKIAlpZiAodGVybWlvLmNfbGlu
ZSAhPSAwKSB7Ci0JCXRzdF9yZXNtKFRJTkZPLCAibGluZSBkaXNjaXBsaW5lIGhhcyBpbmNvcnJl
Y3QgdmFsdWUgJW8iLAorCQl0c3RfcmVzKFRJTkZPLCAibGluZSBkaXNjaXBsaW5lIGhhcyBpbmNv
cnJlY3QgdmFsdWUgJW8iLAogCQkJIHRlcm1pby5jX2xpbmUpOwogCQlmbGFnKys7CiAJfQpAQCAt
MzAxLDcgKzE2NCw3IEBAIHN0YXRpYyBpbnQgY2hrX3R0eV9wYXJtcyh2b2lkKQogCSAqLwogI2lm
IDAKIAlpZiAodGVybWlvLmNfY2ZsYWcgIT0gKEI1MCB8IENTNyB8IENSRUFEIHwgUEFSRU5CIHwg
UEFST0REIHwgQ0xPQ0FMKSkgewotCQl0c3RfcmVzbShUSU5GTywgImNmbGFnIGhhcyBpbmNvcnJl
Y3QgdmFsdWUuICVvIiwKKwkJdHN0X3JlcyhUSU5GTywgImNmbGFnIGhhcyBpbmNvcnJlY3QgdmFs
dWUuICVvIiwKIAkJCSB0ZXJtaW8uY19jZmxhZyk7CiAJCWZsYWcrKzsKIAl9CkBAIC0zMDksMTkg
KzE3MiwxOCBAQCBzdGF0aWMgaW50IGNoa190dHlfcGFybXModm9pZCkKIAogCWZvciAoaSA9IDA7
IGkgPCBOQ0M7IGkrKykgewogCQlpZiAoaSA9PSBWRU9MMikgewotCQkJaWYgKHRlcm1pby5jX2Nj
W1ZFT0wyXSA9PSBDTlVMKSB7CisJCQlpZiAoIXRlcm1pby5jX2NjW2ldKSB7CiAJCQkJY29udGlu
dWU7CiAJCQl9IGVsc2UgewotCQkJCXRzdF9yZXNtKFRJTkZPLCAiY29udHJvbCBjaGFyICVkIGhh
cyAiCi0JCQkJCSAiaW5jb3JyZWN0IHZhbHVlICVkICVkIiwgaSwKLQkJCQkJIHRlcm1pby5jX2Nj
W2ldLCBDTlVMKTsKKwkJCQl0c3RfcmVzKFRJTkZPLCAiY29udHJvbCBjaGFyICVkIGhhcyAiCisJ
CQkJCSAiaW5jb3JyZWN0IHZhbHVlICVkIiwgaSwgdGVybWlvLmNfY2NbaV0pOwogCQkJCWZsYWcr
KzsKIAkJCQljb250aW51ZTsKIAkJCX0KIAkJfQogCiAJCWlmICh0ZXJtaW8uY19jY1tpXSAhPSBD
U1RBUlQpIHsKLQkJCXRzdF9yZXNtKFRJTkZPLCAiY29udHJvbCBjaGFyICVkIGhhcyBpbmNvcnJl
Y3QgIgorCQkJdHN0X3JlcyhUSU5GTywgImNvbnRyb2wgY2hhciAlZCBoYXMgaW5jb3JyZWN0ICIK
IAkJCQkgInZhbHVlICVkLiIsIGksIHRlcm1pby5jX2NjW2ldKTsKIAkJCWZsYWcrKzsKIAkJfQpA
QCAtMzMwLDcgKzE5Miw3IEBAIHN0YXRpYyBpbnQgY2hrX3R0eV9wYXJtcyh2b2lkKQogCWlmICgh
CiAJICAgICh0ZXJtaW8uY19sZmxhZwogCSAgICAgJiYgKElTSUcgfCBJQ0FOT04gfCBYQ0FTRSB8
IEVDSE8gfCBFQ0hPRSB8IE5PRkxTSCkpKSB7Ci0JCXRzdF9yZXNtKFRJTkZPLCAibGZsYWcgaGFz
IGluY29ycmVjdCB2YWx1ZS4gJW8iLAorCQl0c3RfcmVzKFRJTkZPLCAibGZsYWcgaGFzIGluY29y
cmVjdCB2YWx1ZS4gJW8iLAogCQkJIHRlcm1pby5jX2xmbGFnKTsKIAkJZmxhZysrOwogCX0KQEAg
LTMzOSwxMzAgKzIwMSw2NSBAQCBzdGF0aWMgaW50IGNoa190dHlfcGFybXModm9pZCkKIAkgICAg
KHRlcm1pby5jX2lmbGFnCiAJICAgICAmJiAoQlJLSU5UIHwgSUdOUEFSIHwgSU5QQ0sgfCBJU1RS
SVAgfCBJQ1JOTCB8IElVQ0xDIHwgSVhPTiB8IElYQU5ZCiAJCSB8IElYT0ZGKSkpIHsKLQkJdHN0
X3Jlc20oVElORk8sICJpZmxhZyBoYXMgaW5jb3JyZWN0IHZhbHVlLiAlbyIsCisJCXRzdF9yZXMo
VElORk8sICJpZmxhZyBoYXMgaW5jb3JyZWN0IHZhbHVlLiAlbyIsCiAJCQkgdGVybWlvLmNfaWZs
YWcpOwogCQlmbGFnKys7CiAJfQogCiAJaWYgKCEodGVybWlvLmNfb2ZsYWcgJiYgKE9QT1NUIHwg
T0xDVUMgfCBPTkxDUiB8IE9OT0NSKSkpIHsKLQkJdHN0X3Jlc20oVElORk8sICJvZmxhZyBoYXMg
aW5jb3JyZWN0IHZhbHVlLiAlbyIsCisJCXRzdF9yZXMoVElORk8sICJvZmxhZyBoYXMgaW5jb3Jy
ZWN0IHZhbHVlLiAlbyIsCiAJCQkgdGVybWlvLmNfb2ZsYWcpOwogCQlmbGFnKys7CiAJfQogCiAJ
aWYgKCFmbGFnKQotCQl0c3RfcmVzbShUSU5GTywgInRlcm1pbyB2YWx1ZXMgYXJlIHNldCBhcyBl
eHBlY3RlZCIpOworCQl0c3RfcmVzKFRJTkZPLCAidGVybWlvIHZhbHVlcyBhcmUgc2V0IGFzIGV4
cGVjdGVkIik7CiAKIAlyZXR1cm4gZmxhZzsKIH0KIAotc3RhdGljIGludCBkb19wYXJlbnRfc2V0
dXAodm9pZCkKLXsKLQlpbnQgcGZkOwotCi0JcGZkID0gU0FGRV9PUEVOKGNsZWFudXAsIHBhcmVu
dHR0eSwgT19SRFdSLCAwNzc3KTsKLQotCS8qIHVuc2V0IHRoZSBjbG9zZWQgZmxhZyAqLwotCWNs
b3NlZCA9IDA7Ci0KLQkvKiBmbHVzaCB0dHkgcXVldWVzIHRvIHJlbW92ZSBvbGQgb3V0cHV0ICov
Ci0JU0FGRV9JT0NUTChjbGVhbnVwLCBwZmQsIFRDRkxTSCwgMik7Ci0JcmV0dXJuIHBmZDsKLX0K
LQogc3RhdGljIGludCBkb19jaGlsZF9zZXR1cCh2b2lkKQogewotCWludCBjZmQ7Ci0KLQljZmQg
PSBvcGVuKGNoaWxkdHR5LCBPX1JEV1IsIDA3NzcpOwotCWlmIChjZmQgPCAwKSB7Ci0JCXRzdF9y
ZXNtKFRJTkZPLCAiQ291bGQgbm90IG9wZW4gJXMgaW4gZG9fY2hpbGRfc2V0dXAoKSwgZXJybm8g
IgotCQkJICI9ICVkIiwgY2hpbGR0dHksIGVycm5vKTsKLQkJLyogc2lnbmFsIHRoZSBwYXJlbnQg
c28gd2UgZG9uJ3QgaGFuZyB0aGUgdGVzdCAqLwotCQlraWxsKHBhcmVudHBpZCwgU0lHVVNSMSk7
Ci0JCXJldHVybiAtMTsKLQl9CisJaW50IGNmZCA9IFNBRkVfT1BFTihjaGlsZHR0eSwgT19SRFdS
LCAwNzc3KTsKIAogCS8qIGZsdXNoIHR0eSBxdWV1ZXMgdG8gcmVtb3ZlIG9sZCBvdXRwdXQgKi8K
LQlpZiAoaW9jdGwoY2ZkLCBUQ0ZMU0gsIDIpIDwgMCkgewotCQl0c3RfcmVzbShUSU5GTywgImlv
Y3RsIFRDRkxTSCBmYWlsZWQuIDogZXJybm8gPSAlZCIsIGVycm5vKTsKLQkJLyogc2lnbmFsIHRo
ZSBwYXJlbnQgc28gd2UgZG9uJ3QgaGFuZyB0aGUgdGVzdCAqLwotCQlraWxsKHBhcmVudHBpZCwg
U0lHVVNSMSk7Ci0JCXJldHVybiAtMTsKLQl9CisJU0FGRV9JT0NUTChjZmQsIFRDRkxTSCwgMik7
CiAKIAkvKiB0ZWxsIHRoZSBwYXJlbnQgdGhhdCB3ZSdyZSBkb25lICovCi0Ja2lsbChwYXJlbnRw
aWQsIFNJR1VTUjEpOwotCisJVFNUX0NIRUNLUE9JTlRfV0FLRShjaGVja3BvaW50X2NoaWxkX3Jl
YWR5KTsKIAlyZXR1cm4gY2ZkOwogfQogCi0vKgotICogRGVmaW5lIHRoZSBzaWduYWxzIGhhbmRs
ZXJzIGhlcmUuCi0gKi8KLXN0YXRpYyB2b2lkIHNpZ3Rlcm1faGFuZGxlcih2b2lkKQotewotCXNp
Z3Rlcm0gPSAxOwotfQotCi1zdGF0aWMgdm9pZCBzaWd1c3IxX2hhbmRsZXIodm9pZCkKLXsKLQlz
aWd1c3IxID0gMTsKLX0KLQotc3RhdGljIHZvaWQgc2lndXNyMl9oYW5kbGVyKHZvaWQpCi17Ci0J
c2lndXNyMiA9IDE7Ci19Ci0KLXN0YXRpYyB2b2lkIGhlbHAodm9pZCkKLXsKLQlwcmludGYoIiAg
LUQgPHR0eSBkZXZpY2U+IDogZm9yIGV4YW1wbGUsIC9kZXYvdHR5WzAtOV1cbiIpOwotfQotCiBz
dGF0aWMgdm9pZCBzZXR1cCh2b2lkKQogewotCWludCBmZDsKLQlzdHJ1Y3Qgc2lnYWN0aW9uIGFj
dDsKKwlpZiAoIWRldmljZSkKKwkJdHN0X2JyayhUQlJPSywgIllvdSBtdXN0IHNwZWNpZnkgYSB0
dHkgZGV2aWNlIHdpdGggLUQgb3B0aW9uIik7CiAKIAkvKiBYWFg6IFRFUlJOTyByZXF1aXJlZCBh
bGwgb3ZlciB0aGUgcGxhY2UgKi8KLQlmZCA9IFNBRkVfT1BFTihOVUxMLCBkZXZuYW1lLCBPX1JE
V1IsIDA3NzcpOworCWludCBmZCA9IFNBRkVfT1BFTihkZXZpY2UsIE9fUkRXUiwgMDc3Nyk7CiAK
IAkvKiBTYXZlIHRoZSBjdXJyZW50IGRldmljZSBpbmZvcm1hdGlvbiAtIHRvIGJlIHJlc3RvcmVk
IGluIGNsZWFudXAoKSAqLwotCVNBRkVfSU9DVEwoY2xlYW51cCwgZmQsIFRDR0VUQSwgJnNhdmVf
aW8pOworCVNBRkVfSU9DVEwoZmQsIFRDR0VUQSwgJnNhdmVfaW8pOwogCiAJLyogQ2xvc2UgdGhl
IGRldmljZSAqLwotCVNBRkVfQ0xPU0UoY2xlYW51cCwgZmQpOwotCi0JLyogU2V0IHVwIHRoZSBz
aWduYWwgaGFuZGxlcnMgKi8KLQlhY3Quc2FfaGFuZGxlciA9ICh2b2lkICopc2lndGVybV9oYW5k
bGVyOwotCWFjdC5zYV9mbGFncyA9IDA7Ci0Jc2lnZW1wdHlzZXQoJmFjdC5zYV9tYXNrKTsKLQko
dm9pZClzaWdhY3Rpb24oU0lHVEVSTSwgJmFjdCwgMCk7Ci0KLQlhY3Quc2FfaGFuZGxlciA9ICh2
b2lkICopc2lndXNyMV9oYW5kbGVyOwotCWFjdC5zYV9mbGFncyA9IDA7Ci0JKHZvaWQpc2lnYWN0
aW9uKFNJR1VTUjEsICZhY3QsIDApOwotCi0JYWN0LnNhX2hhbmRsZXIgPSAodm9pZCAqKXNpZ3Vz
cjJfaGFuZGxlcjsKLQlhY3Quc2FfZmxhZ3MgPSAwOwotCSh2b2lkKXNpZ2FjdGlvbihTSUdVU1Iy
LCAmYWN0LCAwKTsKLQotCWFjdC5zYV9oYW5kbGVyID0gU0lHX0lHTjsKLQlhY3Quc2FfZmxhZ3Mg
PSAwOwotCSh2b2lkKXNpZ2FjdGlvbihTSUdUVE9VLCAmYWN0LCAwKTsKLQotCXNpZ3Rlcm0gPSBz
aWd1c3IxID0gc2lndXNyMiA9IDA7Ci0KLQlURVNUX1BBVVNFOworCVNBRkVfQ0xPU0UoZmQpOwog
fQogCiBzdGF0aWMgdm9pZCBjbGVhbnVwKHZvaWQpCiB7Ci0JaWYgKCFjbG9zZWQpIHsKLQkJaWYg
KGlvY3RsKHBhcmVudGZkLCBUQ1NFVEEsICZzYXZlX2lvKSA9PSAtMSkKLQkJCXRzdF9yZXNtKFRJ
TkZPLCAiaW9jdGwgcmVzdG9yZSBmYWlsZWQgaW4gY2xlYW51cCgpIik7Ci0JCWlmIChjbG9zZShw
YXJlbnRmZCkgPT0gLTEpCi0JCQl0c3RfcmVzbShUSU5GTywgImNsb3NlKCkgZmFpbGVkIGluIGNs
ZWFudXAoKSIpOwotCX0KKwlpZiAocGFyZW50ZmQgPj0gMCkKKwkJU0FGRV9JT0NUTChwYXJlbnRm
ZCwgVENTRVRBLCAmc2F2ZV9pbyk7CiB9CisKK3N0YXRpYyBzdHJ1Y3QgdHN0X3Rlc3QgdGVzdCA9
IHsKKwkubmVlZHNfcm9vdCA9IDEsCisJLm5lZWRzX2NoZWNrcG9pbnRzID0gMSwKKwkuZm9ya3Nf
Y2hpbGQgPSAxLAorCS5zZXR1cCA9IHNldHVwLAorCS5jbGVhbnVwID0gY2xlYW51cCwKKwkudGVz
dF9hbGwgPSB2ZXJpZnlfaW9jdGwsCisJLm9wdGlvbnMgPSAoc3RydWN0IHRzdF9vcHRpb25bXSkg
eworCQl7IkQ6IiwgJmRldmljZSwgIlR0eSBkZXZpY2UuIEZvciBleGFtcGxlLCAvZGV2L3R0eVsw
LTldIn0sCisJCXt9CisJfQorfTsKXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCi0tIAoyLjQy
LjAKCgotLSAKTWFpbGluZyBsaXN0IGluZm86IGh0dHBzOi8vbGlzdHMubGludXguaXQvbGlzdGlu
Zm8vbHRwCg==
