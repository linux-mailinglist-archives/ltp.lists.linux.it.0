Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [213.254.12.146])
	by mail.lfdr.de (Postfix) with ESMTPS id ECC792DBE29
	for <lists+linux-ltp@lfdr.de>; Wed, 16 Dec 2020 11:02:45 +0100 (CET)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id B4A053C57D9
	for <lists+linux-ltp@lfdr.de>; Wed, 16 Dec 2020 11:02:45 +0100 (CET)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-3.smtp.seeweb.it (in-3.smtp.seeweb.it [217.194.8.3])
 by picard.linux.it (Postfix) with ESMTP id CE7943C57DE
 for <ltp@lists.linux.it>; Wed, 16 Dec 2020 11:02:05 +0100 (CET)
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by in-3.smtp.seeweb.it (Postfix) with ESMTPS id C667B1A00FA6
 for <ltp@lists.linux.it>; Wed, 16 Dec 2020 11:02:03 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
 t=1608112923; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=Hl5Bs1Bw+v8AEmfJvEWpJMzcZSJbZaLsUS/O7RNLmY4=;
 b=FK7Mr495I04NPDnzuOqPT0Zy1/wu5T8q22WyiJsPMn61xkM+nOitMmP+gYl8PMIogbOJ5E
 sBQubpN9borADfj5DfZ9lmPo8Y7Xg48Wsr8ZxQAKNEOrx+a+pKf8942F+Tl3N9owazUZB+
 4qxObLHIwn1eGPD6b1o2K/pnpeL5OGg=
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 2B64AAE87;
 Wed, 16 Dec 2020 10:02:03 +0000 (UTC)
To: ltp@lists.linux.it
Date: Wed, 16 Dec 2020 10:01:18 +0000
Message-Id: <20201216100121.16683-3-rpalethorpe@suse.com>
X-Mailer: git-send-email 2.29.2
In-Reply-To: <20201216100121.16683-1-rpalethorpe@suse.com>
References: <20201216100121.16683-1-rpalethorpe@suse.com>
MIME-Version: 1.0
X-Virus-Scanned: clamav-milter 0.102.4 at in-3.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=0.1 required=7.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,DKIM_VALID_EF,SPF_HELO_NONE,SPF_PASS autolearn=disabled
 version=3.4.4
X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on in-3.smtp.seeweb.it
Subject: [LTP] [RFC PATCH 2/5] CGroup API rewrite
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
From: Richard Palethorpe via ltp <ltp@lists.linux.it>
Reply-To: Richard Palethorpe <rpalethorpe@suse.com>
Cc: Richard Palethorpe <rpalethorpe@suse.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

VGhpcyBidWlsZHMgb24gdGhlIHdvcmsgZG9uZSBieSBMaSBXYW5nLCBidXQgd2l0aCBtYW55IGFk
ZGl0aW9ucyBhbmQKY2hhbmdlcy4gSW5zdGVhZCBvZiBhbHdheXMgY3JlYXRpbmcgYSBuZXcgQ0dy
b3VwIG1vdW50LCBpdCBzY2FucyB0aGUKY3VycmVudCBDR3JvdXAgY29uZmlndXJhdGlvbiBhbmQg
dHJpZXMgdG8gdXNlIHdoYXQgaXMgcHJlc2VudGx5CmF2YWlsYWJsZS4KClRoaXMgaXMgYmVjYXVz
ZSByZW1vdW50aW5nIGEgQ0dyb3VwIHJlYmluZHMgYW4gZXhpc3RpbmcgQ0dyb3VwIHJvb3QgdG8K
YSBuZXcgbW91bnQgcG9pbnQuIElmIGFueSBvZiB0aGUgbW91bnQgb3B0aW9ucyBhcmUgZGlmZmVy
ZW50IGZyb20gdGhlCmN1cnJlbnQgbW91bnQgdGhlbiB0aGUgb3BlcmF0aW9uIHdpbGwgZmFpbC4g
TW9zdCBzZXR1cHMgYWxyZWFkeSBoYXZlCkNHcm91cHMgbW91bnRlZCwgYnV0IHRoZSBDR3JvdXAg
Y29uZmlndXJhdGlvbnMgdmFyeSBhIGxvdC4KClNvIHdlIGhhdmUgYSBjaG9pY2Ugb2Y6CgpBKSBF
eHBlY3QgYSBwYXJ0aWN1bGFyIGNvbmZpZ3VyYXRpb24gYW5kIHJlZnVzZSB0byBydW4KICAgb3Ro
ZXJ3aXNlCkIpIEV4cGVjdCBubyBDR3JvdXBzIGFuZCBtb3VudCB0aGVtCkMpIFRyeSB0byB1c2Ug
d2hhdCBpcyBhdmFpbGFibGUKRCkgKEMpIGFuZCB0cnkgdG8gbW91bnQgdGhlbSBpZiBub3RoaW5n
IGlzIHByZXNlbnQKRSkgKEMpLCAoRCkgYW5kIHRyeSB0byBjbGVhbnVwIHdoYXQgd2UgY3JlYXRl
ZAoKKEEpIGFuZCAoQikgYXJlIG1vcmUgc2ltcGxlIGZvciB0aGUgTFRQIGxpYnJhcnksIGJ1dCBy
ZXF1aXJlIG91ciB1c2Vycwp0byBkbyBtb3JlIHdvcmssIHBlcmhhcHMgYSBsb3QgbW9yZS4gRGVw
ZW5kaW5nIG9uIHRoZSB0ZXN0CmVudmlyb25tZW50OyBkaXNhYmxpbmcgb3IgcmVjb25maWd1cmlu
ZyBDR3JvdXBzIG1heSBiZQpkaWZmaWN1bHQuIEJlY2F1c2UgbWFueSB0ZXN0cyByZXF1aXJlIENH
cm91cHMgdG8gZXhwb3NlIGEgYnVnIGluIG90aGVyCnN1YnN5c3RlbXMgKGUuZy4gdGhlIG1lbW9y
eSBzdWJzeXN0ZW0pLCBJIGRvIG5vdCB0aGluayAoQSkgYW5kIChCKSBhcmUKdmlhYmxlIG9wdGlv
bnMuIFRoZXkgbWF5IGJlIGFjY2VwdGFibGUgZm9yIHRlc3RpbmcgY29yZSBDR3JvdXAKZmVhdHVy
ZXMgd2hlcmUgYSBwcmlzdGluZSBzeXN0ZW0gaXMgcmVxdWlyZWQgKGUuZy4gZmlyc3QgbW91bnQp
LCBidXQKdGhhdCBpcyBub3QgdGhlIGN1cnJlbnQgZm9jdXMgb2YgdGhlc2UgY2hhbmdlcy4KCihD
KSBpcyBwcm9iYWJseSB0aGUgc2ltcGxlc3QgdmlhYmxlIG9wdGlvbiwgYnV0IHRoaXMgdHJpZXMg
dG8KaW1wbGVtZW50IChFKS4gTW91bnRpbmcgdGhlIENHcm91cHMgaWYgbm9uZSBhcmUgYXZhaWxh
YmxlIHNpbXBsaWZpZXMKdGVzdGluZyB3aXRoaW4gZW52aXJvbm1lbnRzIGxpa2UgUmFwaWRvIHdo
ZXJlIHRlc3RpbmcgaXMgZG9uZSBpbiB0aGUKcmVjb3ZlcnkgY29uc29sZSBhbmQgbm8gQ0dyb3Vw
cyBhcmUgbW91bnRlZCBieSB0aGUgc3lzdGVtIG1hbmFnZXIuIE9uCnRoZSBvdGhlciBoYW5kIGl0
IGlzIHF1aXRlIHNpbXBsZSBmb3IgdGhlIHVzZXIgdG8gbW91bnQgc29tZSBDR3JvdXBzLgoKTW91
bnRpbmcgaXMgcmVsYXRpdmVseSBzaW1wbGUgc28gZG9lcyBub3QgYWRkIG11Y2ggY29tcGxleGl0
eSwgaG93ZXZlcgpjbGVhbmluZyB1cCB0aGUgbW91bnRzIGlzIGJyb2tlbiBzbyBwb3NzaWJseSB3
ZSBzaG91bGQgb25seQphdHRlbXB0IChDKSBvciAoRCkuIEl0IGFwcGVhcnMgdGhhdCB0aGUgdGVz
dCBwcm9jZXNzIGhhcyBzb21lIHJlZmVyZW5jZXMgdG8KdGhlIG1vdW50IHN0cnVjdCBhbmQgc28g
aXQgY2FuIG5vdCBiZSByZW1vdmVkIGJ5IHRoZSB0ZXN0LCBidXQgSSBhbQpwYXJ0bHkgZ3Vlc3Np
bmcuIFVzaW5nIE1OVF9ERVRBQ0ggYXQgbGVhc3QgYWxsb3dzIHRoZSBkaXJlY3RvcnkgdG8gYmUK
cmVtb3ZlZCwgYnV0IGl0J3Mgbm90IGNsZWFyIGlmIHRoZSByb290IGlzIGV2ZW50dWFsbHkgZGVz
dHJveWVkLiBJdAphcHBlYXJzIHRoYXQgYSBzZXBhcmF0ZSBwcm9jZXNzIChpLmUuIHRoZSB1bW91
bnQgY29tbWFuZCkgY2FuIHByb3Blcmx5CnJlbW92ZSB0aGUgbW91bnQgYW5kIHRoZSBDR3JvdXAg
aXMgZGVzdHJveWVkLCBidXQgdGhpcyBpcyBzdGlsbCBub3QKZnVsbHkgY2xlYXIgd2l0aG91dCBt
b3JlIHRyYWNpbmcuCgpUbyBhbGxvdyB0ZXN0cyB0byBiZSBydW4gaW4gcGFyYWxsZWwgdGhpcyBh
bHNvIGNyZWF0ZXMgYSBuZXcgbGVhZgpDR3JvdXAgZm9yIGVhY2ggdGVzdC4gVGhlc2UgYXJlIGNv
bGxlY3RlZCB1bmRlciB0aGUgTFRQIHRydW5rIENHcm91cAp3aGljaCBhbHNvIGNvbnRhaW5zIGEg
ZHJhaW4gbGVhZiBDR3JvdXAuIFRoZSBsaWJyYXJ5IHdpbGwgY3JlYXRlIHRoZQpMVFAgQ0dyb3Vw
IGlmIGl0IGlzIG5vdCBwcmVzZW50LCBidXQgYWxzbyB0aGUgdXNlciBjYW4gcHJlLWNyZWF0ZSBp
dAphbmQgZ3JhbnQgd3JpdGUgYWNjZXNzIHRvIG5vbi1yb290IHVzZXJzLiBUaGlzIHdheSB0ZXN0
cyB3aGljaCByZXF1aXJlCkNHcm91cHMgZG8gbm90IGF1dG9tYXRpY2FsbHkgcmVxdWlyZSBhZG1p
biBwcml2aWxlZ2VzLiBQbGVhc2Ugc2VlIHRoZQpjb21tZW50cyB3aXRoaW4gdGhlIGNvZGUgZm9y
IG1vcmUgaW5mby4KClRoaXMgZG9lcyBub3QgY29udGFpbiBhIGRlY2xhcmF0aXZlIGludGVyZmFj
ZSBmb3IgdGVzdHMgdG8gc3BlY2lmeQpDR3JvdXAgb3B0aW9ucywgbGlrZSBmb3IgZS5nLgoKc3Ry
dWN0IHRzdF90ZXN0XyB0ZXN0ID0gewogICAgICAgLmNncm91cHMgPSB7CiAgICAgICAJCXsgU0VU
LCAibWVtb3J5Lm1heCIsICIxMDAwMCIgfQoJCXsgU0VULCAiY3B1c2V0LmZvbyIsICJiYXIiIH0K
CQl7IE1PVkVfQ1VSUkVOVCwgTlVMTCwgTlVMTCB9Cgl9LAoJLi4uCn07CgpIb3dldmVyIHNvbWV0
aGluZyBsaWtlIHRoaXMgc2hvdWxkIGJlIGVhc3kgdG8gYWRkIG9uY2UgZW5vdWdoIHRlc3RzCmhh
dmUgYmVlbiBjb252ZXJ0ZWQgdG8gdGhlIG5ldyBBUEkuCi0tLQogaW5jbHVkZS90c3RfY2dyb3Vw
LmggfCAxMDMgKysrKy0KIGxpYi90c3RfY2dyb3VwLmMgICAgIHwgOTYwICsrKysrKysrKysrKysr
KysrKysrKysrKysrKystLS0tLS0tLS0tLS0tLS0KIDIgZmlsZXMgY2hhbmdlZCwgNzAxIGluc2Vy
dGlvbnMoKyksIDM2MiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9pbmNsdWRlL3RzdF9jZ3Jv
dXAuaCBiL2luY2x1ZGUvdHN0X2Nncm91cC5oCmluZGV4IGJmZDg0ODI2MC4uNGMzZWI0ODNhIDEw
MDY0NAotLS0gYS9pbmNsdWRlL3RzdF9jZ3JvdXAuaAorKysgYi9pbmNsdWRlL3RzdF9jZ3JvdXAu
aApAQCAtMiw0NiArMiwxMDUgQEAKIC8qCiAgKiBDb3B5cmlnaHQgKGMpIDIwMjAgUmVkIEhhdCwg
SW5jLgogICogQ29weXJpZ2h0IChjKSAyMDIwIExpIFdhbmcgPGxpd2FuZ0ByZWRoYXQuY29tPgor
ICogQ29weXJpZ2h0IChjKSAyMDIwIFJpY2hhcmQgUGFsZXRob3JwZSA8cnBhbGV0aG9ycGVAc3Vz
ZS5jb20+CiAgKi8KIAogI2lmbmRlZiBUU1RfQ0dST1VQX0gKICNkZWZpbmUgVFNUX0NHUk9VUF9I
CiAKLSNkZWZpbmUgUEFUSF9UTVBfQ0dfTUVNCSIvdG1wL2Nncm91cF9tZW0iCi0jZGVmaW5lIFBB
VEhfVE1QX0NHX0NTVAkiL3RtcC9jZ3JvdXBfY3N0IgotCiBlbnVtIHRzdF9jZ3JvdXBfdmVyIHsK
IAlUU1RfQ0dST1VQX1YxID0gMSwKIAlUU1RfQ0dST1VQX1YyID0gMiwKIH07CiAKIGVudW0gdHN0
X2Nncm91cF9jdHJsIHsKLQlUU1RfQ0dST1VQX01FTUNHID0gMSwKKwlUU1RfQ0dST1VQX01FTU9S
WSA9IDEsCiAJVFNUX0NHUk9VUF9DUFVTRVQgPSAyLAotCS8qIGFkZCBjZ3JvdXAgY29udHJvbGxl
ciAqLworfTsKKyNkZWZpbmUgVFNUX0NHUk9VUF9NQVggVFNUX0NHUk9VUF9DUFVTRVQKKworLyog
VGhlIGxldmVsIG9mIENHcm91cCBjbGVhbnVwIHdoaWNoIHdpbGwgYmUgYXR0ZW1wdGVkIGFmdGVy
IHRoZQorICogdGVzdC4gV2hlbiBydW5uaW5nIHRlc3RzIGluIHBhcmFsbGVsIHlvdSBzaG91bGQg
c2VsZWN0CisgKiBUU1RfQ0dPUlVQX0NMRUFOVVBfe1RFU1QsTk9ORX0uIE5vdGUgdGhhdCB3ZSBv
bmx5IHRyeSB0byBjbGVhbnVwCisgKiBDR3JvdXBzIHdlIG1vdW50ZWQvY3JlYXRlZCBpbiB0aGUg
Y3VycmVudCB0ZXN0LgorICovCitlbnVtIHRzdF9jZ3JvdXBfY2xlYW51cCB7CisJLyogVW5tb3Vu
dCB0aGUgQ0dyb3VwIHJvb3RzICovCisJVFNUX0NHUk9VUF9DTEVBTlVQX1JPT1QsCisJLyogQ2xl
YW51cCB1cCB0ZXN0IENHcm91cHMgYW5kIHRoZSBvdmVyYWxsIExUUCBDR3JvdXAgKi8KKwlUU1Rf
Q0dST1VQX0NMRUFOVVBfTFRQLAorCS8qIENsZWFudXAgdXAgaW5kaXZpZHVhbCB0ZXN0IENHcm91
cHMgKi8KKwlUU1RfQ0dST1VQX0NMRUFOVVBfVEVTVCwKKwkvKiBEb24ndCBkcmFpbiBvciBkZWxl
dGUgYW55IGdyb3VwcywgaW5jbHVkaW5nIHRoZSBpbmRpdmlkdWFsCisJICogdGVzdCBDR3JvdXBz
CisJICovCisJVFNUX0NHUk9VUF9DTEVBTlVQX05PTkUsCiB9OwogCi1lbnVtIHRzdF9jZ3JvdXBf
dmVyIHRzdF9jZ3JvdXBfdmVyc2lvbih2b2lkKTsKKy8qIFVzZWQgdG8gc3BlY2lmeSBDR3JvdXAg
aGllcmFyY2h5IGNvbmZpZ3VyYXRpb24gb3B0aW9ucywgYWxsb3dpbmcgYQorICogdGVzdCB0byBy
ZXF1ZXN0IGEgcGFydGljdWxhciBDR3JvdXAgc3RydWN0dXJlLgorICoKKyAqIEl0IGlzIGV4cGVj
dGVkIHRoaXMgd2lsbCBleHBhbmQgdG8gaW5jbHVkZSBvcHRpb25zIGZvciBjaGFuZ2luZworICog
dGhpbmdzIHN1Y2ggYXMgdGhlIGNncm91cCBuYW1lcywgdGhyZWFkaW5nLCBpbmhlcml0YW5jZSBl
dGMuCisgKi8KK3N0cnVjdCB0c3RfY2dyb3VwX29wdHMgeworCS8qIE9ubHkgdHJ5IHRvIG1vdW50
IFYxIENHcm91cCBjb250cm9sbGVycy4gVGhpcyB3aWxsIG5vdAorCSAqIHByZXZlbnQgVjIgZnJv
bSBiZWluZyB1c2VkIGlmIGl0IGlzIGFscmVhZHkgbW91bnRlZCwgaXQKKwkgKiBvbmx5IGluZGlj
YXRlcyB0aGF0IHdlIHNob3VsZCBtb3VudCBWMSBjb250cm9sbGVycyBpZgorCSAqIG5vdGhpbmcg
aXMgcHJlc2VudC4gQnkgZGVmYXVsdCB3ZSB0cnkgdG8gbW91bnQgVjIgZmlyc3QuICovCisJaW50
IG9ubHlfbW91bnRfdjE6MTsKKwllbnVtIHRzdF9jZ3JvdXBfY2xlYW51cCBjbGVhbnVwOworfTsK
IAotLyogVG8gbW91bnQvdW1vdW50IHNwZWNpZmllZCBjZ3JvdXAgY29udHJvbGxlciBvbiAnY2dy
b3VwX2RpcicgcGF0aCAqLwotdm9pZCB0c3RfY2dyb3VwX21vdW50KGVudW0gdHN0X2Nncm91cF9j
dHJsIGN0cmwsIGNvbnN0IGNoYXIgKmNncm91cF9kaXIpOwotdm9pZCB0c3RfY2dyb3VwX3Vtb3Vu
dChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKTsKKy8qIFNlYXJjaCB0aGUgc3lzdGVtIGZvciBtb3Vu
dGVkIGNncm91cHMgYW5kIGF2YWlsYWJsZQorICogY29udHJvbGxlcnMuIENhbGxlZCBhdXRvbWF0
aWNhbGx5IGJ5IHRzdF9jZ3JvdXBfcmVxdWlyZS4KKyAqLwordm9pZCB0c3RfY2dyb3VwX3NjYW4o
dm9pZCk7CisvKiBQcmludCB0aGUgY29uZmlnIGRldGVjdGVkIGJ5IHRzdF9jZ3JvdXBfc2NhbiAq
Lwordm9pZCB0c3RfY2dyb3VwX3ByaW50X2NvbmZpZyh2b2lkKTsKIAotLyogVG8gbW92ZSBjdXJy
ZW50IHByb2Nlc3MgUElEIHRvIHRoZSBtb3VudGVkIGNncm91cCB0YXNrcyAqLwotdm9pZCB0c3Rf
Y2dyb3VwX21vdmVfY3VycmVudChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKTsKKy8qIFJlYWQgZnJv
bSBhIGNvbnRyb2xsZXIgZmlsZSBpbiB0aGUgdGVzdCdzIGRlZmF1bHQgQ0dyb3VwLiBVc2UKKyAq
IHRzdF9jZ3JvdXBfcmVxdWlyZSB0byBlbnN1cmUgdGhlIHNwZWNpZmllZCBjb250cm9sbGVyIGlz
IGFjdGl2ZSBvbgorICogdGhlIHRlc3QncyBkZWZhdWx0IENHcm91cAorICovCisjZGVmaW5lIFNB
RkVfQ0dST1VQX1JFQUQodHlwZSwgcGF0aCwgYnVmLCBuYnl0ZSkgXAorCXNhZmVfY2dyb3VwX3By
aW50ZihfX0ZJTEVfXywgX19MSU5FX18sICh0eXBlKSwgKHBhdGgpLCAoYnVmKSwgKG5ieXRlKSkK
IAotLyogVG8gc2V0IGNncm91cCBjb250cm9sbGVyIGtub2Igd2l0aCBuZXcgdmFsdWUgKi8KLXZv
aWQgdHN0X2Nncm91cF9zZXRfa25vYihjb25zdCBjaGFyICpjZ3JvdXBfZGlyLCBjb25zdCBjaGFy
ICprbm9iLCBsb25nIHZhbHVlKTsKK3NzaXplX3Qgc2FmZV9jZ3JvdXBfcmVhZChjb25zdCBjaGFy
ICpmaWxlLCBjb25zdCBpbnQgbGluZW5vLAorCQkJIGVudW0gdHN0X2Nncm91cF9jdHJsIHR5cGUs
CisJCQkgY29uc3QgY2hhciAqcGF0aCwgY2hhciAqYnVmLCBzaXplX3QgbmJ5dGUpOwogCi0vKiBT
ZXQgb2YgZnVuY3Rpb25zIHRvIHNldCBrbm9icyB1bmRlciB0aGUgbWVtb3J5IGNvbnRyb2xsZXIg
Ki8KLXZvaWQgdHN0X2Nncm91cF9tZW1fc2V0X21heGJ5dGVzKGNvbnN0IGNoYXIgKmNncm91cF9k
aXIsIGxvbmcgbWVtc3opOwotaW50ICB0c3RfY2dyb3VwX21lbV9zd2FwYWNjdF9lbmFibGVkKGNv
bnN0IGNoYXIgKmNncm91cF9kaXIpOwotdm9pZCB0c3RfY2dyb3VwX21lbV9zZXRfbWF4c3dhcChj
b25zdCBjaGFyICpjZ3JvdXBfZGlyLCBsb25nIG1lbXN6KTsKKy8qIFByaW50IHRvIGEgY29udHJv
bCBmaWxlIGluIHRoZSB0ZXN0J3MgZGVmYXVsdCBDR3JvdXAgKi8KKyNkZWZpbmUgU0FGRV9DR1JP
VVBfUFJJTlRGKHR5cGUsIHBhdGgsIGZtdCwgLi4uKSBcCisJc2FmZV9jZ3JvdXBfcHJpbnRmKF9f
RklMRV9fLCBfX0xJTkVfXywgKHR5cGUpLCAocGF0aCksIChmbXQpLCBfX1ZBX0FSR1NfXykKIAot
LyogU2V0IG9mIGZ1bmN0aW9ucyB0byByZWFkL3dyaXRlIGNwdXNldCBjb250cm9sbGVyIGZpbGVz
IGNvbnRlbnQgKi8KLXZvaWQgdHN0X2Nncm91cF9jcHVzZXRfcmVhZF9maWxlcyhjb25zdCBjaGFy
ICpjZ3JvdXBfZGlyLCBjb25zdCBjaGFyICpmaWxlbmFtZSwKLQljaGFyICpyZXRidWYsIHNpemVf
dCByZXRidWZfc3opOwotdm9pZCB0c3RfY2dyb3VwX2NwdXNldF93cml0ZV9maWxlcyhjb25zdCBj
aGFyICpjZ3JvdXBfZGlyLCBjb25zdCBjaGFyICpmaWxlbmFtZSwKLQljb25zdCBjaGFyICpidWYp
Owordm9pZCBzYWZlX2Nncm91cF9wcmludGYoY29uc3QgY2hhciAqZmlsZSwgY29uc3QgaW50IGxp
bmVubywKKwkJCWVudW0gdHN0X2Nncm91cF9jdHJsIHR5cGUsCisJCQljb25zdCBjaGFyICpwYXRo
LCBjb25zdCBjaGFyICpmbXQsIC4uLikKKwkJCV9fYXR0cmlidXRlX18gKChmb3JtYXQgKHByaW50
ZiwgNSwgNikpKTsKKworLyogRW5zdXJlIHRoZSBzcGVjaWZpZWQgY29udHJvbGxlciBpcyBhdmFp
bGFibGUgaW4gdGhlIHRlc3QncyBkZWZhdWx0CisgKiBDR3JvdXAsIG1vdW50aW5nL2VuYWJsaW5n
IGl0IGlmIG5lY2Vzc2FyeSAqLwordm9pZCB0c3RfY2dyb3VwX3JlcXVpcmUoZW51bSB0c3RfY2dy
b3VwX2N0cmwgdHlwZSwKKwkJCWNvbnN0IHN0cnVjdCB0c3RfY2dyb3VwX29wdHMgKm9wdGlvbnMp
OworCisvKiBUZWFyIGRvd24gYW55IENHcm91cHMgY3JlYXRlZCBieSBjYWxscyB0byB0c3RfY2dy
b3VwX3JlcXVpcmUgKi8KK3ZvaWQgdHN0X2Nncm91cF9jbGVhbnVwKGNvbnN0IHN0cnVjdCB0c3Rf
Y2dyb3VwX29wdHMgKm9wdGlvbnMpOworCisvKiBNb3ZlIHRoZSBjdXJyZW50IHByb2Nlc3MgdG8g
dGhlIHRlc3QncyBkZWZhdWx0IENHcm91cCAqLwordm9pZCB0c3RfY2dyb3VwX21vdmVfY3VycmVu
dChlbnVtIHRzdF9jZ3JvdXBfY3RybCB0eXBlKTsKKworLyogU2V0IG9mIGZ1bmN0aW9ucyB0byBz
ZXQga25vYnMgdW5kZXIgdGhlIHRlc3QncyBkZWZhdWx0IG1lbW9yeQorICogY29udHJvbGxlci4K
KyAqLwordm9pZCB0c3RfY2dyb3VwX21lbV9zZXRfbWF4Ynl0ZXMoc2l6ZV90IG1lbXN6KTsKK2lu
dCAgdHN0X2Nncm91cF9tZW1fc3dhcGFjY3RfZW5hYmxlZCh2b2lkKTsKK3ZvaWQgdHN0X2Nncm91
cF9tZW1fc2V0X21heHN3YXAoc2l6ZV90IG1lbXN6KTsKKworLyogU2V0IG9mIGZ1bmN0aW9ucyB0
byByZWFkL3dyaXRlIHRoZSB0ZXN0J3MgZGVmYXVsdCBjcHVzZXQgY29udHJvbGxlcgorICogZmls
ZXMgY29udGVudC4KKyAqLwordm9pZCB0c3RfY2dyb3VwX2NwdXNldF9yZWFkX2ZpbGVzKGNvbnN0
IGNoYXIgKm5hbWUsIGNoYXIgKmJ1Ziwgc2l6ZV90IG5ieXRlKTsKK3ZvaWQgdHN0X2Nncm91cF9j
cHVzZXRfd3JpdGVfZmlsZXMoY29uc3QgY2hhciAqbmFtZSwgY29uc3QgY2hhciAqYnVmKTsKIAog
I2VuZGlmIC8qIFRTVF9DR1JPVVBfSCAqLwpkaWZmIC0tZ2l0IGEvbGliL3RzdF9jZ3JvdXAuYyBi
L2xpYi90c3RfY2dyb3VwLmMKaW5kZXggOTZjOTUyNGQyLi44N2M5ODBhNTYgMTAwNjQ0Ci0tLSBh
L2xpYi90c3RfY2dyb3VwLmMKKysrIGIvbGliL3RzdF9jZ3JvdXAuYwpAQCAtMiw0NTMgKzIsNzMz
IEBACiAvKgogICogQ29weXJpZ2h0IChjKSAyMDIwIFJlZCBIYXQsIEluYy4KICAqIENvcHlyaWdo
dCAoYykgMjAyMCBMaSBXYW5nIDxsaXdhbmdAcmVkaGF0LmNvbT4KKyAqIENvcHlyaWdodCAoYykg
MjAyMCBSaWNoYXJkIFBhbGV0aG9ycGUgPHJwYWxldGhvcnBlQHN1c2UuY29tPgogICovCiAKICNk
ZWZpbmUgVFNUX05PX0RFRkFVTFRfTUFJTgogCiAjaW5jbHVkZSA8c3RkaW8uaD4KLSNpbmNsdWRl
IDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxtbnRlbnQuaD4KICNpbmNsdWRlIDxzeXMvbW91bnQuaD4K
LSNpbmNsdWRlIDxmY250bC5oPgotI2luY2x1ZGUgPHVuaXN0ZC5oPgogCiAjaW5jbHVkZSAidHN0
X3Rlc3QuaCIKLSNpbmNsdWRlICJ0c3Rfc2FmZV9tYWNyb3MuaCIKLSNpbmNsdWRlICJ0c3Rfc2Fm
ZV9zdGRpby5oIgorI2luY2x1ZGUgImxhcGkvZmNudGwuaCIKKyNpbmNsdWRlICJsYXBpL21vdW50
LmgiCiAjaW5jbHVkZSAidHN0X2Nncm91cC5oIgotI2luY2x1ZGUgInRzdF9kZXZpY2UuaCIKIAot
c3RhdGljIGVudW0gdHN0X2Nncm91cF92ZXIgdHN0X2NnX3ZlcjsKLXN0YXRpYyBpbnQgY2xvbmVf
Y2hpbGRyZW47CisvKiBBdCBtb3N0IHdlIGNhbiBoYXZlIG9uZSBjZ3JvdXAgVjEgdHJlZSBmb3Ig
ZWFjaCBjb250cm9sbGVyIGFuZCBvbmUKKyAqIChlbXB0eSkgdjIgdHJlZS4KKyAqLworI2RlZmlu
ZSBUU1RfQ0dST1VQX01BWF9UUkVFUyAoVFNUX0NHUk9VUF9NQVggKyAxKQorCisvKiBDR3JvdXAg
dHJlZSAqLworc3RydWN0IHRzdF9jZ3JvdXBfcm9vdCB7CisJZW51bSB0c3RfY2dyb3VwX3ZlciB2
ZXI7CisJLyogTW91bnQgcGF0aCAqLworCWNoYXIgcGF0aFtQQVRIX01BWC8yXTsKKwkvKiBTdWJz
eXN0ZW1zIChjb250cm9sbGVycykgYml0IGZpZWxkICovCisJdWludDMyX3Qgc3NfZmllbGQ7CisK
KwkvKiBQYXRoIEZEcyBmb3IgdXNlIHdpdGggb3BlbmF0IHN5c2NhbGxzICovCisJLyogTW91bnQg
ZGlyZWN0b3J5ICovCisJaW50IG1udF9kaXI7CisJLyogTFRQIENHcm91cCBkaXJlY3RvcnksIGNv
bnRhaW5zIGRyYWluIGFuZCB0ZXN0IGRpcnMgKi8KKwlpbnQgbHRwX2RpcjsKKwkvKiBEcmFpbiBD
R3JvdXAsIHNlZSB0c3RfY2dyb3VwX2NsZWFudXAgKi8KKwlpbnQgZHJhaW5fZGlyOworCS8qIENH
cm91cCBmb3IgY3VycmVudCB0ZXN0ICovCisJaW50IHRzdF9kaXI7CisKKwlpbnQgd2VfbW91bnRl
ZF9pdDoxOworCWludCB3ZV9jcmVhdGVkX2x0cF9kaXI6MTsKKwkvKiBjcHVzZXQgaXMgaW4gY29t
cGF0YWJpbGl0eSBtb2RlICovCisJaW50IG5vX3ByZWZpeDoxOworfTsKKworLyogJ3NzJyBzdGFu
ZHMgZm9yIHN1YnN5c3RlbSB3aGljaCBpcyB0aGUgc2FtZSBhcyAnY29udHJvbGxlcicgKi8KK3N0
cnVjdCB0c3RfY2dyb3VwX3NzIHsKKwllbnVtIHRzdF9jZ3JvdXBfY3RybCBpbmR4OworCWNvbnN0
IGNoYXIgKm5hbWU7CisJc3RydWN0IHRzdF9jZ3JvdXBfcm9vdCAqdHJlZTsKK307CisKK3N0cnVj
dCB0c3RfY2dyb3VwX2ZlYXR1cmVzIHsKKwljb25zdCBjaGFyICptZW1vcnlfbWF4X25hbWU7CisJ
Y29uc3QgY2hhciAqbWVtb3J5X21heF9zd2FwX25hbWU7CisJaW50IG1lbW9yeV9oYXNfa21lbTox
OworCWludCBtZW1vcnlfaGFzX3N3YXA6MTsKK307CisKKy8qIEFsd2F5cyB1c2UgZmlyc3QgaXRl
bSBmb3IgdW5pZmllZCBoaWVyYXJjaHkgKi8KK3N0YXRpYyBzdHJ1Y3QgdHN0X2Nncm91cF9yb290
IHRyZWVzW1RTVF9DR1JPVVBfTUFYX1RSRUVTICsgMV07CisKK3N0YXRpYyBzdHJ1Y3QgdHN0X2Nn
cm91cF9zcyBjc3NbVFNUX0NHUk9VUF9NQVggKyAxXSA9IHsKKwl7IFRTVF9DR1JPVVBfTUVNT1JZ
LCAibWVtb3J5IiwgTlVMTCB9LAorCXsgVFNUX0NHUk9VUF9DUFVTRVQsICJjcHVzZXQiLCBOVUxM
IH0sCit9OworCitzdGF0aWMgY29uc3Qgc3RydWN0IHRzdF9jZ3JvdXBfb3B0cyBkZWZhdWx0X29w
dHMgPSB7IDAgfTsKK3N0YXRpYyBzdHJ1Y3QgdHN0X2Nncm91cF9mZWF0dXJlcyBmZWF0dXJlczsK
Kworc3RhdGljIGNvbnN0IGNoYXIgKmx0cF9jZ3JvdXBfZGlyID0gImx0cCI7CitzdGF0aWMgY29u
c3QgY2hhciAqbHRwX2Nncm91cF9kcmFpbl9kaXIgPSAiZHJhaW4iOworc3RhdGljIGNoYXIgdGVz
dF9jZ3JvdXBfZGlyW1BBVEhfTUFYLzRdOworc3RhdGljIGNvbnN0IGNoYXIgKmx0cF9tb3VudF9w
cmVmaXggPSAiL3RtcC9jZ3JvdXBfIjsKK3N0YXRpYyBjb25zdCBjaGFyICpsdHBfdjJfbW91bnQg
PSAidW5pZmllZCI7CiAKLXN0YXRpYyBpbnQgdHN0X2Nncm91cF9jaGVjayhjb25zdCBjaGFyICpj
Z3JvdXApCisjZGVmaW5lIHRzdF9mb3JfZWFjaF92MV9yb290KHQpIFwKKwlmb3IgKCh0KSA9IHRy
ZWVzICsgMTsgKHQpLT52ZXI7ICh0KSsrKQorI2RlZmluZSB0c3RfZm9yX2VhY2hfcm9vdCh0KSBc
CisJZm9yICgodCkgPSB0cmVlc1swXS52ZXIgPyB0cmVlcyA6IHRyZWVzICsgMTsgKHQpLT52ZXI7
ICh0KSsrKQorI2RlZmluZSB0c3RfZm9yX2VhY2hfY3NzKHNzKSBmb3IgKChzcykgPSBjc3M7IChz
cyktPmluZHg7IChzcykrKykKKworc3RhdGljIGludCB0c3RfY2dyb3VwX3YyX21vdW50ZWQodm9p
ZCkKIHsKLQljaGFyIGxpbmVbUEFUSF9NQVhdOwotCUZJTEUgKmZpbGU7Ci0JaW50IGNnX2NoZWNr
ID0gMDsKLQotCWZpbGUgPSBTQUZFX0ZPUEVOKCIvcHJvYy9maWxlc3lzdGVtcyIsICJyIik7Ci0J
d2hpbGUgKGZnZXRzKGxpbmUsIHNpemVvZihsaW5lKSwgZmlsZSkpIHsKLQkJaWYgKHN0cnN0cihs
aW5lLCBjZ3JvdXApICE9IE5VTEwpIHsKLQkJCWNnX2NoZWNrID0gMTsKLQkJCWJyZWFrOwotCQl9
Ci0JfQotCVNBRkVfRkNMT1NFKGZpbGUpOworCXJldHVybiAhIXRyZWVzWzBdLnBhdGhbMF07Cit9
CisKK3N0YXRpYyBzdHJ1Y3QgdHN0X2Nncm91cF9zcyAqdHN0X2Nncm91cF9nZXRfc3MoZW51bSB0
c3RfY2dyb3VwX2N0cmwgdHlwZSkKK3sKKwlyZXR1cm4gJmNzc1t0eXBlIC0gMV07Cit9CiAKLQly
ZXR1cm4gY2dfY2hlY2s7CitzdGF0aWMgaW50IHRzdF9jZ3JvdXBfc3Nfb25fdjIoY29uc3Qgc3Ry
dWN0IHRzdF9jZ3JvdXBfc3MgKnNzKQoreworCXJldHVybiBzcy0+dHJlZS0+dmVyID09IFRTVF9D
R1JPVVBfVjI7CiB9CiAKLWVudW0gdHN0X2Nncm91cF92ZXIgdHN0X2Nncm91cF92ZXJzaW9uKHZv
aWQpCit2b2lkIHRzdF9jZ3JvdXBfcHJpbnRfY29uZmlnKHZvaWQpCiB7Ci0gICAgICAgIGVudW0g
dHN0X2Nncm91cF92ZXIgY2dfdmVyOworCXN0cnVjdCB0c3RfY2dyb3VwX3Jvb3QgKnQ7CisJc3Ry
dWN0IHRzdF9jZ3JvdXBfc3MgKnNzOwogCi0gICAgICAgIGlmICh0c3RfY2dyb3VwX2NoZWNrKCJj
Z3JvdXAyIikpIHsKLSAgICAgICAgICAgICAgICBpZiAoIXRzdF9pc19tb3VudGVkKCJjZ3JvdXAy
IikgJiYgdHN0X2lzX21vdW50ZWQoImNncm91cCIpKQotICAgICAgICAgICAgICAgICAgICAgICAg
Y2dfdmVyID0gVFNUX0NHUk9VUF9WMTsKLSAgICAgICAgICAgICAgICBlbHNlCi0gICAgICAgICAg
ICAgICAgICAgICAgICBjZ192ZXIgPSBUU1RfQ0dST1VQX1YyOworCXRzdF9yZXMoVElORk8sICJE
ZXRlY3RlZCBDb250cm9sbGVyczoiKTsKIAotICAgICAgICAgICAgICAgIGdvdG8gb3V0OwotICAg
ICAgICB9CisJdHN0X2Zvcl9lYWNoX2NzcyhzcykgeworCQl0ID0gc3MtPnRyZWU7CiAKLSAgICAg
ICAgaWYgKHRzdF9jZ3JvdXBfY2hlY2soImNncm91cCIpKQotICAgICAgICAgICAgICAgIGNnX3Zl
ciA9IFRTVF9DR1JPVVBfVjE7CisJCWlmICghdCkKKwkJCWNvbnRpbnVlOwogCi0gICAgICAgIGlm
ICghY2dfdmVyKQotICAgICAgICAgICAgICAgIHRzdF9icmsoVENPTkYsICJDZ3JvdXAgaXMgbm90
IGNvbmZpZ3VyZWQiKTsKKwkJdHN0X3JlcyhUSU5GTywgIlx0JS4xMHMgJXMgQCAlczolcyIsCisJ
CQlzcy0+bmFtZSwKKwkJCXQtPm5vX3ByZWZpeCA/ICJbbm9wcmVmaXhdIiA6ICIiLAorCQkJdC0+
dmVyID09IFRTVF9DR1JPVVBfVjEgPyAiVjEiIDogIlYyIiwKKwkJCXQtPnBhdGgpOworCX0KIAot
b3V0OgotICAgICAgICByZXR1cm4gY2dfdmVyOworCWlmICghKGZlYXR1cmVzLm1lbW9yeV9oYXNf
a21lbSB8fCBmZWF0dXJlcy5tZW1vcnlfaGFzX3N3YXApKQorCQlyZXR1cm47CisKKwl0c3RfcmVz
KFRJTkZPLCAiRGV0ZWN0ZWQgRmVhdHVyZSBmbGFnczogJXMlcyIsCisJCWZlYXR1cmVzLm1lbW9y
eV9oYXNfa21lbSA/ICJrbWVtICIgOiAiIiwKKwkJZmVhdHVyZXMubWVtb3J5X2hhc19zd2FwID8g
InN3YXAiIDogIiIpOwogfQogCi1zdGF0aWMgdm9pZCB0c3RfY2dyb3VwMV9tb3VudChjb25zdCBj
aGFyICpuYW1lLCBjb25zdCBjaGFyICpvcHRpb24sCi0JCQljb25zdCBjaGFyICptbnRfcGF0aCwg
Y29uc3QgY2hhciAqbmV3X3BhdGgpCitzc2l6ZV90IHNhZmVfY2dyb3VwX3JlYWQoY29uc3QgY2hh
ciAqZmlsZSwgY29uc3QgaW50IGxpbmVubywKKwkJICAgICAgZW51bSB0c3RfY2dyb3VwX2N0cmwg
dHlwZSwKKwkJICAgICAgY29uc3QgY2hhciAqcGF0aCwgY2hhciAqYnVmLCBzaXplX3QgbmJ5dGUp
CiB7Ci0JY2hhciBrbm9iX3BhdGhbUEFUSF9NQVhdOwotCWlmICh0c3RfaXNfbW91bnRlZChtbnRf
cGF0aCkpCi0JCWdvdG8gb3V0OwotCi0JU0FGRV9NS0RJUihtbnRfcGF0aCwgMDc3Nyk7Ci0JaWYg
KG1vdW50KG5hbWUsIG1udF9wYXRoLCAiY2dyb3VwIiwgMCwgb3B0aW9uKSA9PSAtMSkgewotCQlp
ZiAoZXJybm8gPT0gRU5PREVWKSB7Ci0JCQlpZiAocm1kaXIobW50X3BhdGgpID09IC0xKQotCQkJ
CXRzdF9yZXMoVFdBUk4gfCBURVJSTk8sICJybWRpciAlcyBmYWlsZWQiLCBtbnRfcGF0aCk7Ci0J
CQl0c3RfYnJrKFRDT05GLAotCQkJCSAiQ2dyb3VwIHYxIGlzIG5vdCBjb25maWd1cmVkIGluIGtl
cm5lbCIpOwotCQl9Ci0JCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJtb3VudCAlcyIsIG1udF9w
YXRoKTsKLQl9CisJcmV0dXJuIHNhZmVfZmlsZV9yZWFkYXQoZmlsZSwgbGluZW5vLAorCQkJCXRz
dF9jZ3JvdXBfZ2V0X3NzKHR5cGUpLT50cmVlLT50c3RfZGlyLAorCQkJCXBhdGgsIGJ1ZiwgbmJ5
dGUpOworfQogCi0JLyoKLQkgKiBXZSBzaG91bGQgYXNzaWduIG9uZSBvciBtb3JlIG1lbW9yeSBu
b2RlcyB0byBjcHVzZXQubWVtcyBhbmQKLQkgKiBjcHVzZXQuY3B1cywgb3RoZXJ3aXNlLCBlY2hv
ICQkID4gdGFza3MgZ2l2ZXMg4oCcRU5PU1BDOiBubyBzcGFjZQotCSAqIGxlZnQgb24gZGV2aWNl
4oCdIHdoZW4gdHJ5aW5nIHRvIHVzZSBjcHVzZXQuCi0JICoKLQkgKiBPciwgc2V0dGluZyBjZ3Jv
dXAuY2xvbmVfY2hpbGRyZW4gdG8gMSBjYW4gaGVscCBpbiBhdXRvbWF0aWNhbGx5Ci0JICogaW5o
ZXJpdGluZyBtZW1vcnkgYW5kIG5vZGUgc2V0dGluZyBmcm9tIHBhcmVudCBjZ3JvdXAgd2hlbiBh
Ci0JICogY2hpbGQgY2dyb3VwIGlzIGNyZWF0ZWQuCi0JICovCi0JaWYgKHN0cmNtcChvcHRpb24s
ICJjcHVzZXQiKSA9PSAwKSB7Ci0JCXNwcmludGYoa25vYl9wYXRoLCAiJXMvY2dyb3VwLmNsb25l
X2NoaWxkcmVuIiwgbW50X3BhdGgpOwotCQlTQUZFX0ZJTEVfU0NBTkYoa25vYl9wYXRoLCAiJWQi
LCAmY2xvbmVfY2hpbGRyZW4pOwotCQlTQUZFX0ZJTEVfUFJJTlRGKGtub2JfcGF0aCwgIiVkIiwg
MSk7Ci0JfQotb3V0OgotCVNBRkVfTUtESVIobmV3X3BhdGgsIDA3NzcpOwordm9pZCBzYWZlX2Nn
cm91cF9wcmludGYoY29uc3QgY2hhciAqZmlsZSwgY29uc3QgaW50IGxpbmVubywKKwkJCWVudW0g
dHN0X2Nncm91cF9jdHJsIHR5cGUsCisJCQljb25zdCBjaGFyICpwYXRoLCBjb25zdCBjaGFyICpm
bXQsIC4uLikKK3sKKwlzdHJ1Y3QgdHN0X2Nncm91cF9zcyAqc3MgPSB0c3RfY2dyb3VwX2dldF9z
cyh0eXBlKTsKKwl2YV9saXN0IHZhOwogCi0JdHN0X3JlcyhUSU5GTywgIkNncm91cCglcykgdjEg
bW91bnQgYXQgJXMgc3VjY2VzcyIsIG9wdGlvbiwgbW50X3BhdGgpOworCXZhX3N0YXJ0KHZhLCBm
bXQpOworCXNhZmVfZmlsZV92cHJpbnRmYXQoZmlsZSwgbGluZW5vLCBzcy0+dHJlZS0+dHN0X2Rp
ciwgcGF0aCwgZm10LCB2YSk7CisJdmFfZW5kKHZhKTsKIH0KIAotc3RhdGljIHZvaWQgdHN0X2Nn
cm91cDJfbW91bnQoY29uc3QgY2hhciAqbW50X3BhdGgsIGNvbnN0IGNoYXIgKm5ld19wYXRoKQor
dm9pZCB0c3RfY2dyb3VwX21vdmVfY3VycmVudChlbnVtIHRzdF9jZ3JvdXBfY3RybCB0eXBlKQog
ewotCWlmICh0c3RfaXNfbW91bnRlZChtbnRfcGF0aCkpCi0JCWdvdG8gb3V0OwotCi0JU0FGRV9N
S0RJUihtbnRfcGF0aCwgMDc3Nyk7Ci0JaWYgKG1vdW50KCJjZ3JvdXAyIiwgbW50X3BhdGgsICJj
Z3JvdXAyIiwgMCwgTlVMTCkgPT0gLTEpIHsKLQkJaWYgKGVycm5vID09IEVOT0RFVikgewotCQkJ
aWYgKHJtZGlyKG1udF9wYXRoKSA9PSAtMSkKLQkJCQl0c3RfcmVzKFRXQVJOIHwgVEVSUk5PLCAi
cm1kaXIgJXMgZmFpbGVkIiwgbW50X3BhdGgpOwotCQkJdHN0X2JyayhUQ09ORiwKLQkJCQkgIkNn
cm91cCB2MiBpcyBub3QgY29uZmlndXJlZCBpbiBrZXJuZWwiKTsKLQkJfQotCQl0c3RfYnJrKFRC
Uk9LIHwgVEVSUk5PLCAibW91bnQgJXMiLCBtbnRfcGF0aCk7Ci0JfQotCi1vdXQ6Ci0JU0FGRV9N
S0RJUihuZXdfcGF0aCwgMDc3Nyk7CisJaWYgKHRzdF9jZ3JvdXBfc3Nfb25fdjIodHN0X2Nncm91
cF9nZXRfc3ModHlwZSkpKQorCQlTQUZFX0NHUk9VUF9QUklOVEYodHlwZSwgImNncm91cC5wcm9j
cyIsICIlZCIsIGdldHBpZCgpKTsKKwllbHNlCisJCVNBRkVfQ0dST1VQX1BSSU5URih0eXBlLCAi
dGFza3MiLCAiJWQiLCBnZXRwaWQoKSk7Cit9CiAKLQl0c3RfcmVzKFRJTkZPLCAiQ2dyb3VwIHYy
IG1vdW50IGF0ICVzIHN1Y2Nlc3MiLCBtbnRfcGF0aCk7Cit2b2lkIHRzdF9jZ3JvdXBfbWVtX3Nl
dF9tYXhieXRlcyhzaXplX3QgbWVtc3opCit7CisJU0FGRV9DR1JPVVBfUFJJTlRGKFRTVF9DR1JP
VVBfTUVNT1JZLAorCQkJICAgZmVhdHVyZXMubWVtb3J5X21heF9uYW1lLCAiJXp1IiwgbWVtc3op
OwogfQogCi1zdGF0aWMgdm9pZCB0c3RfY2dyb3VwTl91bW91bnQoY29uc3QgY2hhciAqbW50X3Bh
dGgsIGNvbnN0IGNoYXIgKm5ld19wYXRoKQoraW50IHRzdF9jZ3JvdXBfbWVtX3N3YXBhY2N0X2Vu
YWJsZWQodm9pZCkKIHsKLQlGSUxFICpmcDsKLQlpbnQgZmQ7Ci0JY2hhciBzX25ld1tCVUZTSVpd
LCBzW0JVRlNJWl0sIHZhbHVlW0JVRlNJWl07Ci0JY2hhciBrbm9iX3BhdGhbUEFUSF9NQVhdOwor
CWlmICghZmVhdHVyZXMubWVtb3J5X2hhc19zd2FwKQorCQl0c3RfcmVzKFRDT05GLCAibWVtY2cg
c3dhcCBhY2NvdW50aW5nIGlzIGRpc2FibGVkIik7CiAKLQlpZiAoIXRzdF9pc19tb3VudGVkKG1u
dF9wYXRoKSkKKwlyZXR1cm4gZmVhdHVyZXMubWVtb3J5X2hhc19zd2FwOworfQorCit2b2lkIHRz
dF9jZ3JvdXBfbWVtX3NldF9tYXhzd2FwKHNpemVfdCBtZW1zeikKK3sKKwlpZiAoIWZlYXR1cmVz
Lm1lbW9yeV9oYXNfc3dhcCkKIAkJcmV0dXJuOwogCi0JLyogTW92ZSBhbGwgcHJvY2Vzc2VzIGlu
IHRhc2sodjI6IGNncm91cC5wcm9jcykgdG8gaXRzIHBhcmVudCBub2RlLiAqLwotCWlmICh0c3Rf
Y2dfdmVyICYgVFNUX0NHUk9VUF9WMSkKLQkJc3ByaW50ZihzLCAiJXMvdGFza3MiLCBtbnRfcGF0
aCk7Ci0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YyKQotCQlzcHJpbnRmKHMsICIlcy9j
Z3JvdXAucHJvY3MiLCBtbnRfcGF0aCk7Ci0KLQlmZCA9IG9wZW4ocywgT19XUk9OTFkpOwotCWlm
IChmZCA9PSAtMSkKLQkJdHN0X3JlcyhUV0FSTiB8IFRFUlJOTywgIm9wZW4gJXMiLCBzKTsKLQot
CWlmICh0c3RfY2dfdmVyICYgVFNUX0NHUk9VUF9WMSkKLQkJc25wcmludGYoc19uZXcsIEJVRlNJ
WiwgIiVzL3Rhc2tzIiwgbmV3X3BhdGgpOwotCWlmICh0c3RfY2dfdmVyICYgVFNUX0NHUk9VUF9W
MikKLQkJc25wcmludGYoc19uZXcsIEJVRlNJWiwgIiVzL2Nncm91cC5wcm9jcyIsIG5ld19wYXRo
KTsKLQotCWZwID0gZm9wZW4oc19uZXcsICJyIik7Ci0JaWYgKGZwID09IE5VTEwpCi0JCXRzdF9y
ZXMoVFdBUk4gfCBURVJSTk8sICJmb3BlbiAlcyIsIHNfbmV3KTsKLQlpZiAoKGZkICE9IC0xKSAm
JiAoZnAgIT0gTlVMTCkpIHsKLQkJd2hpbGUgKGZnZXRzKHZhbHVlLCBCVUZTSVosIGZwKSAhPSBO
VUxMKQotCQkJaWYgKHdyaXRlKGZkLCB2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDEpCi0JCQkgICAg
IT0gKHNzaXplX3Qpc3RybGVuKHZhbHVlKSAtIDEpCi0JCQkJdHN0X3JlcyhUV0FSTiB8IFRFUlJO
TywgIndyaXRlICVzIiwgcyk7Ci0JfQotCWlmICh0c3RfY2dfdmVyICYgVFNUX0NHUk9VUF9WMSkg
ewotCQlzcHJpbnRmKGtub2JfcGF0aCwgIiVzL2NwdXNldC5jcHVzIiwgbW50X3BhdGgpOwotCQlp
ZiAoIWFjY2Vzcyhrbm9iX3BhdGgsIEZfT0spKSB7Ci0JCQlzcHJpbnRmKGtub2JfcGF0aCwgIiVz
L2Nncm91cC5jbG9uZV9jaGlsZHJlbiIsIG1udF9wYXRoKTsKLQkJCVNBRkVfRklMRV9QUklOVEYo
a25vYl9wYXRoLCAiJWQiLCBjbG9uZV9jaGlsZHJlbik7Ci0JCX0KKwlTQUZFX0NHUk9VUF9QUklO
VEYoVFNUX0NHUk9VUF9NRU1PUlksCisJCQkgICBmZWF0dXJlcy5tZW1vcnlfbWF4X3N3YXBfbmFt
ZSwgIiV6dSIsIG1lbXN6KTsKK30KKworc3RhdGljIHZvaWQgdHN0X2Nncm91cF9jcHVzZXRfcGF0
aChjb25zdCBjaGFyICpuYW1lLCBjaGFyICpidWYpCit7CisJc3RydWN0IHRzdF9jZ3JvdXBfc3Mg
KnNzID0gdHN0X2Nncm91cF9nZXRfc3MoVFNUX0NHUk9VUF9DUFVTRVQpOworCWNoYXIgKnBhdGgg
PSBidWY7CisKKwlpZiAoIXNzLT50cmVlLT5ub19wcmVmaXgpIHsKKwkJc3RyY3B5KGJ1ZiwgImNw
dXNldC4iKTsKKwkJcGF0aCArPSBzdHJsZW4oYnVmKTsKIAl9Ci0JaWYgKGZkICE9IC0xKQotCQlj
bG9zZShmZCk7Ci0JaWYgKGZwICE9IE5VTEwpCi0JCWZjbG9zZShmcCk7Ci0JaWYgKHJtZGlyKG5l
d19wYXRoKSA9PSAtMSkKLQkJdHN0X3JlcyhUV0FSTiB8IFRFUlJOTywgInJtZGlyICVzIiwgbmV3
X3BhdGgpOwotCWlmICh1bW91bnQobW50X3BhdGgpID09IC0xKQotCQl0c3RfcmVzKFRXQVJOIHwg
VEVSUk5PLCAidW1vdW50ICVzIiwgbW50X3BhdGgpOwotCWlmIChybWRpcihtbnRfcGF0aCkgPT0g
LTEpCi0JCXRzdF9yZXMoVFdBUk4gfCBURVJSTk8sICJybWRpciAlcyIsIG1udF9wYXRoKTsKLQot
CWlmICh0c3RfY2dfdmVyICYgVFNUX0NHUk9VUF9WMSkKLQkJdHN0X3JlcyhUSU5GTywgIkNncm91
cCB2MSB1bm1vdW50IHN1Y2Nlc3MiKTsKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIp
Ci0JCXRzdF9yZXMoVElORk8sICJDZ3JvdXAgdjIgdW5tb3VudCBzdWNjZXNzIik7CisKKwlzdHJj
cHkocGF0aCwgbmFtZSk7CiB9CiAKLXN0cnVjdCB0c3RfY2dyb3VwX3BhdGggewotCWNoYXIgKm1u
dF9wYXRoOwotCWNoYXIgKm5ld19wYXRoOwotCXN0cnVjdCB0c3RfY2dyb3VwX3BhdGggKm5leHQ7
Ci19Owordm9pZCB0c3RfY2dyb3VwX2NwdXNldF9yZWFkX2ZpbGVzKGNvbnN0IGNoYXIgKm5hbWUs
IGNoYXIgKmJ1Ziwgc2l6ZV90IG5ieXRlKQoreworCWNoYXIgcGF0aFtQQVRIX01BWC80XTsKIAot
c3RhdGljIHN0cnVjdCB0c3RfY2dyb3VwX3BhdGggKnRzdF9jZ3JvdXBfcGF0aHM7CisJdHN0X2Nn
cm91cF9jcHVzZXRfcGF0aChuYW1lLCBwYXRoKTsKKwlTQUZFX0NHUk9VUF9SRUFEKFRTVF9DR1JP
VVBfQ1BVU0VULCBwYXRoLCBidWYsIG5ieXRlKTsKK30KIAotc3RhdGljIHZvaWQgdHN0X2Nncm91
cF9zZXRfcGF0aChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKQordm9pZCB0c3RfY2dyb3VwX2NwdXNl
dF93cml0ZV9maWxlcyhjb25zdCBjaGFyICpuYW1lLCBjb25zdCBjaGFyICpidWYpCiB7Ci0JY2hh
ciBjZ3JvdXBfbmV3X2RpcltQQVRIX01BWF07Ci0Jc3RydWN0IHRzdF9jZ3JvdXBfcGF0aCAqdHN0
X2Nncm91cF9wYXRoLCAqYTsKIAotCWlmICghY2dyb3VwX2RpcikKLQkJdHN0X2JyayhUQlJPSywg
IkludmFsaWQgY2dyb3VwIGRpciwgcGxlc2UgY2hlY2sgY2dyb3VwX2RpciIpOworCWNoYXIgcGF0
aFtQQVRIX01BWC80XTsKIAotCXNwcmludGYoY2dyb3VwX25ld19kaXIsICIlcy9sdHBfJWQiLCBj
Z3JvdXBfZGlyLCByYW5kKCkpOworCXRzdF9jZ3JvdXBfY3B1c2V0X3BhdGgobmFtZSwgcGF0aCk7
CisJU0FGRV9DR1JPVVBfUFJJTlRGKFRTVF9DR1JPVVBfQ1BVU0VULCBwYXRoLCAiJXMiLCBidWYp
OworfQogCi0JLyogVG8gc3RvcmUgY2dyb3VwIHBhdGggaW4gdGhlICdwYXRoJyBsaXN0ICovCi0J
dHN0X2Nncm91cF9wYXRoID0gU0FGRV9NQUxMT0Moc2l6ZW9mKHN0cnVjdCB0c3RfY2dyb3VwX3Bh
dGgpKTsKLQl0c3RfY2dyb3VwX3BhdGgtPm1udF9wYXRoID0gU0FGRV9NQUxMT0Moc3RybGVuKGNn
cm91cF9kaXIpICsgMSk7Ci0JdHN0X2Nncm91cF9wYXRoLT5uZXdfcGF0aCA9IFNBRkVfTUFMTE9D
KHN0cmxlbihjZ3JvdXBfbmV3X2RpcikgKyAxKTsKLQl0c3RfY2dyb3VwX3BhdGgtPm5leHQgPSBO
VUxMOworLyogRGV0ZXJtaW5lIGlmIGEgbW91bnRlZCBjZ3JvdXAgaGllcmFyY2h5ICh0cmVlKSBp
cyB1bmlxdWUgYW5kIHJlY29yZCBpdCBpZiBzby4KKyAqCisgKiBGb3IgQ0dyb3VwcyBWMiB0aGlz
IGlzIHZlcnkgc2ltcGxlIGFzIHRoZXJlIGlzIG9ubHkgb25lCisgKiBoaWVyYXJjaHkuIFdlIGp1
c3QgcmVjb3JkIHdoaWNoIGNvbnRyb2xsZXJzIGFyZSBhdmFpbGFibGUgYW5kIGNoZWNrCisgKiBp
ZiB0aGlzIG1hdGNoZXMgd2hhdCB3ZSByZWFkIGZyb20gYW55IHByZXZpb3VzIG1vdW50cyB0byB2
ZXJpZnkgb3VyCisgKiBvd24gbG9naWMgKGFuZCBwb3NzaWJseSBkZXRlY3QgcmFjZXMpLgorICoK
KyAqIEZvciBWMSB0aGUgc2V0IG9mIGNvbnRyb2xsZXJzIFMgaXMgcGFydGl0aW9uZWQgaW50byBz
ZXRzIHtQXzEsIFBfMiwKKyAqIC4uLiwgUF9ufSB3aXRoIG9uZSBvciBtb3JlIGNvbnRyb2xsZXJz
IGluIGVhY2ggcGFydGlvbi4gRWFjaAorICogcGFydGl0aW9uIFBfbiBjYW4gYmUgbW91bnRlZCBt
dWx0aXBsZSB0aW1lcywgYnV0IHRoZSBzYW1lCisgKiBjb250cm9sbGVyIGNhbiBub3QgYXBwZWFy
IGluIG1vcmUgdGhhbiBvbmUgcGFydGl0aW9uLiBVc3VhbGx5IGVhY2gKKyAqIHBhcnRpdGlvbiBj
b250YWlucyBhIHNpbmdsZSBjb250cm9sbGVyLCBidXQsIGZvciBleGFtcGxlLCBjcHUgYW5kCisg
KiBjcHVhY2N0IGFyZSBvZnRlbiBtb3VudGVkIHRvZ2V0aGVyIGluIHRoZSBzYW1lIHBhcnRpaW9u
LgorICoKKyAqIEVhY2ggY29udHJvbGxlciBwYXJ0aXRpb24gaGFzIGl0cyBvd24gaGllcmFyY2h5
L3Jvb3QvdHJlZSB3aGljaCB3ZQorICogbXVzdCB0cmFjayBhbmQgdXBkYXRlIGluZGVwZW5kZW50
bHkuCisgKi8KK3N0YXRpYyB2b2lkIHRzdF9jZ3JvdXBfZ2V0X3RyZWUoY29uc3QgY2hhciAqdHlw
ZSwgY29uc3QgY2hhciAqcGF0aCwgY2hhciAqb3B0cykKK3sKKwlzdHJ1Y3QgdHN0X2Nncm91cF9y
b290ICp0ID0gdHJlZXM7CisJc3RydWN0IHRzdF9jZ3JvdXBfc3MgKmM7CisJdWludDMyX3Qgc3Nf
ZmllbGQgPSAwOworCWludCBub19wcmVmaXggPSAwOworCWNoYXIgYnVmW0JVRlNJWl07CisJY2hh
ciAqdG9rOworCWludCBkZmQgPSBTQUZFX09QRU4ocGF0aCwgT19QQVRIIHwgT19ESVJFQ1RPUlkp
OworCisJaWYgKCFzdHJjbXAodHlwZSwgImNncm91cCIpKQorCQlnb3RvIHYxOworCisJU0FGRV9G
SUxFX1JFQURBVChkZmQsICJjZ3JvdXAuY29udHJvbGxlcnMiLCBidWYsIHNpemVvZihidWYpKTsK
KworCWZvciAodG9rID0gc3RydG9rKGJ1ZiwgIiAiKTsgdG9rOyB0b2sgPSBzdHJ0b2soTlVMTCwg
IiAiKSkgeworCQl0c3RfZm9yX2VhY2hfY3NzKGMpCisJCQlzc19maWVsZCB8PSAoIXN0cmNtcChj
LT5uYW1lLCB0b2spKSA8PCBjLT5pbmR4OworCX0KIAotCWlmICghdHN0X2Nncm91cF9wYXRocykg
ewotCQl0c3RfY2dyb3VwX3BhdGhzID0gdHN0X2Nncm91cF9wYXRoOwotCX0gZWxzZSB7Ci0JCWEg
PSB0c3RfY2dyb3VwX3BhdGhzOwotCQlkbyB7Ci0JCQlpZiAoIWEtPm5leHQpIHsKLQkJCQlhLT5u
ZXh0ID0gdHN0X2Nncm91cF9wYXRoOwotCQkJCWJyZWFrOwotCQkJfQotCQkJYSA9IGEtPm5leHQ7
Ci0JCX0gd2hpbGUgKGEpOworCWlmICh0LT52ZXIgJiYgc3NfZmllbGQgPT0gdC0+c3NfZmllbGQp
CisJCWdvdG8gZGlzY2FyZDsKKworCWlmICh0LT5zc19maWVsZCkKKwkJdHN0X2JyayhUQlJPSywg
IkF2YWlsYWJsZSBWMiBjb250cm9sbGVycyBhcmUgY2hhbmdpbmcgYmV0d2VlbiBzY2Fucz8iKTsK
KworCXQtPnZlciA9IFRTVF9DR1JPVVBfVjI7CisKKwlnb3RvIGJhY2tyZWY7CisKK3YxOgorCWZv
ciAodG9rID0gc3RydG9rKG9wdHMsICIsIik7IHRvazsgdG9rID0gc3RydG9rKE5VTEwsICIsIikp
IHsKKwkJdHN0X2Zvcl9lYWNoX2NzcyhjKQorCQkJc3NfZmllbGQgfD0gKCFzdHJjbXAoYy0+bmFt
ZSwgdG9rKSkgPDwgYy0+aW5keDsKKworCQlub19wcmVmaXggfD0gIXN0cmNtcCgibm9wcmVmaXgi
LCB0b2spOworCX0KKworCWlmICghc3NfZmllbGQpCisJCWdvdG8gZGlzY2FyZDsKKworCXRzdF9m
b3JfZWFjaF92MV9yb290KHQpIHsKKwkJaWYgKCEoc3NfZmllbGQgJiB0LT5zc19maWVsZCkpCisJ
CQljb250aW51ZTsKKworCQlpZiAoc3NfZmllbGQgPT0gdC0+c3NfZmllbGQpCisJCQlnb3RvIGRp
c2NhcmQ7CisKKwkJdHN0X2JyayhUQlJPSywKKwkJCSJUaGUgaW50ZXJzZWN0aW9uIG9mIHR3byBk
aXN0aW5jdCBzZXRzIG9mIG1vdW50ZWQgY29udHJvbGxlcnMgc2hvdWxkIGJlIG51bGw/IgorCQkJ
IkNoZWNrICclcycgYW5kICclcyciLCB0LT5wYXRoLCBwYXRoKTsKIAl9CiAKLQlzcHJpbnRmKHRz
dF9jZ3JvdXBfcGF0aC0+bW50X3BhdGgsICIlcyIsIGNncm91cF9kaXIpOwotCXNwcmludGYodHN0
X2Nncm91cF9wYXRoLT5uZXdfcGF0aCwgIiVzIiwgY2dyb3VwX25ld19kaXIpOworCWlmICh0ID49
IHRyZWVzICsgVFNUX0NHUk9VUF9NQVhfVFJFRVMpIHsKKwkJdHN0X2JyayhUQlJPSywgIlVuaXF1
ZSBjb250cm9sbGVyIG1vdW50cyBoYXZlIGV4Y2VlZGVkIG91ciBsaW1pdCAlZD8iLAorCQkJVFNU
X0NHUk9VUF9NQVhfVFJFRVMpOworCX0KKworCXQtPnZlciA9IFRTVF9DR1JPVVBfVjE7CisKK2Jh
Y2tyZWY6CisJc3RyY3B5KHQtPnBhdGgsIHBhdGgpOworCXQtPm1udF9kaXIgPSBkZmQ7CisJdC0+
c3NfZmllbGQgPSBzc19maWVsZDsKKwl0LT5ub19wcmVmaXggPSBub19wcmVmaXg7CisKKwl0c3Rf
Zm9yX2VhY2hfY3NzKGMpIHsKKwkJaWYgKHQtPnNzX2ZpZWxkICYgKDEgPDwgYy0+aW5keCkpCisJ
CQljLT50cmVlID0gdDsKKwl9CisKKwlyZXR1cm47CisKK2Rpc2NhcmQ6CisJY2xvc2UoZGZkKTsK
IH0KIAotc3RhdGljIGNoYXIgKnRzdF9jZ3JvdXBfZ2V0X3BhdGgoY29uc3QgY2hhciAqY2dyb3Vw
X2RpcikKK3ZvaWQgdHN0X2Nncm91cF9zY2FuKHZvaWQpCiB7Ci0Jc3RydWN0IHRzdF9jZ3JvdXBf
cGF0aCAqYTsKKwlzdHJ1Y3QgbW50ZW50ICptbnQ7CisJRklMRSAqZiA9IHNldG1udGVudCgiL3By
b2Mvc2VsZi9tb3VudHMiLCAiciIpOwogCi0JaWYgKCF0c3RfY2dyb3VwX3BhdGhzKQotCQlyZXR1
cm4gTlVMTDsKKwlpZiAoIWYpCisJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJDYW4ndCBvcGVu
IC9wcm9jL3NlbGYvbW91bnRzIik7CiAKLQlhID0gdHN0X2Nncm91cF9wYXRoczsKKwltbnQgPSBn
ZXRtbnRlbnQoZik7CisJaWYgKCFtbnQpCisJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJDYW4n
dCByZWFkIG1vdW50cyBvciBubyBtb3VudHM/Iik7CiAKLQl3aGlsZSAoc3RyY21wKGEtPm1udF9w
YXRoLCBjZ3JvdXBfZGlyKSAhPSAwKXsKLQkJaWYgKCFhLT5uZXh0KSB7Ci0JCQl0c3RfcmVzKFRJ
TkZPLCAiJXMgaXMgbm90IGZvdW5kIiwgY2dyb3VwX2Rpcik7Ci0JCQlyZXR1cm4gTlVMTDsKLQkJ
fQotCQlhID0gYS0+bmV4dDsKLQl9OworCWRvIHsKKwkJaWYgKHN0cm5jbXAobW50LT5tbnRfdHlw
ZSwgImNncm91cCIsIDYpKQorCQkJY29udGludWU7CiAKLQlyZXR1cm4gYS0+bmV3X3BhdGg7CisJ
CXRzdF9jZ3JvdXBfZ2V0X3RyZWUobW50LT5tbnRfdHlwZSwgbW50LT5tbnRfZGlyLCBtbnQtPm1u
dF9vcHRzKTsKKwl9IHdoaWxlICgobW50ID0gZ2V0bW50ZW50KGYpKSk7CiB9CiAKLXN0YXRpYyB2
b2lkIHRzdF9jZ3JvdXBfZGVsX3BhdGgoY29uc3QgY2hhciAqY2dyb3VwX2RpcikKK3N0YXRpYyB2
b2lkIHRzdF9jZ3JvdXBfbW91bnRfdjIodm9pZCkKIHsKLQlzdHJ1Y3QgdHN0X2Nncm91cF9wYXRo
ICphLCAqYjsKKwljaGFyIHBhdGhbUEFUSF9NQVhdOworCWludCBtYWRlX2RpciA9IDA7CisKKwlz
cHJpbnRmKHBhdGgsICIlcyVzIiwgbHRwX21vdW50X3ByZWZpeCwgbHRwX3YyX21vdW50KTsKKwor
CWlmICghbWtkaXIocGF0aCwgMDc3NykpIHsKKwkJbWFkZV9kaXIgPSAxOworCQlnb3RvIG1vdW50
OworCX0KKworCWlmIChlcnJubyA9PSBFRVhJU1QpCisJCWdvdG8gbW91bnQ7CiAKLQlpZiAoIXRz
dF9jZ3JvdXBfcGF0aHMpCisJaWYgKGVycm5vID09IEVBQ0NFUykgeworCQl0c3RfcmVzKFRJTkZP
IHwgVEVSUk5PLAorCQkJIkxhY2sgcGVybWlzc2lvbiB0byBtYWtlICVzLCBwcmVtYWtlIGl0IG9y
IHJ1biBhcyByb290IiwKKwkJCXBhdGgpOwogCQlyZXR1cm47CisJfQogCi0JYSA9IGIgPSB0c3Rf
Y2dyb3VwX3BhdGhzOworCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJta2RpciglcywgMDc3Nyki
LCBwYXRoKTsKIAotCXdoaWxlIChzdHJjbXAoYi0+bW50X3BhdGgsIGNncm91cF9kaXIpICE9IDAp
IHsKLQkJaWYgKCFiLT5uZXh0KSB7Ci0JCQl0c3RfcmVzKFRJTkZPLCAiJXMgaXMgbm90IGZvdW5k
IiwgY2dyb3VwX2Rpcik7Ci0JCQlyZXR1cm47Ci0JCX0KLQkJYSA9IGI7Ci0JCWIgPSBiLT5uZXh0
OwotCX07Cittb3VudDoKKwlpZiAoIW1vdW50KCJjZ3JvdXAyIiwgcGF0aCwgImNncm91cDIiLCAw
LCBOVUxMKSkgeworCQl0c3RfcmVzKFRJTkZPLCAiTW91bnRlZCBWMiBDR3JvdXBzIG9uICVzIiwg
cGF0aCk7CisJCXRzdF9jZ3JvdXBfc2NhbigpOworCQl0cmVlc1swXS53ZV9tb3VudGVkX2l0ID0g
MTsKKwkJcmV0dXJuOworCX0KIAotCWlmIChiID09IHRzdF9jZ3JvdXBfcGF0aHMpCi0JCXRzdF9j
Z3JvdXBfcGF0aHMgPSBiLT5uZXh0OwotCWVsc2UKLQkJYS0+bmV4dCA9IGItPm5leHQ7CisJdHN0
X3JlcyhUSU5GTyB8IFRFUlJOTywgIkNvdWxkIG5vdCBtb3VudCBWMiBDR3JvdXBzIG9uICVzIiwg
cGF0aCk7CiAKLQlmcmVlKGItPm1udF9wYXRoKTsKLQlmcmVlKGItPm5ld19wYXRoKTsKLQlmcmVl
KGIpOworCWlmIChtYWRlX2RpcikKKwkJU0FGRV9STURJUihwYXRoKTsKIH0KIAotdm9pZCB0c3Rf
Y2dyb3VwX21vdW50KGVudW0gdHN0X2Nncm91cF9jdHJsIGN0cmwsIGNvbnN0IGNoYXIgKmNncm91
cF9kaXIpCitzdGF0aWMgdm9pZCB0c3RfY2dyb3VwX21vdW50X3YxKGVudW0gdHN0X2Nncm91cF9j
dHJsIHR5cGUpCiB7Ci0JY2hhciAqY2dyb3VwX25ld19kaXI7Ci0JY2hhciBrbm9iX3BhdGhbUEFU
SF9NQVhdOwotCi0JdHN0X2NnX3ZlciA9IHRzdF9jZ3JvdXBfdmVyc2lvbigpOwotCi0JdHN0X2Nn
cm91cF9zZXRfcGF0aChjZ3JvdXBfZGlyKTsKLQljZ3JvdXBfbmV3X2RpciA9IHRzdF9jZ3JvdXBf
Z2V0X3BhdGgoY2dyb3VwX2Rpcik7Ci0KLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjEp
IHsKLQkJc3dpdGNoKGN0cmwpIHsKLQkJY2FzZSBUU1RfQ0dST1VQX01FTUNHOgotCQkJdHN0X2Nn
cm91cDFfbW91bnQoIm1lbWNnIiwgIm1lbW9yeSIsIGNncm91cF9kaXIsIGNncm91cF9uZXdfZGly
KTsKLQkJYnJlYWs7Ci0JCWNhc2UgVFNUX0NHUk9VUF9DUFVTRVQ6Ci0JCQl0c3RfY2dyb3VwMV9t
b3VudCgiY3B1c2V0Y2ciLCAiY3B1c2V0IiwgY2dyb3VwX2RpciwgY2dyb3VwX25ld19kaXIpOwot
CQlicmVhazsKLQkJZGVmYXVsdDoKLQkJCXRzdF9icmsoVEJST0ssICJJbnZhbGlkIGNncm91cCBj
b250cm9sbGVyOiAlZCIsIGN0cmwpOwotCQl9CisJc3RydWN0IHRzdF9jZ3JvdXBfc3MgKnNzID0g
dHN0X2Nncm91cF9nZXRfc3ModHlwZSk7CisJY2hhciBwYXRoW1BBVEhfTUFYXTsKKwlpbnQgbWFk
ZV9kaXIgPSAwOworCisJc3ByaW50ZihwYXRoLCAiJXMlcyIsIGx0cF9tb3VudF9wcmVmaXgsIHNz
LT5uYW1lKTsKKworCWlmICghbWtkaXIocGF0aCwgMDc3NykpIHsKKwkJbWFkZV9kaXIgPSAxOwor
CQlnb3RvIG1vdW50OwogCX0KIAotCWlmICh0c3RfY2dfdmVyICYgVFNUX0NHUk9VUF9WMikgewot
CQl0c3RfY2dyb3VwMl9tb3VudChjZ3JvdXBfZGlyLCBjZ3JvdXBfbmV3X2Rpcik7Ci0KLQkJc3dp
dGNoKGN0cmwpIHsKLQkJY2FzZSBUU1RfQ0dST1VQX01FTUNHOgotCQkJc3ByaW50Zihrbm9iX3Bh
dGgsICIlcy9jZ3JvdXAuc3VidHJlZV9jb250cm9sIiwgY2dyb3VwX2Rpcik7Ci0JCQlTQUZFX0ZJ
TEVfUFJJTlRGKGtub2JfcGF0aCwgIiVzIiwgIittZW1vcnkiKTsKLQkJYnJlYWs7Ci0JCWNhc2Ug
VFNUX0NHUk9VUF9DUFVTRVQ6Ci0JCQl0c3RfYnJrKFRDT05GLCAiQ2dyb3VwIHYyIGhhc24ndCBh
Y2hpZXZlIGNwdXNldCBzdWJzeXN0ZW0iKTsKLQkJYnJlYWs7Ci0JCWRlZmF1bHQ6Ci0JCQl0c3Rf
YnJrKFRCUk9LLCAiSW52YWxpZCBjZ3JvdXAgY29udHJvbGxlcjogJWQiLCBjdHJsKTsKLQkJfQor
CWlmIChlcnJubyA9PSBFRVhJU1QpCisJCWdvdG8gbW91bnQ7CisKKwlpZiAoZXJybm8gPT0gRUFD
Q0VTKSB7CisJCXRzdF9yZXMoVElORk8gfCBURVJSTk8sCisJCQkiTGFjayBwZXJtaXNzaW9uIHRv
IG1ha2UgJXMsIHByZW1ha2UgaXQgb3IgcnVuIGFzIHJvb3QiLAorCQkJcGF0aCk7CisJCXJldHVy
bjsKIAl9Ci19CiAKLXZvaWQgdHN0X2Nncm91cF91bW91bnQoY29uc3QgY2hhciAqY2dyb3VwX2Rp
cikKLXsKLQljaGFyICpjZ3JvdXBfbmV3X2RpcjsKKwl0c3RfYnJrKFRCUk9LIHwgVEVSUk5PLCAi
bWtkaXIoJXMsIDA3NzcpIiwgcGF0aCk7CiAKLQljZ3JvdXBfbmV3X2RpciA9IHRzdF9jZ3JvdXBf
Z2V0X3BhdGgoY2dyb3VwX2Rpcik7Ci0JdHN0X2Nncm91cE5fdW1vdW50KGNncm91cF9kaXIsIGNn
cm91cF9uZXdfZGlyKTsKLQl0c3RfY2dyb3VwX2RlbF9wYXRoKGNncm91cF9kaXIpOworbW91bnQ6
CisJaWYgKG1vdW50KHNzLT5uYW1lLCBwYXRoLCAiY2dyb3VwIiwgMCwgc3MtPm5hbWUpKSB7CisJ
CXRzdF9yZXMoVElORk8gfCBURVJSTk8sCisJCQkiQ291bGQgbm90IG1vdW50IFYxIENHcm91cCBv
biAlcyIsIHBhdGgpOworCisJCWlmIChtYWRlX2RpcikKKwkJCVNBRkVfUk1ESVIocGF0aCk7CisJ
CXJldHVybjsKKwl9CisKKwl0c3RfcmVzKFRJTkZPLCAiTW91bnRlZCBWMSAlcyBDR3JvdXAgb24g
JXMiLCBzcy0+bmFtZSwgcGF0aCk7CisJdHN0X2Nncm91cF9zY2FuKCk7CisJc3MtPnRyZWUtPndl
X21vdW50ZWRfaXQgPSAxOworCWlmICh0eXBlID09IFRTVF9DR1JPVVBfTUVNT1JZKSB7CisJCVNB
RkVfRklMRV9QUklOVEZBVChzcy0+dHJlZS0+bW50X2RpciwKKwkJCQkgICAibWVtb3J5LnVzZV9o
aWVyYXJjaHkiLCAiJWQiLCAxKTsKKwl9CiB9CiAKLXZvaWQgdHN0X2Nncm91cF9zZXRfa25vYihj
b25zdCBjaGFyICpjZ3JvdXBfZGlyLCBjb25zdCBjaGFyICprbm9iLCBsb25nIHZhbHVlKQorc3Rh
dGljIGludCB0c3RfY2dyb3VwX2V4aXN0cyhzdHJ1Y3QgdHN0X2Nncm91cF9zcyAqc3MsIGNvbnN0
IGNoYXIgKnBhdGgpCiB7Ci0JY2hhciAqY2dyb3VwX25ld19kaXI7Ci0JY2hhciBrbm9iX3BhdGhb
UEFUSF9NQVhdOworCWludCByZXQgPSBmYWNjZXNzYXQoc3MtPnRyZWUtPnRzdF9kaXIsIHBhdGgs
IEZfT0ssIDApOwogCi0JY2dyb3VwX25ld19kaXIgPSB0c3RfY2dyb3VwX2dldF9wYXRoKGNncm91
cF9kaXIpOwotCXNwcmludGYoa25vYl9wYXRoLCAiJXMvJXMiLCBjZ3JvdXBfbmV3X2Rpciwga25v
Yik7Ci0JU0FGRV9GSUxFX1BSSU5URihrbm9iX3BhdGgsICIlbGQiLCB2YWx1ZSk7CisJaWYgKCFy
ZXQpCisJCXJldHVybiAxOworCisJaWYgKGVycm5vID09IEVOT0VOVCkKKwkJcmV0dXJuIDA7CisK
Kwl0c3RfYnJrKFRCUk9LIHwgVEVSUk5PLCAiZmFjY2Vzc2F0KCVkLCAlcywgRl9PSywgMCkiLAor
CQlzcy0+dHJlZS0+dHN0X2RpciwgcGF0aCk7CisKKwlyZXR1cm4gMDsKIH0KIAotdm9pZCB0c3Rf
Y2dyb3VwX21vdmVfY3VycmVudChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKQorc3RhdGljIHZvaWQg
dHN0X2Nncm91cF9zY2FuX2ZlYXR1cmVzKGVudW0gdHN0X2Nncm91cF9jdHJsIHR5cGUpCiB7Ci0J
aWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKQotCQl0c3RfY2dyb3VwX3NldF9rbm9iKGNn
cm91cF9kaXIsICJ0YXNrcyIsIGdldHBpZCgpKTsKKwlzdHJ1Y3QgdHN0X2Nncm91cF9zcyAqc3Mg
PSB0c3RfY2dyb3VwX2dldF9zcyh0eXBlKTsKKworCWlmICh0eXBlID09IFRTVF9DR1JPVVBfTUVN
T1JZKSB7CisJCWlmIChzcy0+dHJlZS0+dmVyID09IFRTVF9DR1JPVVBfVjEpIHsKKwkJCWZlYXR1
cmVzLm1lbW9yeV9tYXhfbmFtZSA9ICJtZW1vcnkubGltaXRfaW5fYnl0ZXMiOworCQkJZmVhdHVy
ZXMubWVtb3J5X21heF9zd2FwX25hbWUgPQorCQkJCSJtZW1vcnkubWVtc3cubGltaXRfaW5fYnl0
ZXMiOworCQl9IGVsc2UgeworCQkJZmVhdHVyZXMubWVtb3J5X21heF9uYW1lID0gIm1lbW9yeS5t
YXgiOworCQkJZmVhdHVyZXMubWVtb3J5X21heF9zd2FwX25hbWUgPSAibWVtb3J5LnN3YXAubWF4
IjsKKwkJfQogCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YyKQotCQl0c3RfY2dyb3Vw
X3NldF9rbm9iKGNncm91cF9kaXIsICJjZ3JvdXAucHJvY3MiLCBnZXRwaWQoKSk7CisJCWZlYXR1
cmVzLm1lbW9yeV9oYXNfa21lbSA9CisJCQl0c3RfY2dyb3VwX2V4aXN0cyhzcywgIm1lbW9yeS5r
bWVtLmxpbWl0X2luX2J5dGVzIik7CisJCWZlYXR1cmVzLm1lbW9yeV9oYXNfc3dhcCA9CisJCQl0
c3RfY2dyb3VwX2V4aXN0cyhzcywgZmVhdHVyZXMubWVtb3J5X21heF9zd2FwX25hbWUpOworCX0K
IH0KIAotdm9pZCB0c3RfY2dyb3VwX21lbV9zZXRfbWF4Ynl0ZXMoY29uc3QgY2hhciAqY2dyb3Vw
X2RpciwgbG9uZyBtZW1zeikKK3N0YXRpYyB2b2lkIHRzdF9jZ3JvdXBfY29weV9jcHVzZXQoc3Ry
dWN0IHRzdF9jZ3JvdXBfcm9vdCAqdCkKIHsKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBf
VjEpCi0JCXRzdF9jZ3JvdXBfc2V0X2tub2IoY2dyb3VwX2RpciwgIm1lbW9yeS5saW1pdF9pbl9i
eXRlcyIsIG1lbXN6KTsKKwljaGFyIGJ1ZltCVUZTSVpdOworCWNvbnN0IGNoYXIgKm1lbXMgPSB0
LT5ub19wcmVmaXggPyAibWVtcyIgOiAiY3B1c2V0Lm1lbXMiOworCWNvbnN0IGNoYXIgKmNwdXMg
PSB0LT5ub19wcmVmaXggPyAiY3B1cyIgOiAiY3B1c2V0LmNwdXMiOworCisKKwlTQUZFX0ZJTEVf
UkVBREFUKHQtPm1udF9kaXIsIG1lbXMsIGJ1Ziwgc2l6ZW9mKGJ1ZikpOworCVNBRkVfRklMRV9Q
UklOVEZBVCh0LT5sdHBfZGlyLCBtZW1zLCAiJXMiLCBidWYpOwogCi0JaWYgKHRzdF9jZ192ZXIg
JiBUU1RfQ0dST1VQX1YyKQotCQl0c3RfY2dyb3VwX3NldF9rbm9iKGNncm91cF9kaXIsICJtZW1v
cnkubWF4IiwgbWVtc3opOworCVNBRkVfRklMRV9SRUFEQVQodC0+bW50X2RpciwgY3B1cywgYnVm
LCBzaXplb2YoYnVmKSk7CisJU0FGRV9GSUxFX1BSSU5URkFUKHQtPmx0cF9kaXIsIGNwdXMsICIl
cyIsIGJ1Zik7CiB9CiAKLWludCB0c3RfY2dyb3VwX21lbV9zd2FwYWNjdF9lbmFibGVkKGNvbnN0
IGNoYXIgKmNncm91cF9kaXIpCisvKiBFbnN1cmUgdGhlIHNwZWNpZmllZCBjb250cm9sbGVyIGlz
IGF2YWlsYWJsZSBhbmQgY29udGFpbnMgdGhlIExUUCBncm91cAorICoKKyAqIEZpcnN0IHdlIGNo
ZWNrIGlmIHRoZSBzcGVjaWZpZWQgY29udHJvbGxlciBoYXMgYSBrbm93biBtb3VudCBwb2ludCwK
KyAqIGlmIG5vdCB0aGVuIHdlIHNjYW4gdGhlIHN5c3RlbS4gSWYgd2UgZmluZCBpdCB0aGVuIHdl
IGdvdG8gZW5zdXJpbmcKKyAqIHRoZSBMVFAgZ3JvdXAgZXhpc3RzIGluIHRoZSBoaWVyYXJjaHkg
dGhlIGNvbnRyb2xsZXIgaXMgdXNpbmcuCisgKgorICogSWYgd2UgY2FuJ3QgZmluZCB0aGUgY29u
dHJvbGxlciwgdGhlbiB3ZSB0cnkgdG8gY3JlYXRlIGl0LiBGaXJzdCB3ZQorICogY2hlY2sgaWYg
dGhlIFYyIGhpZXJhcmNoeS90cmVlIGlzIG1vdW50ZWQuIElmIGl0IGlzbid0IHRoZW4gd2UgdHJ5
CisgKiBtb3VudGluZyBpdCBhbmQgbG9vayBmb3IgdGhlIGNvbnRyb2xsZXIuIElmIGl0IGlzIGFs
cmVhZHkgbW91bnRlZAorICogdGhlbiB3ZSBrbm93IHRoZSBjb250cm9sbGVyIGlzIG5vdCBhdmFp
bGFibGUgb24gVjIgb24gdGhpcyBzeXN0ZW0uCisgKgorICogSWYgd2UgY2FuJ3QgbW91bnQgVjIg
b3IgdGhlIGNvbnRyb2xsZXIgaXMgbm90IG9uIFYyLCB0aGVuIHdlIHRyeQorICogbW91bnRpbmcg
aXQgb24gaXRzIG93biBWMSB0cmVlLgorICoKKyAqIE9uY2Ugd2UgaGF2ZSBtb3VudGVkIHRoZSBj
b250cm9sbGVyIHNvbWVob3csIHdlIGNyZWF0ZSBoaWVyYXJjaHkgb2YKKyAqIGNncm91cHMuIElm
IHdlIGFyZSBvbiBWMiB3ZSBmaXJzdCBuZWVkIHRvIGVuYWJsZSB0aGUgY29udHJvbGxlciBmb3IK
KyAqIGFsbCBzdWJ0cmVlcyBpbiByb290LiBUaGVuIHdlIGNyZWF0ZSB0aGUgZm9sbG93aW5nIGhp
ZXJhcmNoeS4KKyAqCisgKiBsdHAgLT4gdGVzdF88cGlkPgorICoKKyAqIEhhdmluZyBhIGNncm91
cCBwZXIgdGVzdCBhbGxvd3MgdGVzdHMgdG8gYmUgcnVuIGluIHBhcmFsbGVsLiBUaGUKKyAqIExU
UCBncm91cCBjb3VsZCBhbGxvdyBmb3IgdGVzdHMgdG8gcnVuIHdpdGggbGVzcyBwcml2aWxlZ2Vz
IGlmIGl0CisgKiBpcyBwcmUtc2V0dXAgZm9yIHVzLgorICoKKyAqIElmIHdlIGFyZSB1c2luZyBW
MSBjcHVzZXQgdGhlbiB3ZSBjb3B5IHRoZSBhdmFpbGFibGUgbWVtcyBhbmQgY3B1cworICogZnJv
bSByb290IHRvIHRoZSBsdHAgZ3JvdXAgYW5kIHNldCBjbG9uZV9jaGlsZHJlbiBvbiB0aGUgbHRw
IGdyb3VwCisgKiB0byBkaXN0cmlidXRlIHRoZXNlIHNldHRpbmdzIHRvIHRoZSB0ZXN0IGNncm91
cHMuIFRoaXMgbWVhbnMgdGhlCisgKiB0ZXN0IGF1dGhvciBkb2VzIG5vdCBoYXZlIHRvIGNvcHkg
dGhlc2Ugc2V0dGluZ3MgYmVmb3JlIHVzaW5nIHRoZQorICogY3B1c2V0LgorICoKKyAqLwordm9p
ZCB0c3RfY2dyb3VwX3JlcXVpcmUoZW51bSB0c3RfY2dyb3VwX2N0cmwgdHlwZSwKKwkJCWNvbnN0
IHN0cnVjdCB0c3RfY2dyb3VwX29wdHMgKm9wdGlvbnMpCiB7Ci0JY2hhciAqY2dyb3VwX25ld19k
aXI7Ci0JY2hhciBrbm9iX3BhdGhbUEFUSF9NQVhdOworCXN0cnVjdCB0c3RfY2dyb3VwX3NzICpz
cyA9IHRzdF9jZ3JvdXBfZ2V0X3NzKHR5cGUpOworCXN0cnVjdCB0c3RfY2dyb3VwX3Jvb3QgKnQ7
CisJY2hhciBwYXRoW1BBVEhfTUFYXTsKIAotCWNncm91cF9uZXdfZGlyID0gdHN0X2Nncm91cF9n
ZXRfcGF0aChjZ3JvdXBfZGlyKTsKKwlpZiAoIW9wdGlvbnMpCisJCW9wdGlvbnMgPSAmZGVmYXVs
dF9vcHRzOwogCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKSB7Ci0JCXNwcmludGYo
a25vYl9wYXRoLCAiJXMvJXMiLAotCQkJCWNncm91cF9uZXdfZGlyLCAiL21lbW9yeS5tZW1zdy5s
aW1pdF9pbl9ieXRlcyIpOworCWlmIChzcy0+dHJlZSkKKwkJZ290byBsdHBkaXI7CiAKLQkJaWYg
KChhY2Nlc3Moa25vYl9wYXRoLCBGX09LKSA9PSAtMSkpIHsKLQkJCWlmIChlcnJubyA9PSBFTk9F
TlQpCi0JCQkJdHN0X3JlcyhUQ09ORiwgIm1lbWNnIHN3YXAgYWNjb3VudGluZyBpcyBkaXNhYmxl
ZCIpOwotCQkJZWxzZQotCQkJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJmYWlsZWQgdG8gYWNj
ZXNzICVzIiwga25vYl9wYXRoKTsKLQkJfSBlbHNlIHsKLQkJCXJldHVybiAxOwotCQl9CisJdHN0
X2Nncm91cF9zY2FuKCk7CisKKwlpZiAoc3MtPnRyZWUpCisJCWdvdG8gbHRwZGlyOworCisJaWYg
KCF0c3RfY2dyb3VwX3YyX21vdW50ZWQoKSAmJiAhb3B0aW9ucy0+b25seV9tb3VudF92MSkKKwkJ
dHN0X2Nncm91cF9tb3VudF92MigpOworCisJaWYgKHNzLT50cmVlKQorCQlnb3RvIGx0cGRpcjsK
KworCXRzdF9jZ3JvdXBfbW91bnRfdjEodHlwZSk7CisKKwlpZiAoIXNzLT50cmVlKSB7CisJCXRz
dF9icmsoVENPTkYsCisJCQkiJXMgY29udHJvbGxlciByZXF1aXJlZCwgYnV0IG5vdCBhdmFpbGFi
bGUiLCBzcy0+bmFtZSk7CiAJfQogCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YyKSB7
Ci0JCXNwcmludGYoa25vYl9wYXRoLCAiJXMvJXMiLAotCQkJCWNncm91cF9uZXdfZGlyLCAiL21l
bW9yeS5zd2FwLm1heCIpOworbHRwZGlyOgorCXQgPSBzcy0+dHJlZTsKIAotCQlpZiAoKGFjY2Vz
cyhrbm9iX3BhdGgsIEZfT0spID09IC0xKSkgewotCQkJaWYgKGVycm5vID09IEVOT0VOVCkKLQkJ
CQl0c3RfcmVzKFRDT05GLCAibWVtY2cgc3dhcCBhY2NvdW50aW5nIGlzIGRpc2FibGVkIik7Ci0J
CQllbHNlCi0JCQkJdHN0X2JyayhUQlJPSyB8IFRFUlJOTywgImZhaWxlZCB0byBhY2Nlc3MgJXMi
LCBrbm9iX3BhdGgpOwotCQl9IGVsc2UgewotCQkJcmV0dXJuIDE7Ci0JCX0KKwlpZiAodHN0X2Nn
cm91cF9zc19vbl92MihzcykpIHsKKwkJdHN0X2ZpbGVfcHJpbnRmYXQodC0+bW50X2RpciwgImNn
cm91cC5zdWJ0cmVlX2NvbnRyb2wiLAorCQkJCSAgIislcyIsIHNzLT5uYW1lKTsKIAl9CiAKLQly
ZXR1cm4gMDsKKwlzcHJpbnRmKHBhdGgsICIlcy8lcyIsIHQtPnBhdGgsIGx0cF9jZ3JvdXBfZGly
KTsKKworCWlmICghbWtkaXIocGF0aCwgMDc3NykpIHsKKwkJdC0+d2VfY3JlYXRlZF9sdHBfZGly
ID0gMTsKKwkJZ290byBkcmFpbmRpcjsKKwl9CisKKwlpZiAoZXJybm8gPT0gRUVYSVNUKQorCQln
b3RvIGRyYWluZGlyOworCisJaWYgKGVycm5vID09IEVBQ0NFUykgeworCQl0c3RfYnJrKFRDT05G
IHwgVEVSUk5PLAorCQkJIkxhY2sgcGVybWlzc2lvbiB0byBtYWtlICVzOyBwcmVtYWtlIGl0IG9y
IHJ1biBhcyByb290IiwKKwkJCXBhdGgpOworCX0KKworCXRzdF9icmsoVEJST0sgfCBURVJSTk8s
ICJta2RpciglcywgMDc3NykiLCBwYXRoKTsKKworZHJhaW5kaXI6CisJaWYgKCF0LT5sdHBfZGly
KQorCQl0LT5sdHBfZGlyID0gU0FGRV9PUEVOKHBhdGgsIE9fUEFUSCB8IE9fRElSRUNUT1JZKTsK
KworCWlmICh0c3RfY2dyb3VwX3NzX29uX3YyKHNzKSkgeworCQlTQUZFX0ZJTEVfUFJJTlRGQVQo
dC0+bHRwX2RpciwgImNncm91cC5zdWJ0cmVlX2NvbnRyb2wiLAorCQkJCSAgICIrJXMiLCBzcy0+
bmFtZSk7CisJfSBlbHNlIHsKKwkJU0FGRV9GSUxFX1BSSU5URkFUKHQtPmx0cF9kaXIsICJjZ3Jv
dXAuY2xvbmVfY2hpbGRyZW4iLAorCQkJCSAgICIlZCIsIDEpOworCisJCWlmICh0eXBlID09IFRT
VF9DR1JPVVBfQ1BVU0VUKQorCQkJdHN0X2Nncm91cF9jb3B5X2NwdXNldCh0KTsKKwl9CisKKwlz
cHJpbnRmKHBhdGgsICIlcy8lcy8lcyIsCisJCXQtPnBhdGgsIGx0cF9jZ3JvdXBfZGlyLCBsdHBf
Y2dyb3VwX2RyYWluX2Rpcik7CisKKwlpZiAoIW1rZGlyKHBhdGgsIDA3NzcpIHx8IGVycm5vID09
IEVFWElTVCkKKwkJZ290byB0ZXN0ZGlyOworCisJaWYgKGVycm5vID09IEVBQ0NFUykgeworCQl0
c3RfYnJrKFRDT05GIHwgVEVSUk5PLAorCQkJIkxhY2sgcGVybWlzc2lvbiB0byBtYWtlICVzOyBn
cmFudCBhY2Nlc3Mgb3IgcnVuIGFzIHJvb3QiLAorCQkJcGF0aCk7CisJfQorCisJdHN0X2JyayhU
QlJPSyB8IFRFUlJOTywgIm1rZGlyKCVzLCAwNzc3KSIsIHBhdGgpOworCit0ZXN0ZGlyOgorCWlm
ICghdC0+ZHJhaW5fZGlyKQorCQl0LT5kcmFpbl9kaXIgPSBTQUZFX09QRU4ocGF0aCwgT19QQVRI
IHwgT19ESVJFQ1RPUlkpOworCisJaWYgKCF0ZXN0X2Nncm91cF9kaXJbMF0pCisJCXNwcmludGYo
dGVzdF9jZ3JvdXBfZGlyLCAidGVzdC0lZCIsIGdldHBpZCgpKTsKKworCXNwcmludGYocGF0aCwg
IiVzLyVzLyVzIiwKKwkJc3MtPnRyZWUtPnBhdGgsIGx0cF9jZ3JvdXBfZGlyLCB0ZXN0X2Nncm91
cF9kaXIpOworCisJaWYgKCFta2RpcihwYXRoLCAwNzc3KSB8fCBlcnJubyA9PSBFRVhJU1QpCisJ
CWdvdG8gc2NhbjsKKworCWlmIChlcnJubyA9PSBFQUNDRVMpIHsKKwkJdHN0X2JyayhUQ09ORiB8
IFRFUlJOTywKKwkJCSJMYWNrIHBlcm1pc3Npb24gdG8gbWFrZSAlczsgZ3JhbnQgYWNjZXNzIG9y
IHJ1biBhcyByb290IiwKKwkJCXBhdGgpOworCX0KKworCXRzdF9icmsoVEJST0sgfCBURVJSTk8s
ICJta2RpciglcywgMDc3NykiLCBwYXRoKTsKKworc2NhbjoKKwlpZiAoIXQtPnRzdF9kaXIpCisJ
CXQtPnRzdF9kaXIgPSBTQUZFX09QRU4ocGF0aCwgT19QQVRIIHwgT19ESVJFQ1RPUlkpOworCisJ
dHN0X2Nncm91cF9zY2FuX2ZlYXR1cmVzKHR5cGUpOwogfQogCi12b2lkIHRzdF9jZ3JvdXBfbWVt
X3NldF9tYXhzd2FwKGNvbnN0IGNoYXIgKmNncm91cF9kaXIsIGxvbmcgbWVtc3opCitzdGF0aWMg
dm9pZCB0c3RfY2dyb3VwX2RyYWluKGVudW0gdHN0X2Nncm91cF92ZXIgdmVyLCBpbnQgc291cmNl
LCBpbnQgZGVzdCkKIHsKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjEpCi0JCXRzdF9j
Z3JvdXBfc2V0X2tub2IoY2dyb3VwX2RpciwgIm1lbW9yeS5tZW1zdy5saW1pdF9pbl9ieXRlcyIs
IG1lbXN6KTsKKwljaGFyIGJ1ZltCVUZTSVpdOworCWNoYXIgKnRvazsKKwljb25zdCBjaGFyICpm
bmFtZSA9IHZlciA9PSBUU1RfQ0dST1VQX1YxID8gInRhc2tzIiA6ICJjZ3JvdXAucHJvY3MiOwor
CWludCBmZCwgcmV0OworCisJU0FGRV9GSUxFX1JFQURBVChzb3VyY2UsIGZuYW1lLCBidWYsIHNp
emVvZihidWYpKTsKKworCWZkID0gU0FGRV9PUEVOQVQoZGVzdCwgZm5hbWUsIE9fV1JPTkxZKTsK
Kwlmb3IgKHRvayA9IHN0cnRvayhidWYsICJcbiIpOyB0b2s7IHRvayA9IHN0cnRvayhOVUxMLCAi
XG4iKSkgeworCQlyZXQgPSBkcHJpbnRmKGZkLCAiJXMiLCB0b2spOworCisJCWlmIChyZXQgPCAo
aW50KXN0cmxlbih0b2spKQorCQkJdHN0X2JyayhUQlJPSyB8IFRFUlJOTywgIkZhaWxlZCB0byBk
cmFpbiAlcyIsIHRvayk7CisJfQorCVNBRkVfQ0xPU0UoZmQpOworfQogCi0JaWYgKHRzdF9jZ192
ZXIgJiBUU1RfQ0dST1VQX1YyKQotCQl0c3RfY2dyb3VwX3NldF9rbm9iKGNncm91cF9kaXIsICJt
ZW1vcnkuc3dhcC5tYXgiLCBtZW1zeik7CitzdGF0aWMgdm9pZCBjbG9zZV9wYXRoX2ZkcyhzdHJ1
Y3QgdHN0X2Nncm91cF9yb290ICp0KQoreworCWlmICh0LT50c3RfZGlyID4gMCkKKwkJU0FGRV9D
TE9TRSh0LT50c3RfZGlyKTsKKwlpZiAodC0+bHRwX2RpciA+IDApCisJCVNBRkVfQ0xPU0UodC0+
bHRwX2Rpcik7CisJaWYgKHQtPmRyYWluX2RpciA+IDApCisJCVNBRkVfQ0xPU0UodC0+ZHJhaW5f
ZGlyKTsKKwlpZiAodC0+bW50X2RpciA+IDApCisJCVNBRkVfQ0xPU0UodC0+bW50X2Rpcik7CiB9
CiAKLXZvaWQgdHN0X2Nncm91cF9jcHVzZXRfcmVhZF9maWxlcyhjb25zdCBjaGFyICpjZ3JvdXBf
ZGlyLCBjb25zdCBjaGFyICpmaWxlbmFtZSwKLQljaGFyICpyZXRidWYsIHNpemVfdCByZXRidWZf
c3opCisvKiBNYXliZSByZW1vdmUgQ0dyb3VwcyB1c2VkIGR1cmluZyB0ZXN0aW5nIGFuZCBjbGVh
ciBvdXIgZGF0YQorICoKKyAqIFRoaXMgd2lsbCBuZXZlciByZW1vdmUgQ0dyb3VwcyB3ZSBkaWQg
bm90IGNyZWF0ZSB0byBhbGxvdyB0ZXN0cyB0bworICogYmUgcnVuIGluIHBhcmFsbGVsIChzZWUg
ZW51bSB0c3RfY2dyb3VwX2NsZWFudXApLgorICoKKyAqIEVhY2ggdGVzdCBwcm9jZXNzIGlzIGdp
dmVuIGl0cyBvd24gdW5pcXVlIENHcm91cC4gVW5sZXNzIHdlIHdhbnQgdG8KKyAqIHN0cmVzcyB0
ZXN0IHRoZSBDR3JvdXAgc3lzdGVtLiBXZSBzaG91bGQgYXQgbGVhc3QgcmVtb3ZlIHRoZXNlCisg
KiB1bmlxdWUgdGVzdCBDR3JvdXBzLgorICoKKyAqIFdlIHByb2JhYmx5IGFsc28gd2FudCB0byBy
ZW1vdmUgdGhlIExUUCBwYXJlbnQgQ0dyb3VwLCBhbHRob3VnaAorICogdGhpcyBtYXkgaGF2ZSBi
ZWVuIGNyZWF0ZWQgYnkgdGhlIHN5c3RlbSBtYW5hZ2VyIG9yIGFub3RoZXIgdGVzdAorICogKHNl
ZSBub3RlcyBvbiBwYXJhbGxlbCB0ZXN0aW5nKS4KKyAqCisgKiBPbiBzeXN0ZW1zIHdpdGggbm8g
aW5pdGlhbCBDR3JvdXAgc2V0dXAgd2UgbWF5IHRyeSB0byBkZXN0cm95IHRoZQorICogQ0dyb3Vw
IHJvb3RzIHdlIG1vdW50ZWQgc28gdGhhdCB0aGV5IGNhbiBiZSByZWNyZWF0ZWQgYnkgYW5vdGhl
cgorICogdGVzdC4gTm90ZSB0aGF0IHN1Y2Nlc3NmdWxseSB1bm1vdW50aW5nIGEgQ0dyb3VwIHJv
b3QgZG9lcyBub3QKKyAqIG5lY2Vzc2FyaWx5IGluZGljYXRlIHRoYXQgaXQgd2FzIGRlc3Ryb3ll
ZC4KKyAqCisgKiBUaGUgbHRwL2RyYWluIENHcm91cCBpcyByZXF1aXJlZCBmb3IgY2xlYW5pbmcg
dXAgdGVzdCBDR3JvdXBzIHdoZW4KKyAqIHdlIGNhbiBub3QgbW92ZSB0aGVtIHRvIHRoZSByb290
IENHcm91cC4gQ0dyb3VwcyBjYW4gb25seSBiZQorICogcmVtb3ZlZCB3aGVuIHRoZXkgaGF2ZSBu
byBtZW1iZXJzIGFuZCBvbmx5IGxlYWYgb3Igcm9vdCBDR3JvdXBzIG1heQorICogaGF2ZSBwcm9j
ZXNzZXMgd2l0aGluIHRoZW0uIEFzIHRlc3QgcHJvY2Vzc2VzIGNyZWF0ZSBhbmQgZGVzdHJveQor
ICogdGhlaXIgb3duIENHcm91cHMgdGhleSBtdXN0IG1vdmUgdGhlbXNlbHZlcyBlaXRoZXIgdG8g
cm9vdCBvcgorICogYW5vdGhlciBsZWFmIENHcm91cC4gU28gd2UgbW92ZSB0aGVtIHRvIGRyYWlu
IHdoaWxlIGRlc3Ryb3lpbmcgdGhlCisgKiB1bmlxdWUgdGVzdCBDR3JvdXAuCisgKgorICogSWYg
d2UgaGF2ZSBhY2Nlc3MgdG8gcm9vdCBhbmQgY3JlYXRlZCB0aGUgTFRQIENHcm91cCB3ZSB0aGVu
IG1vdmUKKyAqIHRoZSB0ZXN0IHByb2Nlc3MgdG8gcm9vdCBhbmQgZGVzdHJveSB0aGUgZHJhaW4g
YW5kIExUUAorICogQ0dyb3Vwcy4gT3RoZXJ3aXNlIHdlIGp1c3QgbGVhdmUgdGhlIHRlc3QgcHJv
Y2VzcyB0byBkaWUgaW4gdGhlCisgKiBkcmFpbiwgbXVjaCBsaWtlIG1hbnkgYSB1bndhbnRlZCB0
ZXJyYXBpbi4KKyAqCisgKiBGaW5hbGx5IHdlIGNsZWFyIGFueSBkYXRhIHdlIGhhdmUgY29sbGVj
dGVkIG9uIENHcm91cHMuIFRoaXMgd2lsbAorICogaGFwcGVuIHJlZ2FyZGxlc3Mgb2Ygd2hldGhl
ciBhbnl0aGluZyB3YXMgcmVtb3ZlZC4KKyAqLwordm9pZCB0c3RfY2dyb3VwX2NsZWFudXAoY29u
c3Qgc3RydWN0IHRzdF9jZ3JvdXBfb3B0cyAqb3B0cykKIHsKLQlpbnQgZmQ7Ci0JY2hhciAqY2dy
b3VwX25ld19kaXI7Ci0JY2hhciBrbm9iX3BhdGhbUEFUSF9NQVhdOwotCi0JY2dyb3VwX25ld19k
aXIgPSB0c3RfY2dyb3VwX2dldF9wYXRoKGNncm91cF9kaXIpOwotCi0JLyoKLQkgKiB0cnkgZWl0
aGVyICcvZGV2L2NwdXNldC9YWFhYJyBvciAnL2Rldi9jcHVzZXQvY3B1c2V0LlhYWFgnCi0JICog
cGxlYXNlIHNlZSBEb2N1bWVudGF0aW9uL2Nncm91cHMvY3B1c2V0cy50eHQgZnJvbSBrZXJuZWwg
c3JjCi0JICogZm9yIGRldGFpbHMKLQkgKi8KLQlzcHJpbnRmKGtub2JfcGF0aCwgIiVzLyVzIiwg
Y2dyb3VwX25ld19kaXIsIGZpbGVuYW1lKTsKLQlmZCA9IG9wZW4oa25vYl9wYXRoLCBPX1JET05M
WSk7Ci0JaWYgKGZkID09IC0xKSB7Ci0JCWlmIChlcnJubyA9PSBFTk9FTlQpIHsKLQkJCXNwcmlu
dGYoa25vYl9wYXRoLCAiJXMvY3B1c2V0LiVzIiwKLQkJCQkJY2dyb3VwX25ld19kaXIsIGZpbGVu
YW1lKTsKLQkJCWZkID0gU0FGRV9PUEVOKGtub2JfcGF0aCwgT19SRE9OTFkpOwotCQl9IGVsc2UK
LQkJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJvcGVuICVzIiwga25vYl9wYXRoKTsKKwlzdHJ1
Y3QgdHN0X2Nncm91cF9yb290ICp0OworCXN0cnVjdCB0c3RfY2dyb3VwX3NzICpzczsKKworCWlm
ICghb3B0cykKKwkJb3B0cyA9ICZkZWZhdWx0X29wdHM7CisKKwlpZiAob3B0cy0+Y2xlYW51cCA9
PSBUU1RfQ0dST1VQX0NMRUFOVVBfTk9ORSkKKwkJZ290byBjbGVhcl9kYXRhOworCisJdHN0X2Zv
cl9lYWNoX3Jvb3QodCkgeworCQlpZiAoIXQtPnRzdF9kaXIpCisJCQljb250aW51ZTsKKworCQl0
c3RfY2dyb3VwX2RyYWluKHQtPnZlciwgdC0+dHN0X2RpciwgdC0+ZHJhaW5fZGlyKTsKKwkJU0FG
RV9VTkxJTktBVCh0LT5sdHBfZGlyLCB0ZXN0X2Nncm91cF9kaXIsIEFUX1JFTU9WRURJUik7CiAJ
fQogCi0JbWVtc2V0KHJldGJ1ZiwgMCwgcmV0YnVmX3N6KTsKLQlpZiAocmVhZChmZCwgcmV0YnVm
LCByZXRidWZfc3opIDwgMCkKLQkJdHN0X2JyayhUQlJPSyB8IFRFUlJOTywgInJlYWQgJXMiLCBr
bm9iX3BhdGgpOworCWlmIChvcHRzLT5jbGVhbnVwID09IFRTVF9DR1JPVVBfQ0xFQU5VUF9URVNU
KQorCQlnb3RvIGNsZWFyX2RhdGE7CiAKLQljbG9zZShmZCk7Ci19CisJdHN0X2Zvcl9lYWNoX3Jv
b3QodCkgeworCQlpZiAoIXQtPndlX2NyZWF0ZWRfbHRwX2RpcikKKwkJCWNvbnRpbnVlOwogCi12
b2lkIHRzdF9jZ3JvdXBfY3B1c2V0X3dyaXRlX2ZpbGVzKGNvbnN0IGNoYXIgKmNncm91cF9kaXIs
IGNvbnN0IGNoYXIgKmZpbGVuYW1lLCBjb25zdCBjaGFyICpidWYpCi17Ci0JaW50IGZkOwotCWNo
YXIgKmNncm91cF9uZXdfZGlyOwotCWNoYXIga25vYl9wYXRoW1BBVEhfTUFYXTsKLQotCWNncm91
cF9uZXdfZGlyID0gdHN0X2Nncm91cF9nZXRfcGF0aChjZ3JvdXBfZGlyKTsKLQotCS8qCi0JICog
dHJ5IGVpdGhlciAnL2Rldi9jcHVzZXQvWFhYWCcgb3IgJy9kZXYvY3B1c2V0L2NwdXNldC5YWFhY
JwotCSAqIHBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi9jZ3JvdXBzL2NwdXNldHMudHh0IGZyb20g
a2VybmVsIHNyYwotCSAqIGZvciBkZXRhaWxzCi0JICovCi0Jc3ByaW50Zihrbm9iX3BhdGgsICIl
cy8lcyIsIGNncm91cF9uZXdfZGlyLCBmaWxlbmFtZSk7Ci0JZmQgPSBvcGVuKGtub2JfcGF0aCwg
T19XUk9OTFkpOwotCWlmIChmZCA9PSAtMSkgewotCQlpZiAoZXJybm8gPT0gRU5PRU5UKSB7Ci0J
CQlzcHJpbnRmKGtub2JfcGF0aCwgIiVzL2NwdXNldC4lcyIsIGNncm91cF9uZXdfZGlyLCBmaWxl
bmFtZSk7Ci0JCQlmZCA9IFNBRkVfT1BFTihrbm9iX3BhdGgsIE9fV1JPTkxZKTsKLQkJfSBlbHNl
Ci0JCQl0c3RfYnJrKFRCUk9LIHwgVEVSUk5PLCAib3BlbiAlcyIsIGtub2JfcGF0aCk7CisJCXRz
dF9jZ3JvdXBfZHJhaW4odC0+dmVyLCB0LT5kcmFpbl9kaXIsIHQtPm1udF9kaXIpOworCQlTQUZF
X1VOTElOS0FUKHQtPmx0cF9kaXIsIGx0cF9jZ3JvdXBfZHJhaW5fZGlyLCBBVF9SRU1PVkVESVIp
OworCQlTQUZFX1VOTElOS0FUKHQtPm1udF9kaXIsIGx0cF9jZ3JvdXBfZGlyLCBBVF9SRU1PVkVE
SVIpOworCX0KKworCWlmIChvcHRzLT5jbGVhbnVwID09IFRTVF9DR1JPVVBfQ0xFQU5VUF9MVFAp
CisJCWdvdG8gY2xlYXJfZGF0YTsKKworCXRzdF9mb3JfZWFjaF9jc3Moc3MpIHsKKwkJaWYgKCF0
c3RfY2dyb3VwX3NzX29uX3YyKHNzKSB8fCAhc3MtPnRyZWUtPndlX21vdW50ZWRfaXQpCisJCQlj
b250aW51ZTsKKworCQlTQUZFX0ZJTEVfUFJJTlRGQVQoc3MtPnRyZWUtPm1udF9kaXIsICJjZ3Jv
dXAuc3VidHJlZV9jb250cm9sIiwKKwkJCQkgICAiLSVzIiwgc3MtPm5hbWUpOworCX0KKworCXRz
dF9mb3JfZWFjaF9yb290KHQpCisJCWNsb3NlX3BhdGhfZmRzKHQpOworCisJdHN0X2Zvcl9lYWNo
X3Jvb3QodCkgeworCQlpZiAoIXQtPndlX21vdW50ZWRfaXQpCisJCQljb250aW51ZTsKKworCQkv
KiBUaGlzIHByb2JhYmx5IGRvZXMgbm90IHJlc3VsdCBpbiB0aGUgQ0dyb3VwIHJvb3QKKwkJICog
YmVpbmcgZGVzdHJveWVkICovCisJCWlmICh1bW91bnQyKHQtPnBhdGgsIE1OVF9ERVRBQ0gpKQor
CQkJY29udGludWU7CisKKwkJU0FGRV9STURJUih0LT5wYXRoKTsKIAl9CiAKLQlTQUZFX1dSSVRF
KDEsIGZkLCBidWYsIHN0cmxlbihidWYpKTsKK2NsZWFyX2RhdGE6CisJdHN0X2Zvcl9lYWNoX2Nz
cyhzcykKKwkJbWVtc2V0KHNzLCAwLCBzaXplb2YoKnNzKSk7CisKKwl0c3RfZm9yX2VhY2hfcm9v
dCh0KSB7CisJCWNsb3NlX3BhdGhfZmRzKHQpOworCQltZW1zZXQodCwgMCwgc2l6ZW9mKCp0KSk7
CisJfQogCi0JY2xvc2UoZmQpOworCW1lbXNldCgmZmVhdHVyZXMsIDAsIHNpemVvZihmZWF0dXJl
cykpOwogfQotLSAKMi4yOS4yCgoKLS0gCk1haWxpbmcgbGlzdCBpbmZvOiBodHRwczovL2xpc3Rz
LmxpbnV4Lml0L2xpc3RpbmZvL2x0cAo=
