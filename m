Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [213.254.12.146])
	by mail.lfdr.de (Postfix) with ESMTPS id 6EFA33C950
	for <lists+linux-ltp@lfdr.de>; Tue, 11 Jun 2019 12:48:02 +0200 (CEST)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id 450EE3EB0E9
	for <lists+linux-ltp@lfdr.de>; Tue, 11 Jun 2019 12:48:02 +0200 (CEST)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-6.smtp.seeweb.it (in-6.smtp.seeweb.it [217.194.8.6])
 by picard.linux.it (Postfix) with ESMTP id 2E9733EB0EE
 for <ltp@lists.linux.it>; Tue, 11 Jun 2019 12:48:00 +0200 (CEST)
Received: from mx1.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by in-6.smtp.seeweb.it (Postfix) with ESMTPS id A02FB14016B5
 for <ltp@lists.linux.it>; Tue, 11 Jun 2019 12:47:54 +0200 (CEST)
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id 51A7FAE52
 for <ltp@lists.linux.it>; Tue, 11 Jun 2019 10:47:54 +0000 (UTC)
From: Christian Amann <camann@suse.com>
To: ltp@lists.linux.it
Date: Tue, 11 Jun 2019 12:47:46 +0200
Message-Id: <20190611104747.14689-1-camann@suse.com>
X-Mailer: git-send-email 2.16.4
X-Virus-Scanned: clamav-milter 0.99.2 at in-6.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=0.0 required=7.0 tests=SPF_HELO_NONE,SPF_PASS
 autolearn=disabled version=3.4.0
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on in-6.smtp.seeweb.it
Subject: [LTP] [PATCH v1 1/2] syscalls/lstat{01,03} rewrote testcase
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

TWVyZ2VkIGxzdGF0MDEgYW5kIGxzdGF0MDM6CglFeHBhbmRlZCBsc3RhdDAxIHRlc3RjYXNlIHRv
IGFsc28gaW5jbHVkZSBldmVyeXRoaW5nCglsc3RhdDAzIHdhcyB0ZXN0aW5nIGZvci4KUmV3cm90
ZSB0ZXN0Y2FzZToKCUNsZWFuZWQgdXAgYW5kIHBvcnRlZCB0byBuZXcgbGlicmFyeS4KClNpZ25l
ZC1vZmYtYnk6IENocmlzdGlhbiBBbWFubiA8Y2FtYW5uQHN1c2UuY29tPgotLS0KIHJ1bnRlc3Qv
c3lzY2FsbHMgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgMiAtCiB0ZXN0Y2FzZXMva2Vy
bmVsL3N5c2NhbGxzL2xzdGF0Ly5naXRpZ25vcmUgfCAgIDIgLQogdGVzdGNhc2VzL2tlcm5lbC9z
eXNjYWxscy9sc3RhdC9sc3RhdDAxLmMgIHwgMjQzICsrKysrKy0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tCiB0ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL2xzdGF0L2xzdGF0MDMuYyAgfCAxMjEgLS0t
LS0tLS0tLS0tLS0KIDQgZmlsZXMgY2hhbmdlZCwgNDYgaW5zZXJ0aW9ucygrKSwgMzIyIGRlbGV0
aW9ucygtKQogZGVsZXRlIG1vZGUgMTAwNjQ0IHRlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0
YXQvbHN0YXQwMy5jCgpkaWZmIC0tZ2l0IGEvcnVudGVzdC9zeXNjYWxscyBiL3J1bnRlc3Qvc3lz
Y2FsbHMKaW5kZXggNzAyZDZhOGM3Li44NzkyOTBiY2UgMTAwNjQ0Ci0tLSBhL3J1bnRlc3Qvc3lz
Y2FsbHMKKysrIGIvcnVudGVzdC9zeXNjYWxscwpAQCAtNjIxLDggKzYyMSw2IEBAIGxzdGF0MDEg
bHN0YXQwMQogbHN0YXQwMV82NCBsc3RhdDAxXzY0CiBsc3RhdDAyIGxzdGF0MDIKIGxzdGF0MDJf
NjQgbHN0YXQwMl82NAotbHN0YXQwMyBsc3RhdDAzCi1sc3RhdDAzXzY0IGxzdGF0MDNfNjQKIAog
bWFsbG9wdDAxIG1hbGxvcHQwMQogCmRpZmYgLS1naXQgYS90ZXN0Y2FzZXMva2VybmVsL3N5c2Nh
bGxzL2xzdGF0Ly5naXRpZ25vcmUgYi90ZXN0Y2FzZXMva2VybmVsL3N5c2NhbGxzL2xzdGF0Ly5n
aXRpZ25vcmUKaW5kZXggNzJjYmE4NzFmLi5hNDk3YTQ0NWYgMTAwNjQ0Ci0tLSBhL3Rlc3RjYXNl
cy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvLmdpdGlnbm9yZQorKysgYi90ZXN0Y2FzZXMva2VybmVs
L3N5c2NhbGxzL2xzdGF0Ly5naXRpZ25vcmUKQEAgLTIsNSArMiwzIEBACiAvbHN0YXQwMV82NAog
L2xzdGF0MDIKIC9sc3RhdDAyXzY0Ci0vbHN0YXQwMwotL2xzdGF0MDNfNjQKZGlmZiAtLWdpdCBh
L3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvbHN0YXQwMS5jIGIvdGVzdGNhc2VzL2tl
cm5lbC9zeXNjYWxscy9sc3RhdC9sc3RhdDAxLmMKaW5kZXggNDVhNjE3NmM1Li5jOTYzNjUwNjQg
MTAwNjQ0Ci0tLSBhL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvbHN0YXQwMS5jCisr
KyBiL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvbHN0YXQwMS5jCkBAIC0xLDIxOCAr
MSw2NyBAQAorLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAKIC8qCiAgKiBDb3B5
cmlnaHQgKGMpIDIwMDAgU2lsaWNvbiBHcmFwaGljcywgSW5jLiAgQWxsIFJpZ2h0cyBSZXNlcnZl
ZC4KKyAqICBBdXRob3JzOglXaWxsaWFtIFJvc2tlLCBEYXZlIEZlbm5lcgogICoKLSAqIFRoaXMg
cHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3Ig
bW9kaWZ5IGl0Ci0gKiB1bmRlciB0aGUgdGVybXMgb2YgdmVyc2lvbiAyIG9mIHRoZSBHTlUgR2Vu
ZXJhbCBQdWJsaWMgTGljZW5zZSBhcwotICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJl
IEZvdW5kYXRpb24uCi0gKgotICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBo
b3BlIHRoYXQgaXQgd291bGQgYmUgdXNlZnVsLCBidXQKLSAqIFdJVEhPVVQgQU5ZIFdBUlJBTlRZ
OyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKLSAqIE1FUkNIQU5UQUJJTElU
WSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4KLSAqCi0gKiBGdXJ0aGVyLCB0
aGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIHdpdGhvdXQgYW55IHdhcnJhbnR5IHRoYXQgaXQg
aXMKLSAqIGZyZWUgb2YgdGhlIHJpZ2h0ZnVsIGNsYWltIG9mIGFueSB0aGlyZCBwZXJzb24gcmVn
YXJkaW5nIGluZnJpbmdlbWVudAotICogb3IgdGhlIGxpa2UuICBBbnkgbGljZW5zZSBwcm92aWRl
ZCBoZXJlaW4sIHdoZXRoZXIgaW1wbGllZCBvcgotICogb3RoZXJ3aXNlLCBhcHBsaWVzIG9ubHkg
dG8gdGhpcyBzb2Z0d2FyZSBmaWxlLiAgUGF0ZW50IGxpY2Vuc2VzLCBpZgotICogYW55LCBwcm92
aWRlZCBoZXJlaW4gZG8gbm90IGFwcGx5IHRvIGNvbWJpbmF0aW9ucyBvZiB0aGlzIHByb2dyYW0g
d2l0aAotICogb3RoZXIgc29mdHdhcmUsIG9yIGFueSBvdGhlciBwcm9kdWN0IHdoYXRzb2V2ZXIu
Ci0gKgotICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVy
YWwgUHVibGljIExpY2Vuc2UgYWxvbmcKLSAqIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHdy
aXRlIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIEluYy4sCi0gKiA1MSBGcmFua2xpbiBT
dHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBLgotICoKLSAqIENv
bnRhY3QgaW5mb3JtYXRpb246IFNpbGljb24gR3JhcGhpY3MsIEluYy4sIDE2MDAgQW1waGl0aGVh
dHJlIFBrd3ksCi0gKiBNb3VudGFpbiBWaWV3LCBDQSAgOTQwNDMsIG9yOgotICoKLSAqIGh0dHA6
Ly93d3cuc2dpLmNvbQotICoKLSAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0
aGlzIG5vdGljZSwgc2VlOgotICoKLSAqIGh0dHA6Ly9vc3Muc2dpLmNvbS9wcm9qZWN0cy9HZW5J
bmZvL05vdGljZUV4cGxhbi8KLSAqCisgKiAgMDYvMjAxOSBQb3J0ZWQgdG8gbmV3IGxpYnJhcnk6
CisgKgkJQ2hyaXN0aWFuIEFtYW5uIDxjYW1hbm5Ac3VzZS5jb20+CiAgKi8KLS8qICRJZDogbHN0
YXQwMS5jLHYgMS43IDIwMDkvMTAvMjYgMTQ6NTU6NDggc3VicmF0YV9tb2RhayBFeHAgJCAqLwot
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqCi0gKiAgICBPUyBUZXN0IC0gU2lsaWNvbiBHcmFwaGljcywgSW5jLgotICoKLSAqICAg
IFRFU1QgSURFTlRJRklFUgk6IGxzdGF0MDEKLSAqCi0gKiAgICBFWEVDVVRFRCBCWQk6IGFueW9u
ZQotICoKLSAqICAgIFRFU1QgVElUTEUJOiBCYXNpYyB0ZXN0IGZvciBsc3RhdCgyKQotICoKLSAq
ICAgIFBBUkVOVCBET0NVTUVOVAk6IHVzY3RwbDAxCi0gKgotICogICAgVEVTVCBDQVNFIFRPVEFM
CTogMQotICoKLSAqICAgIFdBTEwgQ0xPQ0sgVElNRQk6IDEKLSAqCi0gKiAgICBDUFUgVFlQRVMJ
CTogQUxMCi0gKgotICogICAgQVVUSE9SCQk6IFdpbGxpYW0gUm9za2UKLSAqCi0gKiAgICBDTy1Q
SUxPVAkJOiBEYXZlIEZlbm5lcgotICoKLSAqICAgIERBVEUgU1RBUlRFRAk6IDAzLzMwLzkyCi0g
KgotICogICAgSU5JVElBTCBSRUxFQVNFCTogVU5JQ09TIDcuMAotICoKLSAqICAgIFRFU1QgQ0FT
RVMKLSAqCi0gKiAJMS4pIGxzdGF0KDIpIHJldHVybnMuLi4oU2VlIERlc2NyaXB0aW9uKQotICoK
LSAqICAgIElOUFVUIFNQRUNJRklDQVRJT05TCi0gKiAJVGhlIHN0YW5kYXJkIG9wdGlvbnMgZm9y
IHN5c3RlbSBjYWxsIHRlc3RzIGFyZSBhY2NlcHRlZC4KLSAqCShTZWUgdGhlIHBhcnNlX29wdHMo
MykgbWFuIHBhZ2UpLgotICoKLSAqICAgIE9VVFBVVCBTUEVDSUZJQ0FUSU9OUwotICokCi0gKiAg
ICBEVVJBVElPTgotICogCVRlcm1pbmF0ZXMgLSB3aXRoIGZyZXF1ZW5jeSBhbmQgaW5maW5pdGUg
bW9kZXMuCi0gKgotICogICAgU0lHTkFMUwotICogCVVzZXMgU0lHVVNSMSB0byBwYXVzZSBiZWZv
cmUgdGVzdCBpZiBvcHRpb24gc2V0LgotICogCShTZWUgdGhlIHBhcnNlX29wdHMoMykgbWFuIHBh
Z2UpLgotICoKLSAqICAgIFJFU09VUkNFUwotICogCU5vbmUKLSAqCi0gKiAgICBFTlZJUk9OTUVO
VEFMIE5FRURTCi0gKiAgICAgIE5vIHJ1bi10aW1lIGVudmlyb25tZW50YWwgbmVlZHMuCi0gKgot
ICogICAgU1BFQ0lBTCBQUk9DRURVUkFMIFJFUVVJUkVNRU5UUwotICogCU5vbmUKLSAqCi0gKiAg
ICBJTlRFUkNBU0UgREVQRU5ERU5DSUVTCi0gKiAJTm9uZQotICoKLSAqICAgIERFVEFJTEVEIERF
U0NSSVBUSU9OCi0gKglUaGlzIGlzIGEgUGhhc2UgSSB0ZXN0IGZvciB0aGUgbHN0YXQoMikgc3lz
dGVtIGNhbGwuICBJdCBpcyBpbnRlbmRlZAotICoJdG8gcHJvdmlkZSBhIGxpbWl0ZWQgZXhwb3N1
cmUgb2YgdGhlIHN5c3RlbSBjYWxsLCBmb3Igbm93LiAgSXQKLSAqCXNob3VsZC93aWxsIGJlIGV4
dGVuZGVkIHdoZW4gZnVsbCBmdW5jdGlvbmFsIHRlc3RzIGFyZSB3cml0dGVuIGZvcgotICoJbHN0
YXQoMikuCi0gKgotICogCVNldHVwOgotICogCSAgU2V0dXAgc2lnbmFsIGhhbmRsaW5nLgotICoJ
ICBQYXVzZSBmb3IgU0lHVVNSMSBpZiBvcHRpb24gc3BlY2lmaWVkLgotICoKLSAqIAlUZXN0Ogot
ICoJIExvb3AgaWYgdGhlIHByb3BlciBvcHRpb25zIGFyZSBnaXZlbi4KLSAqIAkgIEV4ZWN1dGUg
c3lzdGVtIGNhbGwKLSAqCSAgQ2hlY2sgcmV0dXJuIGNvZGUsIGlmIHN5c3RlbSBjYWxsIGZhaWxl
ZCAocmV0dXJuPS0xKQotICoJCUxvZyB0aGUgZXJybm8gYW5kIElzc3VlIGEgRkFJTCBtZXNzYWdl
LgotICoJICBPdGhlcndpc2UsIElzc3VlIGEgUEFTUyBtZXNzYWdlLgotICoKLSAqIAlDbGVhbnVw
OgotICogCSAgUHJpbnQgZXJybm8gbG9nIGFuZC9vciB0aW1pbmcgc3RhdHMgaWYgb3B0aW9ucyBn
aXZlbgotICoKKy8qCisgKiBCYXNpYyB0ZXN0IGZvciBsc3RhdCgpOgogICoKLSAqIyojKiMqIyoj
KiMqIyojKiMqIyojKiMqIyojKiMqIyojKiMqIyojKiMqIyojKiMqIyojKiMqIyojKiovCisgKiBU
ZXN0cyBpZiBsc3RhdCgpIHdyaXRlcyBjb3JyZWN0IGluZm9ybWF0aW9uIGFib3V0IGEgc3ltbGlu
aworICogaW50byB0aGUgc3RhdCBzdHJ1Y3R1cmUuCisgKi8KIAotI2luY2x1ZGUgPHN5cy90eXBl
cy5oPgotI2luY2x1ZGUgPGZjbnRsLmg+Ci0jaW5jbHVkZSA8c3lzL3N0YXQuaD4KICNpbmNsdWRl
IDxlcnJuby5oPgogI2luY2x1ZGUgPHN0cmluZy5oPgotI2luY2x1ZGUgPHNpZ25hbC5oPgotI2lu
Y2x1ZGUgInRlc3QuaCIKLQotdm9pZCBzZXR1cCgpOwotdm9pZCBjbGVhbnVwKCk7CisjaW5jbHVk
ZSA8dW5pc3RkLmg+CisjaW5jbHVkZSA8c3lzL3N0YXQuaD4KKyNpbmNsdWRlIDxzeXMvdHlwZXMu
aD4KKyNpbmNsdWRlICJ0c3RfdGVzdC5oIgogCi1jaGFyICpUQ0lEID0gImxzdGF0MDEiOwotaW50
IFRTVF9UT1RBTCA9IDE7CisjZGVmaW5lIFRFU1RGSUxFICAgICAgICAidHN0X2ZpbGUiCisjZGVm
aW5lIFRFU1RTWU1MICAgICAgICAidHN0X3N5bWwiCiAKLWNoYXIgZm5hbWVbMjU1XSwgbG5hbWVb
MjU1XSwgc3ltbG5rWzI1NV0sIGJ1ZlsyNTVdOwotaW50IGZkOwotc3RydWN0IHN0YXQgc3RhdHRl
cjsKK3N0YXRpYyB1aWRfdCB1c2VyX2lkOworc3RhdGljIGdpZF90IGdyb3VwX2lkOworc3RhdGlj
IHN0cnVjdCBzdGF0IHN0YXRfYnVmOwogCi1pbnQgbWFpbihpbnQgYWMsIGNoYXIgKiphdikKK3N0
YXRpYyB2b2lkIHJ1bih2b2lkKQogewotCWludCBsYzsKLQotICAgIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAgICAgKiBw
YXJzZSBzdGFuZGFyZCBvcHRpb25zCi0gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLQl0c3RfcGFyc2Vfb3B0cyhhYywg
YXYsIE5VTEwsIE5VTEwpOwotCi0gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICAgICAqIHBlcmZvcm0gZ2xvYmFsIHNl
dHVwIGZvciB0ZXN0Ci0gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KLQlzZXR1cCgpOwotCi0gICAgLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICAg
ICAqIGNoZWNrIGxvb3Bpbmcgc3RhdGUgaWYgLWMgb3B0aW9uIGdpdmVuCi0gICAgICoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
LQlmb3IgKGxjID0gMDsgVEVTVF9MT09QSU5HKGxjKTsgbGMrKykgewotCi0JCXRzdF9jb3VudCA9
IDA7Ci0KLQkJLyoKLQkJICogIENhbGwgbHN0YXQoMikKLQkJICovCi0JCVRFU1QobHN0YXQoc3lt
bG5rLCAmc3RhdHRlcikpOwotCi0JCS8qIGNoZWNrIHJldHVybiBjb2RlICovCi0JCWlmIChURVNU
X1JFVFVSTiA9PSAtMSkgewotCQkJdHN0X3Jlc20oVEZBSUwsCi0JCQkJICJsc3RhdCglcywgJnN0
YXR0ZXIpIEZhaWxlZCwgZXJybm89JWQgOiAlcyIsCi0JCQkJIHN5bWxuaywgVEVTVF9FUlJOTywg
c3RyZXJyb3IoVEVTVF9FUlJOTykpOwotCQl9IGVsc2UgewotCQkJdHN0X3Jlc20oVFBBU1MsCi0J
CQkJICJsc3RhdCglcywgJnN0YXR0ZXIpIHJldHVybmVkICVsZCIsCi0JCQkJIHN5bWxuaywgVEVT
VF9SRVRVUk4pOwotCQl9Ci0KKwlURVNUKGxzdGF0KFRFU1RTWU1MLCAmc3RhdF9idWYpKTsKKwlp
ZiAoVFNUX1JFVCA9PSAtMSkKKwkJdHN0X3JlcyhURkFJTCB8IFRURVJSTk8sICJDYWxsaW5nIGxz
dGF0KCkgZmFpbGVkIik7CisKKwlpZiAoKHN0YXRfYnVmLnN0X21vZGUgJiBTX0lGTVQpICE9IFNf
SUZMTksgfHwKKwkgICAgc3RhdF9idWYuc3RfdWlkICE9IHVzZXJfaWQgfHwKKwkgICAgc3RhdF9i
dWYuc3RfZ2lkICE9IGdyb3VwX2lkIHx8CisJICAgIHN0YXRfYnVmLnN0X3NpemUgIT0gc3RybGVu
KFRFU1RGSUxFKSkgeworCQl0c3RfcmVzKFRGQUlMLAorCQkJImxzdGF0KCkgcmVwb3J0ZWQgaW5j
b3JyZWN0IHZhbHVlcyBmb3IgdGhlIHN5bWxpbmshIik7CisJfSBlbHNlIHsKKwkJdHN0X3JlcyhU
UEFTUywKKwkJCSJsc3RhdCgpIHJlcG9ydGVkIGNvcnJlY3QgdmFsdWVzIGZvciB0aGUgc3ltbGlu
ayEiKTsKIAl9Ci0KLQljbGVhbnVwKCk7Ci0JdHN0X2V4aXQoKTsKIH0KIAotLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
c2V0dXAoKSAtIHBlcmZvcm1zIGFsbCBPTkUgVElNRSBzZXR1cCBmb3IgdGhpcyB0ZXN0LgotICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KLXZvaWQgc2V0dXAodm9pZCkKK3N0YXRpYyB2b2lkIHNldHVwKHZvaWQpCiB7CisJdXNl
cl9pZCAgPSBnZXR1aWQoKTsKKwlncm91cF9pZCA9IGdldGdpZCgpOwogCi0JdHN0X3NpZyhGT1JL
LCBERUZfSEFORExFUiwgY2xlYW51cCk7Ci0KLQlURVNUX1BBVVNFOwotCi0JdHN0X3RtcGRpcigp
OwotCi0Jc3ByaW50ZihmbmFtZSwgInRmaWxlXyVkIiwgZ2V0cGlkKCkpOwotCWlmICgoZmQgPSBv
cGVuKGZuYW1lLCBPX1JEV1IgfCBPX0NSRUFULCAwNzAwKSkgPT0gLTEpIHsKLQkJdHN0X2Jya20o
VEJST0ssIGNsZWFudXAsCi0JCQkgIm9wZW4oJXMsIE9fUkRXUnxPX0NSRUFULDA3MDApIEZhaWxl
ZCwgZXJybm89JWQgOiAlcyIsCi0JCQkgZm5hbWUsIGVycm5vLCBzdHJlcnJvcihlcnJubykpOwot
CX0gZWxzZSBpZiAoY2xvc2UoZmQpID09IC0xKSB7Ci0JCXRzdF9yZXNtKFRXQVJOLCAiY2xvc2Uo
JXMpIEZhaWxlZCwgZXJybm89JWQgOiAlcyIsCi0JCQkgZm5hbWUsIGVycm5vLCBzdHJlcnJvcihl
cnJubykpOwotCX0KLQotCXNwcmludGYoc3ltbG5rLCAibG5maWxlXyVkIiwgZ2V0cGlkKCkpOwot
CWlmIChzeW1saW5rKGZuYW1lLCBzeW1sbmspID09IC0xKSB7Ci0JCXRzdF9yZXNtKFRXQVJOLCAi
c3ltbGluayglcywgJXMpIEZhaWxlZCwgZXJybm89JWQgOiAlcyIsCi0JCQkgZm5hbWUsIHN5bWxu
aywgZXJybm8sIHN0cmVycm9yKGVycm5vKSk7Ci0JfSBlbHNlIGlmIChyZWFkbGluayhzeW1sbmss
IGJ1ZiwgMjU1KSA9PSAtMSkgewotCQl0c3RfcmVzbShUV0FSTiwgInJlYWRsaW5rKCVzLCBidWYs
IDI1NSkgRmFpbGVkLCBlcnJubz0lZCA6ICVzIiwKLQkJCSBzeW1sbmssIGVycm5vLCBzdHJlcnJv
cihlcnJubykpOwotCX0gZWxzZSBpZiAoc3RyY21wKGJ1ZiwgZm5hbWUpICE9IDApIHsKLQkJdHN0
X3Jlc20oVFdBUk4sCi0JCQkgIlNldHVwIEZhaWx1cmUgOiBFeHBlY3RlZCBzeW1ib2xpYyBsaW5r
IGNvbnRlbnRzIG9mICVzIDogQWN0dWFsIGlzICVzIiwKLQkJCSBmbmFtZSwgYnVmKTsKLQl9CisJ
U0FGRV9UT1VDSChURVNURklMRSwgMDY0NCwgTlVMTCk7CisJU0FGRV9TWU1MSU5LKFRFU1RGSUxF
LCBURVNUU1lNTCk7CiB9CiAKLS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIGNsZWFudXAoKSAtIHBlcmZvcm1zIGFsbCBP
TkUgVElNRSBjbGVhbnVwIGZvciB0aGlzIHRlc3QgYXQKLSAqCQljb21wbGV0aW9uIG9yIHByZW1h
dHVyZSBleGl0LgotICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KLXZvaWQgY2xlYW51cCh2b2lkKQorc3RhdGljIHZvaWQgY2xl
YW51cCh2b2lkKQogewotCi0JdHN0X3JtZGlyKCk7Ci0KKwlTQUZFX1VOTElOSyhURVNUU1lNTCk7
CiB9CisKK3N0YXRpYyBzdHJ1Y3QgdHN0X3Rlc3QgdGVzdCA9IHsKKwkudGVzdF9hbGwgPSBydW4s
CisJLnNldHVwID0gc2V0dXAsCisJLmNsZWFudXAgPSBjbGVhbnVwLAorCS5uZWVkc190bXBkaXIg
PSAxLAorfTsKZGlmZiAtLWdpdCBhL3Rlc3RjYXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvbHN0
YXQwMy5jIGIvdGVzdGNhc2VzL2tlcm5lbC9zeXNjYWxscy9sc3RhdC9sc3RhdDAzLmMKZGVsZXRl
ZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IGYyMjI4MTI4My4uMDAwMDAwMDAwCi0tLSBhL3Rlc3Rj
YXNlcy9rZXJuZWwvc3lzY2FsbHMvbHN0YXQvbHN0YXQwMy5jCisrKyAvZGV2L251bGwKQEAgLTEs
MTIxICswLDAgQEAKLS8qCi0gKiBDb3B5cmlnaHQgKGMpIEludGVybmF0aW9uYWwgQnVzaW5lc3Mg
TWFjaGluZXMgIENvcnAuLCAyMDAxCi0gKiAgMDcvMjAwMSBQb3J0ZWQgYnkgV2F5bmUgQm95ZXIK
LSAqCi0gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgIHlvdSBjYW4gcmVkaXN0cmli
dXRlIGl0IGFuZC9vciBtb2RpZnkKLSAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdl
bmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5Ci0gKiB0aGUgRnJlZSBTb2Z0d2Fy
ZSBGb3VuZGF0aW9uOyBlaXRoZXIgdmVyc2lvbiAyIG9mIHRoZSBMaWNlbnNlLCBvcgotICogKGF0
IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KLSAqCi0gKiBUaGlzIHByb2dyYW0gaXMg
ZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwKLSAqIGJ1dCBX
SVRIT1VUIEFOWSBXQVJSQU5UWTsgIHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBv
ZgotICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NF
LiAgU2VlCi0gKiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWls
cy4KLSAqCi0gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2Vu
ZXJhbCBQdWJsaWMgTGljZW5zZQotICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07ICBpZiBub3Qs
IHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sCi0gKiBJbmMuLCA1MSBGcmFu
a2xpbiBTdHJlZXQsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1BIDAyMTEwLTEzMDEgVVNBCi0gKi8K
LQotLyoKLSAqIFRlc3QgTmFtZTogbHN0YXQwMwotICoKLSAqIFRlc3QgRGVzY3JpcHRpb246Ci0g
KiAgVmVyaWZ5IHRoYXQsIGxzdGF0KDIpIHN1Y2NlZWRzIHRvIGdldCB0aGUgc3RhdHVzIG9mIGEg
ZmlsZSBwb2ludGVkIHRvIGJ5Ci0gKiAgc3ltbGluayBhbmQgZmlsbHMgdGhlIHN0YXQgc3RydWN0
dXJlIGVsZW1lbnRzLgotICoKLSAqIEV4cGVjdGVkIFJlc3VsdDoKLSAqICBsc3RhdCgpIHNob3Vs
ZCByZXR1cm4gdmFsdWUgMCBvbiBzdWNjZXNzIGFuZCB0aGUgc3RhdCBzdHJ1Y3R1cmUgZWxlbWVu
dHMKLSAqICBzaG91bGQgYmUgZmlsbGVkIHdpdGggdGhlIHN5bWxpbmsgZmlsZSBpbmZvcm1hdGlv
bi4KLSAqLwotI2luY2x1ZGUgPHN0ZGlvLmg+Ci0jaW5jbHVkZSA8c3lzL3R5cGVzLmg+Ci0jaW5j
bHVkZSA8ZmNudGwuaD4KLSNpbmNsdWRlIDxzeXMvc3RhdC5oPgotI2luY2x1ZGUgPGVycm5vLmg+
Ci0jaW5jbHVkZSA8c3RyaW5nLmg+Ci0jaW5jbHVkZSA8c2lnbmFsLmg+Ci0jaW5jbHVkZSA8cHdk
Lmg+Ci0KLSNpbmNsdWRlICJ0ZXN0LmgiCi0jaW5jbHVkZSAic2FmZV9tYWNyb3MuaCIKLQotI2Rl
ZmluZSBGSUxFX01PREUJU19JUlVTUiB8IFNfSVdVU1IgfCBTX0lSR1JQIHwgU19JUk9USAotI2Rl
ZmluZSBURVNURklMRQkidGVzdGZpbGUiCi0jZGVmaW5lIFNGSUxFCQkic2ZpbGUiCi0jZGVmaW5l
IEZJTEVfU0laRSAgICAgICAxMDI0Ci0jZGVmaW5lIEJVRl9TSVpFCTI1NgotI2RlZmluZSBQRVJN
UwkJMDY0NAotCi1jaGFyICpUQ0lEID0gImxzdGF0MDMiOwotaW50IFRTVF9UT1RBTCA9IDE7Ci1z
dGF0aWMgdWlkX3QgdXNlcl9pZDsKLXN0YXRpYyBnaWRfdCBncm91cF9pZDsKLQotc3RhdGljIGNo
YXIgbm9ib2R5X3VpZFtdID0gIm5vYm9keSI7Ci1zdGF0aWMgc3RydWN0IHBhc3N3ZCAqbHRwdXNl
cjsKLQotc3RhdGljIHZvaWQgc2V0dXAodm9pZCk7Ci1zdGF0aWMgdm9pZCBjbGVhbnVwKHZvaWQp
OwotCi1pbnQgbWFpbihpbnQgYWMsIGNoYXIgKiphdikKLXsKLQlzdHJ1Y3Qgc3RhdCBzdGF0X2J1
ZjsKLQlpbnQgbGM7Ci0KLQl0c3RfcGFyc2Vfb3B0cyhhYywgYXYsIE5VTEwsIE5VTEwpOwotCi0J
c2V0dXAoKTsKLQotCWZvciAobGMgPSAwOyBURVNUX0xPT1BJTkcobGMpOyBsYysrKSB7Ci0JCXRz
dF9jb3VudCA9IDA7Ci0KLQkJVEVTVChsc3RhdChTRklMRSwgJnN0YXRfYnVmKSk7Ci0KLQkJaWYg
KFRFU1RfUkVUVVJOID09IC0xKSB7Ci0JCQl0c3RfcmVzbShURkFJTCB8IFRURVJSTk8sICJsc3Rh
dCglcykgZmFpbGVkIiwgU0ZJTEUpOwotCQkJY29udGludWU7Ci0JCX0KLQotCQlpZiAoKHN0YXRf
YnVmLnN0X3VpZCAhPSB1c2VyX2lkKSB8fAotCQkgICAgKHN0YXRfYnVmLnN0X2dpZCAhPSBncm91
cF9pZCkgfHwKLQkJICAgICgoc3RhdF9idWYuc3RfbW9kZSAmIFNfSUZNVCkgIT0gU19JRkxOSykg
fHwKLQkJICAgIChzdGF0X2J1Zi5zdF9zaXplICE9IHN0cmxlbihURVNURklMRSkpKSB7Ci0JCQl0
c3RfcmVzbShURkFJTCwgIkZ1bmN0aW9uYWxpdHkgb2YgbHN0YXQoMikgb24gIgotCQkJCSAiJyVz
JyBGYWlsZWQiLCBTRklMRSk7Ci0JCX0gZWxzZSB7Ci0JCQl0c3RfcmVzbShUUEFTUywgIkZ1bmN0
aW9uYWxpdHkgb2YgbHN0YXQoMikgb24gIgotCQkJCSAiJyVzJyBTdWNjY2Vzc2Z1bCIsIFNGSUxF
KTsKLQkJfQotCX0KLQotCWNsZWFudXAoKTsKLQl0c3RfZXhpdCgpOwotfQotCi1zdGF0aWMgdm9p
ZCBzZXR1cCh2b2lkKQotewotCXRzdF9zaWcoTk9GT1JLLCBERUZfSEFORExFUiwgY2xlYW51cCk7
Ci0KLQl0c3RfcmVxdWlyZV9yb290KCk7Ci0KLQlsdHB1c2VyID0gU0FGRV9HRVRQV05BTShOVUxM
LCBub2JvZHlfdWlkKTsKLQlTQUZFX1NFVFVJRChOVUxMLCBsdHB1c2VyLT5wd191aWQpOwotCi0J
VEVTVF9QQVVTRTsKLQotCXRzdF90bXBkaXIoKTsKLQotCWlmICh0c3RfZmlsbF9maWxlKFRFU1RG
SUxFLCAnYScsIDEwMjQsIDEpKQotCQl0c3RfYnJrbShUQlJPSywgY2xlYW51cCwgIkZhaWxlZCB0
byBjcmVhdGUgIiBURVNURklMRSk7Ci0KLQlTQUZFX1NZTUxJTksoY2xlYW51cCwgVEVTVEZJTEUs
IFNGSUxFKTsKLQotCXVzZXJfaWQgPSBnZXR1aWQoKTsKLQlncm91cF9pZCA9IGdldGdpZCgpOwot
fQotCi1zdGF0aWMgdm9pZCBjbGVhbnVwKHZvaWQpCi17Ci0JdHN0X3JtZGlyKCk7Ci19Ci0tIAoy
LjE2LjQKCgotLSAKTWFpbGluZyBsaXN0IGluZm86IGh0dHBzOi8vbGlzdHMubGludXguaXQvbGlz
dGluZm8vbHRwCg==
