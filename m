Return-Path: <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>
X-Original-To: lists+linux-ltp@lfdr.de
Delivered-To: lists+linux-ltp@lfdr.de
Received: from picard.linux.it (picard.linux.it [IPv6:2001:1418:10:5::2])
	by mail.lfdr.de (Postfix) with ESMTPS id 55F1735C946
	for <lists+linux-ltp@lfdr.de>; Mon, 12 Apr 2021 16:56:19 +0200 (CEST)
Received: from picard.linux.it (localhost [IPv6:::1])
	by picard.linux.it (Postfix) with ESMTP id 1D21D3C74FB
	for <lists+linux-ltp@lfdr.de>; Mon, 12 Apr 2021 16:56:19 +0200 (CEST)
X-Original-To: ltp@lists.linux.it
Delivered-To: ltp@picard.linux.it
Received: from in-4.smtp.seeweb.it (in-4.smtp.seeweb.it
 [IPv6:2001:4b78:1:20::4])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature RSA-PSS (2048 bits))
 (No client certificate requested)
 by picard.linux.it (Postfix) with ESMTPS id 3A4D43C78A0
 for <ltp@lists.linux.it>; Mon, 12 Apr 2021 16:55:34 +0200 (CEST)
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by in-4.smtp.seeweb.it (Postfix) with ESMTPS id 77E471000A1D
 for <ltp@lists.linux.it>; Mon, 12 Apr 2021 16:55:32 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.com; s=susede1;
 t=1618239332; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=e3AIlo0X6d2gfNpa305vu6T5MHLHTkmWLi7mDuMI5wU=;
 b=eao0C0cN+nFrS7ELEETOtZBpA6OhBgtujq6Wu/2SKoXY8nfq7RSOYhdNQvyZtXULBhfi8w
 x5O2YWXxwOOWahZnEPKJ2GwO290iNCqtM0PE3kwiBM5e5n5m/3qixj8MpSFxe+txPpbU+y
 /GG4F5y7Wp2iH8AgsTqrmG9kCUnijdc=
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 0EF6FB1C5;
 Mon, 12 Apr 2021 14:55:32 +0000 (UTC)
To: ltp@lists.linux.it
Date: Mon, 12 Apr 2021 15:55:02 +0100
Message-Id: <20210412145506.26894-4-rpalethorpe@suse.com>
X-Mailer: git-send-email 2.30.2
In-Reply-To: <20210412145506.26894-1-rpalethorpe@suse.com>
References: <20210412145506.26894-1-rpalethorpe@suse.com>
MIME-Version: 1.0
X-Virus-Scanned: clamav-milter 0.102.4 at in-4.smtp.seeweb.it
X-Virus-Status: Clean
X-Spam-Status: No, score=0.1 required=7.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,DKIM_VALID_EF,SPF_HELO_NONE,SPF_PASS autolearn=disabled
 version=3.4.4
X-Spam-Checker-Version: SpamAssassin 3.4.4 (2020-01-24) on in-4.smtp.seeweb.it
Subject: [LTP] [PATCH v3 3/7] Add new CGroups APIs
X-BeenThere: ltp@lists.linux.it
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Linux Test Project <ltp.lists.linux.it>
List-Unsubscribe: <https://lists.linux.it/options/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=unsubscribe>
List-Archive: <http://lists.linux.it/pipermail/ltp/>
List-Post: <mailto:ltp@lists.linux.it>
List-Help: <mailto:ltp-request@lists.linux.it?subject=help>
List-Subscribe: <https://lists.linux.it/listinfo/ltp>,
 <mailto:ltp-request@lists.linux.it?subject=subscribe>
From: Richard Palethorpe via ltp <ltp@lists.linux.it>
Reply-To: Richard Palethorpe <rpalethorpe@suse.com>
Cc: Richard Palethorpe <rpalethorpe@suse.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it
Sender: "ltp" <ltp-bounces+lists+linux-ltp=lfdr.de@lists.linux.it>

Q29tcGxldGUgcmV3cml0ZSBvZiB0aGUgQ0dyb3VwcyBBUEkgd2hpY2ggcHJvdmlkZXMgdHdvIGxh
eWVycyBvZgppbmRpcmVjdGlvbiBiZXR3ZWVuIHRoZSB0ZXN0IGF1dGhvciBhbmQgdGhlIFNVVCdz
IENHcm91cApjb25maWd1cmF0aW9uLgoKU2lnbmVkLW9mZi1ieTogUmljaGFyZCBQYWxldGhvcnBl
IDxycGFsZXRob3JwZUBzdXNlLmNvbT4KLS0tCiBpbmNsdWRlL3RzdF9jZ3JvdXAuaCB8ICAxOTQg
KysrKysrLQogaW5jbHVkZS90c3RfdGVzdC5oICAgfCAgICAxIC0KIGxpYi9NYWtlZmlsZSAgICAg
ICAgIHwgICAgMiArCiBsaWIvdHN0X2Nncm91cC5jICAgICB8IDEyMDUgKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKy0tLS0tLS0tLS0tCiA0IGZpbGVzIGNoYW5nZWQsIDEwNTYgaW5zZXJ0
aW9ucygrKSwgMzQ2IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2luY2x1ZGUvdHN0X2Nncm91
cC5oIGIvaW5jbHVkZS90c3RfY2dyb3VwLmgKaW5kZXggYmZkODQ4MjYwLi5kNjg0MmQ2NDEgMTAw
NjQ0Ci0tLSBhL2luY2x1ZGUvdHN0X2Nncm91cC5oCisrKyBiL2luY2x1ZGUvdHN0X2Nncm91cC5o
CkBAIC0yLDQ2ICsyLDE5NCBAQAogLyoKICAqIENvcHlyaWdodCAoYykgMjAyMCBSZWQgSGF0LCBJ
bmMuCiAgKiBDb3B5cmlnaHQgKGMpIDIwMjAgTGkgV2FuZyA8bGl3YW5nQHJlZGhhdC5jb20+Cisg
KiBDb3B5cmlnaHQgKGMpIDIwMjAtMjAyMSBTVVNFIExMQyA8cnBhbGV0aG9ycGVAc3VzZS5jb20+
CiAgKi8KKy8qXAorICogW0RFU0NSSVBUSU9OXQorICoKKyAqIFRoZSBMVFAgQ0dyb3VwcyBBUEkg
dHJpZXMgdG8gcHJlc2VudCBhIGNvbnNpc3RlbnQgaW50ZXJmYWNlIHRvIHRoZQorICogbWFueSBw
b3NzaWJsZSBDR3JvdXAgY29uZmlndXJhdGlvbnMgYSBzeXN0ZW0gY291bGQgaGF2ZS4KKyAqCisg
KiBZb3UgbWF5IGFzazsgIldoeSBkb24ndCB5b3UganVzdCBtb3VudCBhIHNpbXBsZSBDR3JvdXAg
aGllcmFyY2h5LAorICogaW5zdGVhZCBvZiBzY2FubmluZyB0aGUgY3VycmVudCBzZXR1cD8iLiBU
aGUgc2hvcnQgYW5zd2VyIGlzIHRoYXQKKyAqIGl0IGlzIG5vdCBwb3NzaWJsZSB1bmxlc3Mgbm8g
Q0dyb3VwcyBhcmUgY3VycmVudGx5IGFjdGl2ZSBhbmQKKyAqIGFsbW9zdCBhbGwgb2Ygb3VyIHVz
ZXJzIHdpbGwgaGF2ZSBDR3JvdXBzIGFjdGl2ZS4gRXZlbiBpZgorICogdW5tb3VudGluZyB0aGUg
Y3VycmVudCBDR3JvdXAgaGllcmFyY2h5IGlzIGEgcmVhc29uYWJsZSB0aGluZyB0byBkbworICog
dG8gdGhlIHN5dGVtIG1hbmFnZXIsIGl0IGlzIGhpZ2hseSB1bmxpa2VseSB0aGUgQ0dyb3VwIGhp
ZXJhcmNoeQorICogd2lsbCBiZSBkZXN0cm95ZWQuIFNvIHVzZXJzIHdvdWxkIGJlIGZvcmNlZCB0
byByZW1vdmUgdGhlaXIgQ0dyb3VwCisgKiBjb25maWd1cmF0aW9uIGFuZCByZWJvb3QgdGhlIHN5
c3RlbS4KKyAqCisgKiBUaGUgY29yZSBsaWJyYXJ5IHRyaWVzIHRvIGVuc3VyZSBhbiBMVFAgQ0dy
b3VwIGV4aXN0cyBvbiBlYWNoCisgKiBoaWVyYXJjaHkgcm9vdC4gSW5zaWRlIHRoZSBMVFAgZ3Jv
dXAgaXQgZW5zdXJlcyBhICdkcmFpbicgZ3JvdXAKKyAqIGV4aXN0cyBhbmQgY3JlYXRzIGEgdGVz
dCBncm91cCBmb3IgdGhlIGN1cnJlbnQgdGVzdC4gSW4gdGhlIHdvcnN0CisgKiBjYXNlIHdlIGVu
ZCB1cCB3aXRoIGEgc2V0IG9mIGhpZXJhcmNoaWVzIGxpa2UgdGhlIGZvbGx3b2luZy4gV2hlcmUK
KyAqIGV4aXN0aW5nIHN5c3RlbS1tYW5hZ2VyLWNyZWF0ZWQgQ0dyb3VwcyBoYXZlIGJlZW4gb21p
dHRlZC4KKyAqCisgKiAJKFYyIFJvb3QpCShWMSBSb290IDEpCS4uLgkoVjEgUm9vdCBOKQorICog
CSAgICB8CQkgICAgIHwJCQkgICAgIHwKKyAqCSAgKGx0cCkJCSAgIChsdHApCS4uLgkgICAobHRw
KQorICoJIC8gICAgIFwJICAvCVwJCSAgLwlcCisgKiAgKGRyYWluKSAodGVzdC1uKSAoZHJhaW4p
ICAodGVzdC1uKSAgLi4uICAoZHJhaW4pICAodGVzdC1uKQorICoKKyAqIFYyIENHcm91cCBjb250
cm9sbGVycyB1c2UgYSBzaW5nbGUgdW5pZmllZCBoaWVyYXJjaHkgb24gYSBzaW5nbGUKKyAqIHJv
b3QuIFR3byBvciBtb3JlIFYxIGNvbnRyb2xsZXJzIG1heSBzaGFyZSBhIHJvb3Qgb3IgaGF2ZSB0
aGVpciBvd24KKyAqIHJvb3QuIEhvd2V2ZXIgdGhlcmUgbWF5IGV4aXN0IG9ubHkgb25lIGluc3Rh
bmNlIG9mIGEgY29udHJvbGxlci4KKyAqIFNvIHlvdSBjYW4gbm90IGhhdmUgdGhlIHNhbWUgVjEg
Y29udHJvbGxlciBvbiBtdWx0aXBsZSByb290cy4KKyAqCisgKiBJdCBpcyBwb3NzaWJsZSB0byBo
YXZlIGJvdGggYSBWMiBoaWVyYXJjaHkgYW5kIFYxIGhpZXJhcmNoaWVzCisgKiBhY3RpdmUgYXQg
dGhlIHNhbWUgdGltZS4gV2hpY2ggaXMgd2hhdCBpcyBzaG93biBhYm92ZS4gQW55CisgKiBjb250
cm9sbGVycyBhdHRhY2hlZCB0byBWMSBoaWVyYXJjaGllcyB3aWxsIG5vdCBiZSBhdmFpbGFibGUg
aW4gdGhlCisgKiBWMiBoaWVyYXJjaHkuIFRoZSByZXZlcnNlIGlzIGFsc28gdHJ1ZS4KKyAqCisg
KiBOb3RlIHRoYXQgYSBzaW5nbGUgaGllcmFyY2h5IG1heSBiZSBtb3VudGVkIG11bHRpcGxlCisg
KiB0aW1lcy4gQWxsb3dpbmcgaXQgdG8gYmUgYWNjZXNzZWQgYXQgZGlmZmVyZW50IGxvY2F0aW9u
cy4gSG93ZXZlcgorICogc3Vic2VxdWVudCBtb3VudCBvcGVyYXRpb25zIHdpbGwgZmFpbCBpZiB0
aGUgbW91bnQgb3B0aW9ucyBhcmUKKyAqIGRpZmZlcmVudCBmcm9tIHRoZSBmaXJzdC4KKyAqCisg
KiBUaGUgdXNlciBtYXkgcHJlLWNyZWF0ZSB0aGUgQ0dyb3VwIGhpZXJhcmNoaWVzIGFuZCB0aGUg
bHRwIENHcm91cCwKKyAqIG90aGVyd2lzZSB0aGUgbGlicmFyeSB3aWxsIHRyeSB0byBjcmVhdGUg
dGhlbS4gSWYgdGhlIGx0cCBncm91cAorICogYWxyZWFkeSBleGlzdHMgYW5kIGhhcyBhcHByb3By
aWF0ZSBwZXJtaXNzaW9ucywgdGhlbiBhZG1pbgorICogcHJpdmlsZWdlcyB3aWxsIG5vdCBiZSBy
ZXF1aXJlZCB0byBydW4gdGhlIHRlc3RzLgorICoKKyAqIEJlY2F1c2UgdGhlIHRlc3QgbWF5IG5v
dCBoYXZlIGFjY2VzcyB0byB0aGUgQ0dyb3VwIHJvb3QocyksIHRoZQorICogZHJhaW4gQ0dyb3Vw
IGlzIGNyZWF0ZWQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gc3RvcmUgcHJvY2Vzc2VzIHdoaWNoCisg
KiB3b3VsZCBvdGhlcndpc2UgYmxvY2sgdGhlIGRlc3RydWN0aW9uIG9mIHRoZSBpbmRpdmlkdWFs
IHRlc3QgQ0dyb3VwCisgKiBvciBvbmUgb2YgaXRzIGRlc2NlbmRhbnRzLgorICoKKyAqIFRoZSB0
ZXN0IGF1dGhvciBtYXkgY3JlYXRlIGNoaWxkIENHcm91cHMgd2l0aGluIHRoZSB0ZXN0IENHcm91
cAorICogdXNpbmcgdGhlIENHcm91cCBJdGVtIEFQSS4gVGhlIGxpYnJhcnkgd2lsbCBjcmVhdGUg
dGhlIG5ldyBDR3JvdXAKKyAqIGluIGFsbCB0aGUgcmVsZXZhbnQgaGllcmFyY2hpZXMuCisgKgor
ICogVGhlcmUgYXJlIG1hbnkgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGUgVjEgYW5kIFYyIENHcm91
cCBBUElzLiBJZiBhCisgKiBjb250cm9sbGVyIGlzIG9uIGJvdGggVjEgYW5kIFYyLCBpdCBtYXkg
aGF2ZSBkaWZmZXJlbnQgcGFyYW1ldGVycworICogYW5kIGNvbnRyb2wgZmlsZXMuIFNvbWUgb2Yg
dGhlc2UgY29udHJvbCBmaWxlcyBoYXZlIGEgZGlmZmVyZW50CisgKiBuYW1lLCBidXQgc2ltaWxh
ciBmdW5jdGlvbmFsaXR5LiBJbiB0aGlzIGNhc2UgdGhlIEl0ZW0gQVBJIHVzZXMKKyAqIHRoZSBW
MiBuYW1lcyBhbmQgYWxpYXNlcyB0aGVtIHRvIHRoZSBWMSBuYW1lIHdoZW4gYXBwcm9wcmlhdGUu
CisgKgorICogU29tZSBjb250cm9sIGZpbGVzIG9ubHkgZXhpc3Qgb24gb25lIG9mIHRoZSB2ZXJz
aW9ucyBvciB0aGV5IGNhbiBiZQorICogbWlzc2luZyBkdWUgdG8gb3RoZXIgcmVhc29ucy4gVGhl
IEl0ZW0gQVBJIGFsbG93cyB0aGUgdXNlciB0byBjaGVjaworICogaWYgdGhlIGZpbGUgZXhpc3Rz
IGJlZm9yZSB0cnlpbmcgdG8gdXNlIGl0LgorICoKKyAqIE9mdGVuIGEgY29udHJvbCBmaWxlIGhh
cyBhbG1vc3QgdGhlIHNhbWUgZnVuY3Rpb25hbGl0eSBiZXR3ZWVuIFYxCisgKiBhbmQgVjIuIFdo
aWNoIG1lYW5zIGl0IGNhbiBiZSB1c2VkIGluIHRoZSBzYW1lIHdheSBtb3N0IG9mIHRoZQorICog
dGltZSwgYnV0IG5vdCBhbGwuIEZvciBub3cgdGhpcyBpcyBoYW5kbGVkIGJ5IGV4cG9zaW5nIHRo
ZSBBUEkKKyAqIHZlcnNpb24gYSBjb250cm9sbGVyIGlzIHVzaW5nIHRvIGFsbG93IHRoZSB0ZXN0
IGF1dGhvciB0byBoYW5kbGUKKyAqIGVkZ2UgY2FzZXMuIChlLmcuIFYyIG1lbW9yeS5zd2FwLm1h
eCBhY2NlcHRzICJtYXgiLCBidXQgVjEKKyAqIG1lbW9yeS5tZW1zdy5saW1pdF9pbl9ieXRlcyBk
b2VzIG5vdCkuCitcKi8KIAogI2lmbmRlZiBUU1RfQ0dST1VQX0gKICNkZWZpbmUgVFNUX0NHUk9V
UF9ICiAKLSNkZWZpbmUgUEFUSF9UTVBfQ0dfTUVNCSIvdG1wL2Nncm91cF9tZW0iCi0jZGVmaW5l
IFBBVEhfVE1QX0NHX0NTVAkiL3RtcC9jZ3JvdXBfY3N0IgotCisvKiBDR3JvdXBzIEtlcm5lbCBB
UEkgdmVyc2lvbiAqLwogZW51bSB0c3RfY2dyb3VwX3ZlciB7CiAJVFNUX0NHUk9VUF9WMSA9IDEs
CiAJVFNUX0NHUk9VUF9WMiA9IDIsCiB9OwogCi1lbnVtIHRzdF9jZ3JvdXBfY3RybCB7Ci0JVFNU
X0NHUk9VUF9NRU1DRyA9IDEsCisvKiBDb250cm9sbGVyIHN1Yi1zeXN0ZW1zICovCitlbnVtIHRz
dF9jZ3JvdXBfY3NzIHsKKwlUU1RfQ0dST1VQX01FTU9SWSA9IDEsCiAJVFNUX0NHUk9VUF9DUFVT
RVQgPSAyLAotCS8qIGFkZCBjZ3JvdXAgY29udHJvbGxlciAqLwogfTsKKyNkZWZpbmUgVFNUX0NH
Uk9VUF9NQVggVFNUX0NHUk9VUF9DUFVTRVQKKworLyogQXQgbW9zdCB3ZSBjYW4gaGF2ZSBvbmUg
Y2dyb3VwIFYxIHRyZWUgZm9yIGVhY2ggY29udHJvbGxlciBhbmQgb25lCisgKiAoZW1wdHkpIHYy
IHRyZWUuCisgKi8KKyNkZWZpbmUgVFNUX0NHUk9VUF9NQVhfVFJFRVMgKFRTVF9DR1JPVVBfTUFY
ICsgMSkKKworCisvKiBVc2VkIHRvIHNwZWNpZnkgQ0dyb3VwIGhpZXJhcmNoeSBjb25maWd1cmF0
aW9uIG9wdGlvbnMsIGFsbG93aW5nIGEKKyAqIHRlc3QgdG8gcmVxdWVzdCBhIHBhcnRpY3VsYXIg
Q0dyb3VwIHN0cnVjdHVyZS4KKyAqLworc3RydWN0IHRzdF9jZ3JvdXBfb3B0cyB7CisJLyogT25s
eSB0cnkgdG8gbW91bnQgVjEgQ0dyb3VwIGNvbnRyb2xsZXJzLiBUaGlzIHdpbGwgbm90CisJICog
cHJldmVudCBWMiBmcm9tIGJlaW5nIHVzZWQgaWYgaXQgaXMgYWxyZWFkeSBtb3VudGVkLCBpdAor
CSAqIG9ubHkgaW5kaWNhdGVzIHRoYXQgd2Ugc2hvdWxkIG1vdW50IFYxIGNvbnRyb2xsZXJzIGlm
CisJICogbm90aGluZyBpcyBwcmVzZW50LiBCeSBkZWZhdWx0IHdlIHRyeSB0byBtb3VudCBWMiBm
aXJzdC4gKi8KKwlpbnQgb25seV9tb3VudF92MToxOworfTsKKworc3RydWN0IHRzdF9jZ3JvdXBf
dHJlZTsKKworCisvKiBBIENvbnRyb2wgR3JvdXAgaW4gTFRQJ3MgYWdncmVnYXRlZCBoaWVyYXJj
aHkgKi8KK3N0cnVjdCB0c3RfY2dyb3VwIHsKKwljb25zdCBjaGFyICpuYW1lOworCS8qIE1hcHMg
Y29udHJvbGxlciBJRCB0byB0aGUgdHJlZSB3aGljaCBjb250YWlucyBpdC4gVGhlIFYyCisJICog
dHJlZSBpcyBhdCB6ZXJvIGV2ZW4gaWYgaXQgY29udGFpbnMgbm8gY29udHJvbGxlcnMuCisJICov
CisJc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSAqdHJlZXNfYnlfY3NzW1RTVF9DR1JPVVBfTUFYX1RS
RUVTXTsKKwkvKiBOVUxMIHRlcm1pbmF0ZWQgbGlzdCBvZiB0cmVlcyAqLworCXN0cnVjdCB0c3Rf
Y2dyb3VwX3RyZWUgKnRyZWVzW1RTVF9DR1JPVVBfTUFYX1RSRUVTICsgMV07Cit9OworCisvKiBT
ZWFyY2ggdGhlIHN5c3RlbSBmb3IgbW91bnRlZCBjZ3JvdXBzIGFuZCBhdmFpbGFibGUKKyAqIGNv
bnRyb2xsZXJzLiBDYWxsZWQgYXV0b21hdGljYWxseSBieSB0c3RfY2dyb3VwX3JlcXVpcmUuCisg
Ki8KK3ZvaWQgdHN0X2Nncm91cF9zY2FuKHZvaWQpOworLyogUHJpbnQgdGhlIGNvbmZpZyBkZXRl
Y3RlZCBieSB0c3RfY2dyb3VwX3NjYW4gKi8KK3ZvaWQgdHN0X2Nncm91cF9wcmludF9jb25maWco
dm9pZCk7CisKKy8qIEVuc3VyZSB0aGUgc3BlY2lmaWVkIGNvbnRyb2xsZXIgaXMgYXZhaWxhYmxl
IGluIHRoZSB0ZXN0J3MgZGVmYXVsdAorICogQ0dyb3VwLCBtb3VudGluZy9lbmFibGluZyBpdCBp
ZiBuZWNlc3NhcnkgKi8KK3ZvaWQgdHN0X2Nncm91cF9yZXF1aXJlKGVudW0gdHN0X2Nncm91cF9j
c3MgdHlwZSwKKwkJCWNvbnN0IHN0cnVjdCB0c3RfY2dyb3VwX29wdHMgKm9wdGlvbnMpOworCisv
KiBUZWFyIGRvd24gYW55IENHcm91cHMgY3JlYXRlZCBieSBjYWxscyB0byB0c3RfY2dyb3VwX3Jl
cXVpcmUgKi8KK3ZvaWQgdHN0X2Nncm91cF9jbGVhbnVwKHZvaWQpOworCisvKiBHZXQgdGhlIGRl
ZmF1bHQgQ0dyb3VwIGZvciB0aGUgdGVzdC4gSXQgYWxsb2NhdGVzIG1lbW9yeSAoaW4gYQorICog
Z3VhcmRlZCBidWZmZXIpIHNvIHNob3VsZCBhbHdheXMgYmUgY2FsbGVkIGZyb20gc2V0dXAKKyAq
LworY29uc3Qgc3RydWN0IHRzdF9jZ3JvdXAgKnRzdF9jZ3JvdXBfZ2V0X3Rlc3Qodm9pZCk7Cisv
KiBHZXQgdGhlIHNoYXJlZCBkcmFpbiBncm91cC4gQWxzbyBzaG91bGQgYmUgY2FsbGVkIGZyb20g
c2V0dXAgKi8KK2NvbnN0IHN0cnVjdCB0c3RfY2dyb3VwICp0c3RfY2dyb3VwX2dldF9kcmFpbih2
b2lkKTsKKy8qIENyZWF0ZSBhIGRlc2NlbmRhbnQgQ0dyb3VwICovCitzdHJ1Y3QgdHN0X2Nncm91
cCAqdHN0X2Nncm91cF9tayhjb25zdCBzdHJ1Y3QgdHN0X2Nncm91cCAqcGFyZW50LAorCQkJCSBj
b25zdCBjaGFyICpuYW1lKTsKKy8qIFJlbW92ZSBhIGRlc2NlbmRhbnQgQ0dyb3VwICovCitzdHJ1
Y3QgdHN0X2Nncm91cCAqdHN0X2Nncm91cF9ybShzdHJ1Y3QgdHN0X2Nncm91cCAqY2cpOworCisj
ZGVmaW5lIFNBRkVfQ0dST1VQX1ZFUihjZywgbmFtZSkgXAorCXNhZmVfY2dyb3VwX3ZlcihfX0ZJ
TEVfXywgX19MSU5FX18sIChjZyksIChuYW1lKSkKKworZW51bSB0c3RfY2dyb3VwX3ZlciBzYWZl
X2Nncm91cF92ZXIoY29uc3QgY2hhciAqZmlsZSwgY29uc3QgaW50IGxpbmVubywKKwkJCQkgICAg
Y29uc3Qgc3RydWN0IHRzdF9jZ3JvdXAgKmNnLAorCQkJCSAgICBjb25zdCBjaGFyICpuYW1lKTsK
KworI2RlZmluZSBTQUZFX0NHUk9VUF9IQVMoY2csIG5hbWUpIFwKKwlzYWZlX2Nncm91cF9oYXMo
X19GSUxFX18sIF9fTElORV9fLCAoY2cpLCAobmFtZSkpCisKK2ludCBzYWZlX2Nncm91cF9oYXMo
Y29uc3QgY2hhciAqZmlsZSwgY29uc3QgaW50IGxpbmVubywKKwkJICAgIGNvbnN0IHN0cnVjdCB0
c3RfY2dyb3VwICpjZywgY29uc3QgY2hhciAqbmFtZSk7CisKKyNkZWZpbmUgU0FGRV9DR1JPVVBf
UkVBRChjZywgbmFtZSwgb3V0LCBsZW4pCQkJCVwKKwlzYWZlX2Nncm91cF9yZWFkKF9fRklMRV9f
LCBfX0xJTkVfXywgKGNnKSwgKG5hbWUpLCAob3V0KSwgKGxlbikpCisKK3NzaXplX3Qgc2FmZV9j
Z3JvdXBfcmVhZChjb25zdCBjaGFyICpmaWxlLCBjb25zdCBpbnQgbGluZW5vLAorCQkJIGNvbnN0
IHN0cnVjdCB0c3RfY2dyb3VwICpjZywgY29uc3QgY2hhciAqbmFtZSwKKwkJCSBjaGFyICpvdXQs
IHNpemVfdCBsZW4pOwogCi1lbnVtIHRzdF9jZ3JvdXBfdmVyIHRzdF9jZ3JvdXBfdmVyc2lvbih2
b2lkKTsKKyNkZWZpbmUgU0FGRV9DR1JPVVBfUFJJTlRGKGNnLCBuYW1lLCBmbXQsIC4uLikJCQkJ
XAorCXNhZmVfY2dyb3VwX3ByaW50ZihfX0ZJTEVfXywgX19MSU5FX18sIChjZyksIChuYW1lKSwg
KGZtdCksIF9fVkFfQVJHU19fKQogCi0vKiBUbyBtb3VudC91bW91bnQgc3BlY2lmaWVkIGNncm91
cCBjb250cm9sbGVyIG9uICdjZ3JvdXBfZGlyJyBwYXRoICovCi12b2lkIHRzdF9jZ3JvdXBfbW91
bnQoZW51bSB0c3RfY2dyb3VwX2N0cmwgY3RybCwgY29uc3QgY2hhciAqY2dyb3VwX2Rpcik7Ci12
b2lkIHRzdF9jZ3JvdXBfdW1vdW50KGNvbnN0IGNoYXIgKmNncm91cF9kaXIpOworI2RlZmluZSBT
QUZFX0NHUk9VUF9QUklOVChjZywgbmFtZSwgc3RyKQkJCQlcCisJc2FmZV9jZ3JvdXBfcHJpbnRm
KF9fRklMRV9fLCBfX0xJTkVfXywgKGNnKSwgKG5hbWUpLCAiJXMiLCAoc3RyKSkKIAotLyogVG8g
bW92ZSBjdXJyZW50IHByb2Nlc3MgUElEIHRvIHRoZSBtb3VudGVkIGNncm91cCB0YXNrcyAqLwot
dm9pZCB0c3RfY2dyb3VwX21vdmVfY3VycmVudChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKTsKK3Zv
aWQgc2FmZV9jZ3JvdXBfcHJpbnRmKGNvbnN0IGNoYXIgKmZpbGUsIGNvbnN0IGludCBsaW5lbm8s
CisJCQljb25zdCBzdHJ1Y3QgdHN0X2Nncm91cCAqY2csIGNvbnN0IGNoYXIgKm5hbWUsCisJCQlj
b25zdCBjaGFyICpmbXQsIC4uLikKKwkJCV9fYXR0cmlidXRlX18gKChmb3JtYXQgKHByaW50Ziwg
NSwgNikpKTsKIAotLyogVG8gc2V0IGNncm91cCBjb250cm9sbGVyIGtub2Igd2l0aCBuZXcgdmFs
dWUgKi8KLXZvaWQgdHN0X2Nncm91cF9zZXRfa25vYihjb25zdCBjaGFyICpjZ3JvdXBfZGlyLCBj
b25zdCBjaGFyICprbm9iLCBsb25nIHZhbHVlKTsKKyNkZWZpbmUgU0FGRV9DR1JPVVBfU0NBTkYo
Y2csIG5hbWUsIGZtdCwgLi4uKQkJCQlcCisJc2FmZV9jZ3JvdXBfc2NhbmYoX19GSUxFX18sIF9f
TElORV9fLCAoY2cpLCAobmFtZSksIChmbXQpLCBfX1ZBX0FSR1NfXykKIAotLyogU2V0IG9mIGZ1
bmN0aW9ucyB0byBzZXQga25vYnMgdW5kZXIgdGhlIG1lbW9yeSBjb250cm9sbGVyICovCi12b2lk
IHRzdF9jZ3JvdXBfbWVtX3NldF9tYXhieXRlcyhjb25zdCBjaGFyICpjZ3JvdXBfZGlyLCBsb25n
IG1lbXN6KTsKLWludCAgdHN0X2Nncm91cF9tZW1fc3dhcGFjY3RfZW5hYmxlZChjb25zdCBjaGFy
ICpjZ3JvdXBfZGlyKTsKLXZvaWQgdHN0X2Nncm91cF9tZW1fc2V0X21heHN3YXAoY29uc3QgY2hh
ciAqY2dyb3VwX2RpciwgbG9uZyBtZW1zeik7Cit2b2lkIHNhZmVfY2dyb3VwX3NjYW5mKGNvbnN0
IGNoYXIgKmZpbGUsIGNvbnN0IGludCBsaW5lbm8sCisJCSAgICAgICBjb25zdCBzdHJ1Y3QgdHN0
X2Nncm91cCAqY2csIGNvbnN0IGNoYXIgKm5hbWUsCisJCSAgICAgICBjb25zdCBjaGFyICpmbXQs
IC4uLikKKwkJICAgICAgIF9fYXR0cmlidXRlX18gKChmb3JtYXQgKHNjYW5mLCA1LCA2KSkpOwog
Ci0vKiBTZXQgb2YgZnVuY3Rpb25zIHRvIHJlYWQvd3JpdGUgY3B1c2V0IGNvbnRyb2xsZXIgZmls
ZXMgY29udGVudCAqLwotdm9pZCB0c3RfY2dyb3VwX2NwdXNldF9yZWFkX2ZpbGVzKGNvbnN0IGNo
YXIgKmNncm91cF9kaXIsIGNvbnN0IGNoYXIgKmZpbGVuYW1lLAotCWNoYXIgKnJldGJ1Ziwgc2l6
ZV90IHJldGJ1Zl9zeik7Ci12b2lkIHRzdF9jZ3JvdXBfY3B1c2V0X3dyaXRlX2ZpbGVzKGNvbnN0
IGNoYXIgKmNncm91cF9kaXIsIGNvbnN0IGNoYXIgKmZpbGVuYW1lLAotCWNvbnN0IGNoYXIgKmJ1
Zik7CiAKICNlbmRpZiAvKiBUU1RfQ0dST1VQX0ggKi8KZGlmZiAtLWdpdCBhL2luY2x1ZGUvdHN0
X3Rlc3QuaCBiL2luY2x1ZGUvdHN0X3Rlc3QuaAppbmRleCAxZmJlYmU3NTIuLjYyYWIyOTgxZiAx
MDA2NDQKLS0tIGEvaW5jbHVkZS90c3RfdGVzdC5oCisrKyBiL2luY2x1ZGUvdHN0X3Rlc3QuaApA
QCAtMzksNyArMzksNiBAQAogI2luY2x1ZGUgInRzdF9jYXBhYmlsaXR5LmgiCiAjaW5jbHVkZSAi
dHN0X2h1Z2VwYWdlLmgiCiAjaW5jbHVkZSAidHN0X2Fzc2VydC5oIgotI2luY2x1ZGUgInRzdF9j
Z3JvdXAuaCIKICNpbmNsdWRlICJ0c3RfbG9ja2Rvd24uaCIKICNpbmNsdWRlICJ0c3RfZmlwcy5o
IgogI2luY2x1ZGUgInRzdF90YWludC5oIgpkaWZmIC0tZ2l0IGEvbGliL01ha2VmaWxlIGIvbGli
L01ha2VmaWxlCmluZGV4IGYwMTk0MzJlOC4uNmY2NDFlZTlhIDEwMDY0NAotLS0gYS9saWIvTWFr
ZWZpbGUKKysrIGIvbGliL01ha2VmaWxlCkBAIC0zOCw2ICszOCw4IEBAIHBjX2ZpbGUJCQk6PSAk
KERFU1RESVIpLyQoZGF0YXJvb3RkaXIpL3BrZ2NvbmZpZy9sdHAucGMKIAogSU5TVEFMTF9UQVJH
RVRTCQk6PSAkKHBjX2ZpbGUpCiAKK3RzdF9jZ3JvdXAubzogQ0ZMQUdTICs9IC1Xbm8tbWlzc2lu
Zy1maWVsZC1pbml0aWFsaXplcnMKKwogJChwY19maWxlKToKIAl0ZXN0IC1kICIkKEBEKSIgfHwg
bWtkaXIgLXAgIiQoQEQpIgogCWluc3RhbGwgLW0gJChJTlNUQUxMX01PREUpICIkKGJ1aWxkZGly
KS8kKEBGKSIgIiRAIgpkaWZmIC0tZ2l0IGEvbGliL3RzdF9jZ3JvdXAuYyBiL2xpYi90c3RfY2dy
b3VwLmMKaW5kZXggOTZjOTUyNGQyLi40MGM5YTliZWMgMTAwNjQ0Ci0tLSBhL2xpYi90c3RfY2dy
b3VwLmMKKysrIGIvbGliL3RzdF9jZ3JvdXAuYwpAQCAtMiw0NTMgKzIsMTAxNCBAQAogLyoKICAq
IENvcHlyaWdodCAoYykgMjAyMCBSZWQgSGF0LCBJbmMuCiAgKiBDb3B5cmlnaHQgKGMpIDIwMjAg
TGkgV2FuZyA8bGl3YW5nQHJlZGhhdC5jb20+CisgKiBDb3B5cmlnaHQgKGMpIDIwMjAtMjAyMSBT
VVNFIExMQyA8cnBhbGV0aG9ycGVAc3VzZS5jb20+CiAgKi8KIAogI2RlZmluZSBUU1RfTk9fREVG
QVVMVF9NQUlOCiAKICNpbmNsdWRlIDxzdGRpby5oPgorI2luY2x1ZGUgPHN0ZGRlZi5oPgogI2lu
Y2x1ZGUgPHN0ZGxpYi5oPgorI2luY2x1ZGUgPG1udGVudC5oPgogI2luY2x1ZGUgPHN5cy9tb3Vu
dC5oPgotI2luY2x1ZGUgPGZjbnRsLmg+Ci0jaW5jbHVkZSA8dW5pc3RkLmg+CiAKICNpbmNsdWRl
ICJ0c3RfdGVzdC5oIgotI2luY2x1ZGUgInRzdF9zYWZlX21hY3Jvcy5oIgotI2luY2x1ZGUgInRz
dF9zYWZlX3N0ZGlvLmgiCisjaW5jbHVkZSAibGFwaS9mY250bC5oIgorI2luY2x1ZGUgImxhcGkv
bW91bnQuaCIKKyNpbmNsdWRlICJsYXBpL21rZGlyYXQuaCIKICNpbmNsdWRlICJ0c3RfY2dyb3Vw
LmgiCi0jaW5jbHVkZSAidHN0X2RldmljZS5oIgogCi1zdGF0aWMgZW51bSB0c3RfY2dyb3VwX3Zl
ciB0c3RfY2dfdmVyOwotc3RhdGljIGludCBjbG9uZV9jaGlsZHJlbjsKKy8qIENHcm91cCBDb3Jl
IEltcGxlbWVudGF0aW9uCisgKgorICogQ0dyb3VwIEl0ZW0gSW1wbGVtZW50YXRpb24gaXMgdG93
YXJkcyB0aGUgYm90dG9tLgorICovCiAKLXN0YXRpYyBpbnQgdHN0X2Nncm91cF9jaGVjayhjb25z
dCBjaGFyICpjZ3JvdXApCi17Ci0JY2hhciBsaW5lW1BBVEhfTUFYXTsKLQlGSUxFICpmaWxlOwot
CWludCBjZ19jaGVjayA9IDA7CitzdHJ1Y3QgY2dyb3VwX3Jvb3Q7CiAKLQlmaWxlID0gU0FGRV9G
T1BFTigiL3Byb2MvZmlsZXN5c3RlbXMiLCAiciIpOwotCXdoaWxlIChmZ2V0cyhsaW5lLCBzaXpl
b2YobGluZSksIGZpbGUpKSB7Ci0JCWlmIChzdHJzdHIobGluZSwgY2dyb3VwKSAhPSBOVUxMKSB7
Ci0JCQljZ19jaGVjayA9IDE7Ci0JCQlicmVhazsKKy8qIEEgbm9kZSBpbiBhIHNpbmdsZSBDR3Jv
dXAgaGllcmFyY2h5LiBJdCBleGlzdHMgbWFpbmx5IGZvcgorICogY29udmVuaWVuY2Ugc28gdGhh
dCB3ZSBkbyBub3QgaGF2ZSB0byB0cmF2ZXJzZSB0aGUgQ0dyb3VwIHN0cnVjdHVyZQorICogZm9y
IGZyZXF1ZW50IG9wZXJhdGlvbnMuCisgKgorICogVGhpcyBpcyBhY3R1YWxseSBhIHNpbmdsZS1s
aW5rZWQgbGlzdCBub3QgYSB0cmVlLiBXZSBvbmx5IG5lZWQgdG8KKyAqIHRyYXZlcnNlIGZyb20g
bGVhZiB0b3dhcmRzIHJvb3QuCisgKi8KK3N0cnVjdCB0c3RfY2dyb3VwX3RyZWUgeworCWNvbnN0
IGNoYXIgKm5hbWU7CisJY29uc3Qgc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSAqcGFyZW50OworCisJ
LyogU2hvcnRjdXQgdG8gcm9vdCAqLworCWNvbnN0IHN0cnVjdCBjZ3JvdXBfcm9vdCAqcm9vdDsK
KworCS8qIFN1YnN5c3RlbXMgKGNvbnRyb2xsZXJzKSBiaXQgZmllbGQuIE9ubHkgY29udHJvbGxl
cnMgd2hpY2gKKwkgKiB3ZXJlIHJlcXVpcmVkIGFuZCBjb25maWd1cmVkIGZvciB0aGlzIG5vZGUg
YXJlIGFkZGVkIHRvCisJICogdGhpcyBmaWVsZC4gU28gaXQgbWF5IGJlIGRpZmZlcmVudCBmcm9t
IHJvb3QtPmNzc19maWVsZC4KKwkgKi8KKwl1aW50MzJfdCBjc3NfZmllbGQ7CisKKwkvKiBJbiBn
ZW5lcmFsIHdlIGF2b2lkIGhhdmluZyBzcHJpbnRmcyBldmVyeXdoZXJlIGFuZCB1c2UKKwkgKiBv
cGVuYXQsIGxpbmthdCwgZXRjLgorCSAqLworCWludCBkaXI7CisKKwlpbnQgd2VfY3JlYXRlZF9p
dDoxOworfTsKKworLyogVGhlIHJvb3Qgb2YgYSBDR3JvdXAgaGllcmFyY2h5L3RyZWUgKi8KK3N0
cnVjdCBjZ3JvdXBfcm9vdCB7CisJZW51bSB0c3RfY2dyb3VwX3ZlciB2ZXI7CisJLyogQSBtb3Vu
dCBwYXRoICovCisJY2hhciBwYXRoW1BBVEhfTUFYLzJdOworCS8qIFN1YnN5c3RlbXMgKGNvbnRy
b2xsZXJzKSBiaXQgZmllbGQuIEluY2x1ZGVzIGFsbAorCSAqIGNvbnRyb2xsZXJzIGZvdW5kIHdo
aWxlIHNjYW5uaW5ndGhpcyByb290LgorCSAqLworCXVpbnQzMl90IGNzc19maWVsZDsKKworCS8q
IENHcm91cCBoaWVyYXJjaHk6IG1udCAtPiBsdHAgLT4ge2RyYWluLCB0ZXN0IC0+ID8/PyB9IFdl
CisJICoga2VlcCBhIGZsYXQgcmVmZXJlbmNlIHRvIGx0cCwgZHJhaW4gYW5kIHRlc3QgZm9yCisJ
ICogY29udmVuaWVuY2UuCisJICovCisKKwkvKiBNb3VudCBkaXJlY3RvcnkgKi8KKwlzdHJ1Y3Qg
dHN0X2Nncm91cF90cmVlIG1udDsKKwkvKiBMVFAgQ0dyb3VwIGRpcmVjdG9yeSwgY29udGFpbnMg
ZHJhaW4gYW5kIHRlc3QgZGlycyAqLworCXN0cnVjdCB0c3RfY2dyb3VwX3RyZWUgbHRwOworCS8q
IERyYWluIENHcm91cCwgc2VlIGNncm91cF9jbGVhbnVwICovCisJc3RydWN0IHRzdF9jZ3JvdXBf
dHJlZSBkcmFpbjsKKwkvKiBDR3JvdXAgZm9yIGN1cnJlbnQgdGVzdC4gV2hpY2ggbWF5IGhhdmUg
Y2hpbGRyZW4uICovCisJc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSB0ZXN0OworCisJaW50IHdlX21v
dW50ZWRfaXQ6MTsKKwkvKiBjcHVzZXQgaXMgaW4gY29tcGF0YWJpbGl0eSBtb2RlICovCisJaW50
IG5vX3ByZWZpeDoxOworfTsKKworLyogQWx3YXlzIHVzZSBmaXJzdCBpdGVtIGZvciB1bmlmaWVk
IGhpZXJhcmNoeSAqLworc3RydWN0IGNncm91cF9yb290IHJvb3RzW1RTVF9DR1JPVVBfTUFYX1RS
RUVTICsgMV07CisKKy8qIERlc2NyaWJlcyBzb21lIHRoaW5ncyB0aGF0IGFyZSBwYXJ0IG9mIGEg
Q0dyb3VwCisgKgorICogVXN1YWxseSB0cnVuayBub2RlcyBhcmUgY29udHJvbGxlcnMgYW5kIGxl
YXZlcyBhcmUgZmlsZXMgZXhwb3J0ZWQKKyAqIGJ5IHRoZSBjb250cm9sbGVycy4gU29tZXRpbWVz
IHRydW5rIG5vZGVzIGFyZSBjb21wb25lbnRzIG9mIGEKKyAqIGNvbnRyb2xsZXIgKGUuZy4gbWVt
b3J5LnN3YXApLgorICoKKyAqIFRoZSBwcmltYXJ5IHB1cnBvc2Ugb2YgdGhpcyBpcyB0byBtYXAg
VjIgbmFtZXMgdG8gVjEKKyAqIG5hbWVzLiBTZWNvbmRhcmlseSB3ZSBjYW4gbWFwIG5hbWUgcHJl
Zml4ZXMgdG8gY29udHJvbGxlciBJRHMgYW5kCisgKiBmaWd1cmUgb3V0IHdoaWNoIGhpZXJhcmNo
eSB0aGUgaXRlbSBzaG91bGQgYmUgcHJlc2VudCBvbiBhbmQKKyAqIHdoZXRoZXIgdGhlIGN1cnJl
bnQgY29uZmlndXJhdGlvbiByZXF1aXJlcyB5ZXQgZnVydGhlciB3b3JrIGFyb3VuZHMKKyAqIChl
LmcuIGlmIGNwdXNldCBpcyBtb3VudGVkIGluIGNvbXBhdGFibGl0eSBtb2RlKS4KKyAqLworc3Ry
dWN0IGNncm91cF9pdGVtIHsKKwkvKiBDYW5vbmljYWwgbmFtZS4gSXMgdGhlIFYyIG5hbWUgdW5s
ZXNzIGFuIGl0ZW0gaXMgVjEgb25seSAqLworCWNvbnN0IGNoYXIgKm5hbWU7CisJLyogVjEgbmFt
ZSBvciBOVUxMIGlmIGl0ZW0gaXMgVjIgb25seSAqLworCWNvbnN0IGNoYXIgKm5hbWVfdjE7CisJ
LyogQXJyYXkgb2YgY2hpbGQgaXRlbXMgb3IgTlVMTCAqLworCXN0cnVjdCBjZ3JvdXBfaXRlbSAq
aW5uZXI7CisKKwkvKiBUaGUgY29udHJvbGxlciB0aGlzIGl0ZW0gYmVsb25ncyB0byBvciB6ZXJv
IGZvcgorCSAqICdjZ3JvdXAuPGl0ZW0+Jy4gTGVhZiBpdGVtcyBhcmUgc3RhdGljYWxseSBpbml0
aWFsaXNlZCBhcworCSAqIHplcm8gdGhlbiBzZXQgYXQgcnVudGltZS4KKwkgKi8KKwllbnVtIHRz
dF9jZ3JvdXBfY3NzIGNzc19pbmR4OworCisJc3RydWN0IGNncm91cF9yb290ICpyb290OworCisJ
aW50IHdlX3JlcXVpcmVfaXQ6MTsKK307CisKKy8qIExvb2t1cCB0cmVlIGZvciBpdGVtIG5hbWVz
LiAqLwordHlwZWRlZiBzdHJ1Y3QgY2dyb3VwX2l0ZW0gaXRlbXNfdFtdOworc3RhdGljIGl0ZW1z
X3QgaXRlbXMgPSB7CisJWzBdID0geyAiY2dyb3VwIiwgLmlubmVyID0gKGl0ZW1zX3QpeworCQkJ
eyAiY2dyb3VwLnByb2NzIiwgInRhc2tzIiB9LAorCQkJeyAiY2dyb3VwLnN1YnRyZWVfY29udHJv
bCIgfSwKKwkJCXsgImNncm91cC5jbG9uZV9jaGlsZHJlbiIsICJjbG9uZV9jaGlsZHJlbiIgfSwK
KwkJCXsgTlVMTCB9CiAJCX0KLQl9Ci0JU0FGRV9GQ0xPU0UoZmlsZSk7CisJfSwKKwlbVFNUX0NH
Uk9VUF9NRU1PUlldID0geyAibWVtb3J5IiwgLmlubmVyID0gKGl0ZW1zX3QpeworCQkJeyAibWVt
b3J5LmN1cnJlbnQiLCAibWVtb3J5LnVzYWdlX2luX2J5dGVzIiB9LAorCQkJeyAibWVtb3J5Lm1h
eCIsICJtZW1vcnkubGltaXRfaW5fYnl0ZXMiIH0sCisJCQl7ICJtZW1vcnkuc3dhcHBpbmVzcyIs
ICJtZW1vcnkuc3dhcHBpbmVzcyIgfSwKKwkJCXsgIm1lbW9yeS5zd2FwLmN1cnJlbnQiLCAibWVt
b3J5Lm1lbXN3LnVzYWdlX2luX2J5dGVzIiB9LAorCQkJeyAibWVtb3J5LnN3YXAubWF4IiwgIm1l
bW9yeS5tZW1zdy5saW1pdF9pbl9ieXRlcyIgfSwKKwkJCXsgIm1lbW9yeS5rbWVtLnVzYWdlX2lu
X2J5dGVzIiwgIm1lbW9yeS5rbWVtLnVzYWdlX2luX2J5dGVzIiB9LAorCQkJeyAibWVtb3J5Lmtt
ZW0ubGltaXRfaW5fYnl0ZXMiLCAibWVtb3J5LmttZW0udXNhZ2VfaW5fYnl0ZXMiIH0sCisJCQl7
IE5VTEwgfQorCQl9LAorCSAgLmNzc19pbmR4ID0gVFNUX0NHUk9VUF9NRU1PUlkKKwl9LAorCVtU
U1RfQ0dST1VQX0NQVVNFVF0gPSB7ICJjcHVzZXQiLCAuaW5uZXIgPSAoaXRlbXNfdCl7CisJCQl7
ICJjcHVzZXQuY3B1cyIsICJjcHVzZXQuY3B1cyIgfSwKKwkJCXsgImNwdXNldC5tZW1zIiwgImNw
dXNldC5tZW1zIiB9LAorCQkJeyAiY3B1c2V0Lm1lbW9yeV9taWdyYXRlIiwgImNwdXNldC5tZW1v
cnlfbWlncmF0ZSIgfSwKKwkJCXsgTlVMTCB9CisJCX0sCisJICAuY3NzX2luZHggPSBUU1RfQ0dS
T1VQX0NQVVNFVAorCX0sCisJeyBOVUxMIH0KK307CiAKLQlyZXR1cm4gY2dfY2hlY2s7CitzdGF0
aWMgY29uc3Qgc3RydWN0IHRzdF9jZ3JvdXBfb3B0cyBkZWZhdWx0X29wdHMgPSB7IDAgfTsKKwor
LyogV2Ugc2hvdWxkIHByb2JhYmx5IGFsbG93IHRoZXNlIHRvIGJlIHNldCBpbiBlbnZpcm9ubWVu
dAorICogdmFyaWFibGVzICovCitzdGF0aWMgY29uc3QgY2hhciAqbHRwX2Nncm91cF9kaXIgPSAi
bHRwIjsKK3N0YXRpYyBjb25zdCBjaGFyICpsdHBfY2dyb3VwX2RyYWluX2RpciA9ICJkcmFpbiI7
CitzdGF0aWMgY2hhciB0ZXN0X2Nncm91cF9kaXJbUEFUSF9NQVgvNF07CitzdGF0aWMgY29uc3Qg
Y2hhciAqbHRwX21vdW50X3ByZWZpeCA9ICIvdG1wL2Nncm91cF8iOworc3RhdGljIGNvbnN0IGNo
YXIgKmx0cF92Ml9tb3VudCA9ICJ1bmlmaWVkIjsKKworI2RlZmluZSBmaXJzdF9yb290CQkJCVwK
Kwkocm9vdHNbMF0udmVyID8gcm9vdHMgOiByb290cyArIDEpCisjZGVmaW5lIGZvcl9lYWNoX3Jv
b3QocikJCQlcCisJZm9yICgocikgPSBmaXJzdF9yb290OyAociktPnZlcjsgKHIpKyspCisjZGVm
aW5lIGZvcl9lYWNoX3YxX3Jvb3QocikJCQlcCisJZm9yICgocikgPSByb290cyArIDE7IChyKS0+
dmVyOyAocikrKykKKyNkZWZpbmUgZm9yX2VhY2hfY3NzKGNzcykJCQlcCisJZm9yICgoY3NzKSA9
IGl0ZW1zICsgMTsgKGNzcyktPm5hbWU7IChjc3MpKyspCisKKy8qIENvbnRyb2xsZXIgaXRlbXMg
bWF5IG9ubHkgYmUgaW4gYSBzaW5nbGUgdHJlZS4gU28gd2hlbiAoc3MpID4gMAorICogd2Ugb25s
eSBsb29wIG9uY2UuCisgKi8KKyNkZWZpbmUgZm9yX2VhY2hfdHJlZShjZywgY3NzLCB0KQkJCQkJ
XAorCWZvciAoKHQpID0gKGNzcykgPyAoY2cpLT50cmVlc19ieV9jc3MgKyAoY3NzKSA6IChjZykt
PnRyZWVzOwlcCisJICAgICAqKHQpOwkJCQkJCQlcCisJICAgICAodCkgPSAoY3NzKSA/IChjZykt
PnRyZWVzICsgVFNUX0NHUk9VUF9NQVhfVFJFRVMgOiAodCkgKyAxKQorCitzdGF0aWMgaW50IGhh
c19jc3ModWludDMyX3QgY3NzX2ZpZWxkLCBlbnVtIHRzdF9jZ3JvdXBfY3NzIHR5cGUpCit7CisJ
cmV0dXJuICEhKGNzc19maWVsZCAmICgxIDw8IHR5cGUpKTsKIH0KIAotZW51bSB0c3RfY2dyb3Vw
X3ZlciB0c3RfY2dyb3VwX3ZlcnNpb24odm9pZCkKK3N0YXRpYyB2b2lkIGFkZF9jc3ModWludDMy
X3QgKmNzc19maWVsZCwgY29uc3Qgc3RydWN0IGNncm91cF9pdGVtICpjc3MpCiB7Ci0gICAgICAg
IGVudW0gdHN0X2Nncm91cF92ZXIgY2dfdmVyOworCSpjc3NfZmllbGQgfD0gMSA8PCBjc3MtPmNz
c19pbmR4OworfQogCi0gICAgICAgIGlmICh0c3RfY2dyb3VwX2NoZWNrKCJjZ3JvdXAyIikpIHsK
LSAgICAgICAgICAgICAgICBpZiAoIXRzdF9pc19tb3VudGVkKCJjZ3JvdXAyIikgJiYgdHN0X2lz
X21vdW50ZWQoImNncm91cCIpKQotICAgICAgICAgICAgICAgICAgICAgICAgY2dfdmVyID0gVFNU
X0NHUk9VUF9WMTsKLSAgICAgICAgICAgICAgICBlbHNlCi0gICAgICAgICAgICAgICAgICAgICAg
ICBjZ192ZXIgPSBUU1RfQ0dST1VQX1YyOworc3RydWN0IGNncm91cF9yb290ICp0c3RfY2dyb3Vw
X3Jvb3RfZ2V0KHZvaWQpCit7CisJcmV0dXJuIHJvb3RzWzBdLnZlciA/IHJvb3RzIDogcm9vdHMg
KyAxOworfQogCi0gICAgICAgICAgICAgICAgZ290byBvdXQ7Ci0gICAgICAgIH0KK3N0YXRpYyBp
bnQgY2dyb3VwX3YyX21vdW50ZWQodm9pZCkKK3sKKwlyZXR1cm4gISFyb290c1swXS52ZXI7Cit9
CisKK3N0YXRpYyBpbnQgY2dyb3VwX3YxX21vdW50ZWQodm9pZCkKK3sKKwlyZXR1cm4gISFyb290
c1sxXS52ZXI7Cit9CiAKLSAgICAgICAgaWYgKHRzdF9jZ3JvdXBfY2hlY2soImNncm91cCIpKQot
ICAgICAgICAgICAgICAgIGNnX3ZlciA9IFRTVF9DR1JPVVBfVjE7CitzdGF0aWMgaW50IGNncm91
cF9tb3VudGVkKHZvaWQpCit7CisJcmV0dXJuIGNncm91cF92Ml9tb3VudGVkKCkgfHwgY2dyb3Vw
X3YxX21vdW50ZWQoKTsKK30KIAotICAgICAgICBpZiAoIWNnX3ZlcikKLSAgICAgICAgICAgICAg
ICB0c3RfYnJrKFRDT05GLCAiQ2dyb3VwIGlzIG5vdCBjb25maWd1cmVkIik7CitzdGF0aWMgc3Ry
dWN0IGNncm91cF9pdGVtICpjZ3JvdXBfZ2V0X2NzcyhlbnVtIHRzdF9jZ3JvdXBfY3NzIHR5cGUp
Cit7CisJcmV0dXJuIGl0ZW1zICsgdHlwZTsKK30KIAotb3V0OgotICAgICAgICByZXR1cm4gY2df
dmVyOworc3RhdGljIGludCBjZ3JvdXBfY3NzX29uX3YyKGNvbnN0IHN0cnVjdCBjZ3JvdXBfaXRl
bSAqY3NzKQoreworCXJldHVybiBjc3MtPnJvb3QgJiYgY3NzLT5yb290LT52ZXIgPT0gVFNUX0NH
Uk9VUF9WMjsKIH0KIAotc3RhdGljIHZvaWQgdHN0X2Nncm91cDFfbW91bnQoY29uc3QgY2hhciAq
bmFtZSwgY29uc3QgY2hhciAqb3B0aW9uLAotCQkJY29uc3QgY2hhciAqbW50X3BhdGgsIGNvbnN0
IGNoYXIgKm5ld19wYXRoKQoraW50IHRzdF9jZ3JvdXBfdHJlZV9tayhjb25zdCBzdHJ1Y3QgdHN0
X2Nncm91cF90cmVlICpwYXJlbnQsCisJCSAgICAgICBjb25zdCBjaGFyICpuYW1lLAorCQkgICAg
ICAgc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSAqbmV3KQogewotCWNoYXIga25vYl9wYXRoW1BBVEhf
TUFYXTsKLQlpZiAodHN0X2lzX21vdW50ZWQobW50X3BhdGgpKQotCQlnb3RvIG91dDsKKwljaGFy
ICpkcGF0aDsKIAotCVNBRkVfTUtESVIobW50X3BhdGgsIDA3NzcpOwotCWlmIChtb3VudChuYW1l
LCBtbnRfcGF0aCwgImNncm91cCIsIDAsIG9wdGlvbikgPT0gLTEpIHsKLQkJaWYgKGVycm5vID09
IEVOT0RFVikgewotCQkJaWYgKHJtZGlyKG1udF9wYXRoKSA9PSAtMSkKLQkJCQl0c3RfcmVzKFRX
QVJOIHwgVEVSUk5PLCAicm1kaXIgJXMgZmFpbGVkIiwgbW50X3BhdGgpOwotCQkJdHN0X2JyayhU
Q09ORiwKLQkJCQkgIkNncm91cCB2MSBpcyBub3QgY29uZmlndXJlZCBpbiBrZXJuZWwiKTsKLQkJ
fQotCQl0c3RfYnJrKFRCUk9LIHwgVEVSUk5PLCAibW91bnQgJXMiLCBtbnRfcGF0aCk7CisJbmV3
LT5yb290ID0gcGFyZW50LT5yb290OworCW5ldy0+bmFtZSA9IG5hbWU7CisJbmV3LT5wYXJlbnQg
PSBwYXJlbnQ7CisJbmV3LT5jc3NfZmllbGQgPSBwYXJlbnQtPmNzc19maWVsZDsKKwluZXctPndl
X2NyZWF0ZWRfaXQgPSAwOworCisJaWYgKCFta2RpcmF0KHBhcmVudC0+ZGlyLCBuYW1lLCAwNzc3
KSkgeworCQluZXctPndlX2NyZWF0ZWRfaXQgPSAxOworCQlnb3RvIG9wZW5kaXI7CiAJfQogCi0J
LyoKLQkgKiBXZSBzaG91bGQgYXNzaWduIG9uZSBvciBtb3JlIG1lbW9yeSBub2RlcyB0byBjcHVz
ZXQubWVtcyBhbmQKLQkgKiBjcHVzZXQuY3B1cywgb3RoZXJ3aXNlLCBlY2hvICQkID4gdGFza3Mg
Z2l2ZXMg4oCcRU5PU1BDOiBubyBzcGFjZQotCSAqIGxlZnQgb24gZGV2aWNl4oCdIHdoZW4gdHJ5
aW5nIHRvIHVzZSBjcHVzZXQuCi0JICoKLQkgKiBPciwgc2V0dGluZyBjZ3JvdXAuY2xvbmVfY2hp
bGRyZW4gdG8gMSBjYW4gaGVscCBpbiBhdXRvbWF0aWNhbGx5Ci0JICogaW5oZXJpdGluZyBtZW1v
cnkgYW5kIG5vZGUgc2V0dGluZyBmcm9tIHBhcmVudCBjZ3JvdXAgd2hlbiBhCi0JICogY2hpbGQg
Y2dyb3VwIGlzIGNyZWF0ZWQuCi0JICovCi0JaWYgKHN0cmNtcChvcHRpb24sICJjcHVzZXQiKSA9
PSAwKSB7Ci0JCXNwcmludGYoa25vYl9wYXRoLCAiJXMvY2dyb3VwLmNsb25lX2NoaWxkcmVuIiwg
bW50X3BhdGgpOwotCQlTQUZFX0ZJTEVfU0NBTkYoa25vYl9wYXRoLCAiJWQiLCAmY2xvbmVfY2hp
bGRyZW4pOwotCQlTQUZFX0ZJTEVfUFJJTlRGKGtub2JfcGF0aCwgIiVkIiwgMSk7CisJaWYgKGVy
cm5vID09IEVFWElTVCkKKwkJZ290byBvcGVuZGlyOworCisJZHBhdGggPSB0c3RfZGVjb2RlX2Zk
KHBhcmVudC0+ZGlyKTsKKworCWlmIChlcnJubyA9PSBFQUNDRVMpIHsKKwkJdHN0X2JyayhUQ09O
RiB8IFRFUlJOTywKKwkJCSJMYWNrIHBlcm1pc3Npb24gdG8gbWFrZSAnJXMvJXMnOyBwcmVtYWtl
IGl0IG9yIHJ1biBhcyByb290IiwKKwkJCWRwYXRoLCBuYW1lKTsKKwl9IGVsc2UgeworCQl0c3Rf
YnJrKFRCUk9LIHwgVEVSUk5PLAorCQkJIm1rZGlyYXQoJWQ8JXM+LCAnJXMnLCAwNzc3KSIsIHBh
cmVudC0+ZGlyLCBkcGF0aCwgbmFtZSk7CiAJfQotb3V0OgotCVNBRkVfTUtESVIobmV3X3BhdGgs
IDA3NzcpOwogCi0JdHN0X3JlcyhUSU5GTywgIkNncm91cCglcykgdjEgbW91bnQgYXQgJXMgc3Vj
Y2VzcyIsIG9wdGlvbiwgbW50X3BhdGgpOworCXJldHVybiAtMTsKK29wZW5kaXI6CisJbmV3LT5k
aXIgPSBTQUZFX09QRU5BVChwYXJlbnQtPmRpciwgbmFtZSwgT19QQVRIIHwgT19ESVJFQ1RPUlkp
OworCisJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyB2b2lkIHRzdF9jZ3JvdXAyX21vdW50KGNvbnN0
IGNoYXIgKm1udF9wYXRoLCBjb25zdCBjaGFyICpuZXdfcGF0aCkKK3ZvaWQgdHN0X2Nncm91cF9w
cmludF9jb25maWcodm9pZCkKIHsKLQlpZiAodHN0X2lzX21vdW50ZWQobW50X3BhdGgpKQotCQln
b3RvIG91dDsKKwlzdHJ1Y3QgY2dyb3VwX3Jvb3QgKnQ7CisJc3RydWN0IGNncm91cF9pdGVtICpj
c3M7CiAKLQlTQUZFX01LRElSKG1udF9wYXRoLCAwNzc3KTsKLQlpZiAobW91bnQoImNncm91cDIi
LCBtbnRfcGF0aCwgImNncm91cDIiLCAwLCBOVUxMKSA9PSAtMSkgewotCQlpZiAoZXJybm8gPT0g
RU5PREVWKSB7Ci0JCQlpZiAocm1kaXIobW50X3BhdGgpID09IC0xKQotCQkJCXRzdF9yZXMoVFdB
Uk4gfCBURVJSTk8sICJybWRpciAlcyBmYWlsZWQiLCBtbnRfcGF0aCk7Ci0JCQl0c3RfYnJrKFRD
T05GLAotCQkJCSAiQ2dyb3VwIHYyIGlzIG5vdCBjb25maWd1cmVkIGluIGtlcm5lbCIpOwotCQl9
Ci0JCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJtb3VudCAlcyIsIG1udF9wYXRoKTsKKwl0c3Rf
cmVzKFRJTkZPLCAiRGV0ZWN0ZWQgQ29udHJvbGxlcnM6Iik7CisKKwlmb3JfZWFjaF9jc3MoY3Nz
KSB7CisJCXQgPSBjc3MtPnJvb3Q7CisKKwkJaWYgKCF0KQorCQkJY29udGludWU7CisKKwkJdHN0
X3JlcyhUSU5GTywgIlx0JS4xMHMgJXMgQCAlczolcyIsCisJCQljc3MtPm5hbWUsCisJCQl0LT5u
b19wcmVmaXggPyAiW25vcHJlZml4XSIgOiAiIiwKKwkJCXQtPnZlciA9PSBUU1RfQ0dST1VQX1Yx
ID8gIlYxIiA6ICJWMiIsCisJCQl0LT5wYXRoKTsKKwl9Cit9CisKK3N0YXRpYyBjb25zdCBzdHJ1
Y3QgY2dyb3VwX2l0ZW0gKmNncm91cF9maW5kX2Nzcyhjb25zdCBjaGFyICpuYW1lKQoreworCXN0
cnVjdCBjZ3JvdXBfaXRlbSAqbmV4dCA9IGl0ZW1zOworCisJd2hpbGUgKG5leHQtPm5hbWUgJiYg
c3RyY21wKG5hbWUsIG5leHQtPm5hbWUpKQorCQluZXh0Kys7CisKKwlpZiAoIW5leHQtPm5hbWUp
CisJCW5leHQgPSBOVUxMOworCisJcmV0dXJuIG5leHQ7Cit9CisKKy8qIERldGVybWluZSBpZiBh
IG1vdW50ZWQgY2dyb3VwIGhpZXJhcmNoeSAodHJlZSkgaXMgdW5pcXVlIGFuZCByZWNvcmQgaXQg
aWYgc28uCisgKgorICogRm9yIENHcm91cHMgVjIgdGhpcyBpcyB2ZXJ5IHNpbXBsZSBhcyB0aGVy
ZSBpcyBvbmx5IG9uZQorICogaGllcmFyY2h5LiBXZSBqdXN0IHJlY29yZCB3aGljaCBjb250cm9s
bGVycyBhcmUgYXZhaWxhYmxlIGFuZCBjaGVjaworICogaWYgdGhpcyBtYXRjaGVzIHdoYXQgd2Ug
cmVhZCBmcm9tIGFueSBwcmV2aW91cyBtb3VudCBwb2ludHMuCisgKgorICogRm9yIFYxIHRoZSBz
ZXQgb2YgY29udHJvbGxlcnMgUyBpcyBwYXJ0aXRpb25lZCBpbnRvIHNldHMge1BfMSwgUF8yLAor
ICogLi4uLCBQX259IHdpdGggb25lIG9yIG1vcmUgY29udHJvbGxlcnMgaW4gZWFjaCBwYXJ0aW9u
LiBFYWNoCisgKiBwYXJ0aXRpb24gUF9uIGNhbiBiZSBtb3VudGVkIG11bHRpcGxlIHRpbWVzLCBi
dXQgdGhlIHNhbWUKKyAqIGNvbnRyb2xsZXIgY2FuIG5vdCBhcHBlYXIgaW4gbW9yZSB0aGFuIG9u
ZSBwYXJ0aXRpb24uIFVzdWFsbHkgZWFjaAorICogcGFydGl0aW9uIGNvbnRhaW5zIGEgc2luZ2xl
IGNvbnRyb2xsZXIsIGJ1dCwgZm9yIGV4YW1wbGUsIGNwdSBhbmQKKyAqIGNwdWFjY3QgYXJlIG9m
dGVuIG1vdW50ZWQgdG9nZXRoZXIgaW4gdGhlIHNhbWUgcGFydGlpb24uCisgKgorICogRWFjaCBj
b250cm9sbGVyIHBhcnRpdGlvbiBoYXMgaXRzIG93biBoaWVyYXJjaHkgd2hpY2ggd2UgbXVzdCB0
cmFjaworICogYW5kIHVwZGF0ZSBpbmRlcGVuZGVudGx5LgorICovCitzdGF0aWMgdm9pZCBjZ3Jv
dXBfcm9vdF9zY2FuKGNvbnN0IGNoYXIgKnR5cGUsIGNvbnN0IGNoYXIgKnBhdGgsIGNoYXIgKm9w
dHMpCit7CisJc3RydWN0IGNncm91cF9yb290ICp0ID0gcm9vdHM7CisJY29uc3Qgc3RydWN0IGNn
cm91cF9pdGVtICpjc3M7CisJc3RydWN0IGNncm91cF9pdGVtICpzczsKKwl1aW50MzJfdCBjc3Nf
ZmllbGQgPSAwOworCWludCBub19wcmVmaXggPSAwOworCWNoYXIgYnVmW0JVRlNJWl07CisJY2hh
ciAqdG9rOworCWludCBkZmQgPSBTQUZFX09QRU4ocGF0aCwgT19QQVRIIHwgT19ESVJFQ1RPUlkp
OworCisJaWYgKCFzdHJjbXAodHlwZSwgImNncm91cCIpKQorCQlnb3RvIHYxOworCisJU0FGRV9G
SUxFX1JFQURBVChkZmQsICJjZ3JvdXAuY29udHJvbGxlcnMiLCBidWYsIHNpemVvZihidWYpKTsK
KworCWZvciAodG9rID0gc3RydG9rKGJ1ZiwgIiAiKTsgdG9rOyB0b2sgPSBzdHJ0b2soTlVMTCwg
IiAiKSkgeworCQlpZiAoKGNzcyA9IGNncm91cF9maW5kX2Nzcyh0b2spKSkKKwkJCWFkZF9jc3Mo
JmNzc19maWVsZCwgY3NzKTsKKwl9CisKKwlpZiAodC0+dmVyICYmIGNzc19maWVsZCA9PSB0LT5j
c3NfZmllbGQpCisJCWdvdG8gZGlzY2FyZDsKKworCWlmICh0LT5jc3NfZmllbGQpCisJCXRzdF9i
cmsoVEJST0ssICJBdmFpbGFibGUgVjIgY29udHJvbGxlcnMgYXJlIGNoYW5naW5nIGJldHdlZW4g
c2NhbnM/Iik7CisKKwl0LT52ZXIgPSBUU1RfQ0dST1VQX1YyOworCisJZ290byBiYWNrcmVmOwor
Cit2MToKKwlmb3IgKHRvayA9IHN0cnRvayhvcHRzLCAiLCIpOyB0b2s7IHRvayA9IHN0cnRvayhO
VUxMLCAiLCIpKSB7CisJCWlmICgoY3NzID0gY2dyb3VwX2ZpbmRfY3NzKHRvaykpKQorCQkJYWRk
X2NzcygmY3NzX2ZpZWxkLCBjc3MpOworCisJCW5vX3ByZWZpeCB8PSAhc3RyY21wKCJub3ByZWZp
eCIsIHRvayk7CiAJfQogCi1vdXQ6Ci0JU0FGRV9NS0RJUihuZXdfcGF0aCwgMDc3Nyk7CisJaWYg
KCFjc3NfZmllbGQpCisJCWdvdG8gZGlzY2FyZDsKIAotCXRzdF9yZXMoVElORk8sICJDZ3JvdXAg
djIgbW91bnQgYXQgJXMgc3VjY2VzcyIsIG1udF9wYXRoKTsKKwlmb3JfZWFjaF92MV9yb290KHQp
IHsKKwkJaWYgKCEoY3NzX2ZpZWxkICYgdC0+Y3NzX2ZpZWxkKSkKKwkJCWNvbnRpbnVlOworCisJ
CWlmIChjc3NfZmllbGQgPT0gdC0+Y3NzX2ZpZWxkKQorCQkJZ290byBkaXNjYXJkOworCisJCXRz
dF9icmsoVEJST0ssCisJCQkiVGhlIGludGVyc2VjdGlvbiBvZiB0d28gZGlzdGluY3Qgc2V0cyBv
ZiBtb3VudGVkIGNvbnRyb2xsZXJzIHNob3VsZCBiZSBudWxsPyIKKwkJCSJDaGVjayAnJXMnIGFu
ZCAnJXMnIiwgdC0+cGF0aCwgcGF0aCk7CisJfQorCisJaWYgKHQgPj0gcm9vdHMgKyBUU1RfQ0dS
T1VQX01BWF9UUkVFUykgeworCQl0c3RfYnJrKFRCUk9LLCAiVW5pcXVlIGNvbnRyb2xsZXIgbW91
bnRzIGhhdmUgZXhjZWVkZWQgb3VyIGxpbWl0ICVkPyIsCisJCQlUU1RfQ0dST1VQX01BWF9UUkVF
Uyk7CisJfQorCisJdC0+dmVyID0gVFNUX0NHUk9VUF9WMTsKKworYmFja3JlZjoKKwlzdHJjcHko
dC0+cGF0aCwgcGF0aCk7CisJdC0+bW50LnJvb3QgPSB0OworCXQtPm1udC5uYW1lID0gdC0+cGF0
aDsKKwl0LT5tbnQuZGlyID0gZGZkOworCXQtPmNzc19maWVsZCA9IGNzc19maWVsZDsKKwl0LT5u
b19wcmVmaXggPSBub19wcmVmaXg7CisKKwlmb3JfZWFjaF9jc3Moc3MpIHsKKwkJaWYgKGhhc19j
c3ModC0+Y3NzX2ZpZWxkLCBzcy0+Y3NzX2luZHgpKQorCQkJc3MtPnJvb3QgPSB0OworCX0KKwor
CXJldHVybjsKKworZGlzY2FyZDoKKwljbG9zZShkZmQpOwogfQogCi1zdGF0aWMgdm9pZCB0c3Rf
Y2dyb3VwTl91bW91bnQoY29uc3QgY2hhciAqbW50X3BhdGgsIGNvbnN0IGNoYXIgKm5ld19wYXRo
KQordm9pZCB0c3RfY2dyb3VwX3NjYW4odm9pZCkKIHsKLQlGSUxFICpmcDsKLQlpbnQgZmQ7Ci0J
Y2hhciBzX25ld1tCVUZTSVpdLCBzW0JVRlNJWl0sIHZhbHVlW0JVRlNJWl07Ci0JY2hhciBrbm9i
X3BhdGhbUEFUSF9NQVhdOworCXN0cnVjdCBtbnRlbnQgKm1udDsKKwlGSUxFICpmID0gc2V0bW50
ZW50KCIvcHJvYy9zZWxmL21vdW50cyIsICJyIik7CisKKwlpZiAoIWYpCisJCXRzdF9icmsoVEJS
T0sgfCBURVJSTk8sICJDYW4ndCBvcGVuIC9wcm9jL3NlbGYvbW91bnRzIik7CisKKwltbnQgPSBn
ZXRtbnRlbnQoZik7CisJaWYgKCFtbnQpCisJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJDYW4n
dCByZWFkIG1vdW50cyBvciBubyBtb3VudHM/Iik7CiAKLQlpZiAoIXRzdF9pc19tb3VudGVkKG1u
dF9wYXRoKSkKKwlkbyB7CisJCWlmIChzdHJuY21wKG1udC0+bW50X3R5cGUsICJjZ3JvdXAiLCA2
KSkKKwkJCWNvbnRpbnVlOworCisJCWNncm91cF9yb290X3NjYW4obW50LT5tbnRfdHlwZSwgbW50
LT5tbnRfZGlyLCBtbnQtPm1udF9vcHRzKTsKKwl9IHdoaWxlICgobW50ID0gZ2V0bW50ZW50KGYp
KSk7Cit9CisKK3N0YXRpYyB2b2lkIGNncm91cF9tb3VudF92Mih2b2lkKQoreworCWNoYXIgcGF0
aFtQQVRIX01BWF07CisKKwlzcHJpbnRmKHBhdGgsICIlcyVzIiwgbHRwX21vdW50X3ByZWZpeCwg
bHRwX3YyX21vdW50KTsKKworCWlmICghbWtkaXIocGF0aCwgMDc3NykpIHsKKwkJcm9vdHNbMF0u
bW50LndlX2NyZWF0ZWRfaXQgPSAxOworCQlnb3RvIG1vdW50OworCX0KKworCWlmIChlcnJubyA9
PSBFRVhJU1QpCisJCWdvdG8gbW91bnQ7CisKKwlpZiAoZXJybm8gPT0gRUFDQ0VTKSB7CisJCXRz
dF9yZXMoVElORk8gfCBURVJSTk8sCisJCQkiTGFjayBwZXJtaXNzaW9uIHRvIG1ha2UgJXMsIHBy
ZW1ha2UgaXQgb3IgcnVuIGFzIHJvb3QiLAorCQkJcGF0aCk7CiAJCXJldHVybjsKKwl9CiAKLQkv
KiBNb3ZlIGFsbCBwcm9jZXNzZXMgaW4gdGFzayh2MjogY2dyb3VwLnByb2NzKSB0byBpdHMgcGFy
ZW50IG5vZGUuICovCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKQotCQlzcHJpbnRm
KHMsICIlcy90YXNrcyIsIG1udF9wYXRoKTsKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBf
VjIpCi0JCXNwcmludGYocywgIiVzL2Nncm91cC5wcm9jcyIsIG1udF9wYXRoKTsKLQotCWZkID0g
b3BlbihzLCBPX1dST05MWSk7Ci0JaWYgKGZkID09IC0xKQotCQl0c3RfcmVzKFRXQVJOIHwgVEVS
Uk5PLCAib3BlbiAlcyIsIHMpOwotCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKQot
CQlzbnByaW50ZihzX25ldywgQlVGU0laLCAiJXMvdGFza3MiLCBuZXdfcGF0aCk7Ci0JaWYgKHRz
dF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YyKQotCQlzbnByaW50ZihzX25ldywgQlVGU0laLCAiJXMv
Y2dyb3VwLnByb2NzIiwgbmV3X3BhdGgpOwotCi0JZnAgPSBmb3BlbihzX25ldywgInIiKTsKLQlp
ZiAoZnAgPT0gTlVMTCkKLQkJdHN0X3JlcyhUV0FSTiB8IFRFUlJOTywgImZvcGVuICVzIiwgc19u
ZXcpOwotCWlmICgoZmQgIT0gLTEpICYmIChmcCAhPSBOVUxMKSkgewotCQl3aGlsZSAoZmdldHMo
dmFsdWUsIEJVRlNJWiwgZnApICE9IE5VTEwpCi0JCQlpZiAod3JpdGUoZmQsIHZhbHVlLCBzdHJs
ZW4odmFsdWUpIC0gMSkKLQkJCSAgICAhPSAoc3NpemVfdClzdHJsZW4odmFsdWUpIC0gMSkKLQkJ
CQl0c3RfcmVzKFRXQVJOIHwgVEVSUk5PLCAid3JpdGUgJXMiLCBzKTsKLQl9Ci0JaWYgKHRzdF9j
Z192ZXIgJiBUU1RfQ0dST1VQX1YxKSB7Ci0JCXNwcmludGYoa25vYl9wYXRoLCAiJXMvY3B1c2V0
LmNwdXMiLCBtbnRfcGF0aCk7Ci0JCWlmICghYWNjZXNzKGtub2JfcGF0aCwgRl9PSykpIHsKLQkJ
CXNwcmludGYoa25vYl9wYXRoLCAiJXMvY2dyb3VwLmNsb25lX2NoaWxkcmVuIiwgbW50X3BhdGgp
OwotCQkJU0FGRV9GSUxFX1BSSU5URihrbm9iX3BhdGgsICIlZCIsIGNsb25lX2NoaWxkcmVuKTsK
LQkJfQorCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJta2RpciglcywgMDc3NykiLCBwYXRoKTsK
KworbW91bnQ6CisJaWYgKCFtb3VudCgiY2dyb3VwMiIsIHBhdGgsICJjZ3JvdXAyIiwgMCwgTlVM
TCkpIHsKKwkJdHN0X3JlcyhUSU5GTywgIk1vdW50ZWQgVjIgQ0dyb3VwcyBvbiAlcyIsIHBhdGgp
OworCQl0c3RfY2dyb3VwX3NjYW4oKTsKKwkJcm9vdHNbMF0ud2VfbW91bnRlZF9pdCA9IDE7CisJ
CXJldHVybjsKIAl9Ci0JaWYgKGZkICE9IC0xKQotCQljbG9zZShmZCk7Ci0JaWYgKGZwICE9IE5V
TEwpCi0JCWZjbG9zZShmcCk7Ci0JaWYgKHJtZGlyKG5ld19wYXRoKSA9PSAtMSkKLQkJdHN0X3Jl
cyhUV0FSTiB8IFRFUlJOTywgInJtZGlyICVzIiwgbmV3X3BhdGgpOwotCWlmICh1bW91bnQobW50
X3BhdGgpID09IC0xKQotCQl0c3RfcmVzKFRXQVJOIHwgVEVSUk5PLCAidW1vdW50ICVzIiwgbW50
X3BhdGgpOwotCWlmIChybWRpcihtbnRfcGF0aCkgPT0gLTEpCi0JCXRzdF9yZXMoVFdBUk4gfCBU
RVJSTk8sICJybWRpciAlcyIsIG1udF9wYXRoKTsKLQotCWlmICh0c3RfY2dfdmVyICYgVFNUX0NH
Uk9VUF9WMSkKLQkJdHN0X3JlcyhUSU5GTywgIkNncm91cCB2MSB1bm1vdW50IHN1Y2Nlc3MiKTsK
LQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIpCi0JCXRzdF9yZXMoVElORk8sICJDZ3Jv
dXAgdjIgdW5tb3VudCBzdWNjZXNzIik7Ci19Ci0KLXN0cnVjdCB0c3RfY2dyb3VwX3BhdGggewot
CWNoYXIgKm1udF9wYXRoOwotCWNoYXIgKm5ld19wYXRoOwotCXN0cnVjdCB0c3RfY2dyb3VwX3Bh
dGggKm5leHQ7Ci19OwogCi1zdGF0aWMgc3RydWN0IHRzdF9jZ3JvdXBfcGF0aCAqdHN0X2Nncm91
cF9wYXRoczsKKwl0c3RfcmVzKFRJTkZPIHwgVEVSUk5PLCAiQ291bGQgbm90IG1vdW50IFYyIENH
cm91cHMgb24gJXMiLCBwYXRoKTsKIAotc3RhdGljIHZvaWQgdHN0X2Nncm91cF9zZXRfcGF0aChj
b25zdCBjaGFyICpjZ3JvdXBfZGlyKQorCWlmIChyb290c1swXS5tbnQud2VfY3JlYXRlZF9pdCkg
eworCQlyb290c1swXS5tbnQud2VfY3JlYXRlZF9pdCA9IDA7CisJCVNBRkVfUk1ESVIocGF0aCk7
CisJfQorfQorCitzdGF0aWMgdm9pZCBjZ3JvdXBfbW91bnRfdjEoZW51bSB0c3RfY2dyb3VwX2Nz
cyB0eXBlKQogewotCWNoYXIgY2dyb3VwX25ld19kaXJbUEFUSF9NQVhdOwotCXN0cnVjdCB0c3Rf
Y2dyb3VwX3BhdGggKnRzdF9jZ3JvdXBfcGF0aCwgKmE7CisJc3RydWN0IGNncm91cF9pdGVtICpj
c3MgPSBjZ3JvdXBfZ2V0X2Nzcyh0eXBlKTsKKwljaGFyIHBhdGhbUEFUSF9NQVhdOworCWludCBt
YWRlX2RpciA9IDA7CiAKLQlpZiAoIWNncm91cF9kaXIpCi0JCXRzdF9icmsoVEJST0ssICJJbnZh
bGlkIGNncm91cCBkaXIsIHBsZXNlIGNoZWNrIGNncm91cF9kaXIiKTsKKwlzcHJpbnRmKHBhdGgs
ICIlcyVzIiwgbHRwX21vdW50X3ByZWZpeCwgY3NzLT5uYW1lKTsKIAotCXNwcmludGYoY2dyb3Vw
X25ld19kaXIsICIlcy9sdHBfJWQiLCBjZ3JvdXBfZGlyLCByYW5kKCkpOworCWlmICghbWtkaXIo
cGF0aCwgMDc3NykpIHsKKwkJbWFkZV9kaXIgPSAxOworCQlnb3RvIG1vdW50OworCX0KIAotCS8q
IFRvIHN0b3JlIGNncm91cCBwYXRoIGluIHRoZSAncGF0aCcgbGlzdCAqLwotCXRzdF9jZ3JvdXBf
cGF0aCA9IFNBRkVfTUFMTE9DKHNpemVvZihzdHJ1Y3QgdHN0X2Nncm91cF9wYXRoKSk7Ci0JdHN0
X2Nncm91cF9wYXRoLT5tbnRfcGF0aCA9IFNBRkVfTUFMTE9DKHN0cmxlbihjZ3JvdXBfZGlyKSAr
IDEpOwotCXRzdF9jZ3JvdXBfcGF0aC0+bmV3X3BhdGggPSBTQUZFX01BTExPQyhzdHJsZW4oY2dy
b3VwX25ld19kaXIpICsgMSk7Ci0JdHN0X2Nncm91cF9wYXRoLT5uZXh0ID0gTlVMTDsKKwlpZiAo
ZXJybm8gPT0gRUVYSVNUKQorCQlnb3RvIG1vdW50OwogCi0JaWYgKCF0c3RfY2dyb3VwX3BhdGhz
KSB7Ci0JCXRzdF9jZ3JvdXBfcGF0aHMgPSB0c3RfY2dyb3VwX3BhdGg7Ci0JfSBlbHNlIHsKLQkJ
YSA9IHRzdF9jZ3JvdXBfcGF0aHM7Ci0JCWRvIHsKLQkJCWlmICghYS0+bmV4dCkgewotCQkJCWEt
Pm5leHQgPSB0c3RfY2dyb3VwX3BhdGg7Ci0JCQkJYnJlYWs7Ci0JCQl9Ci0JCQlhID0gYS0+bmV4
dDsKLQkJfSB3aGlsZSAoYSk7CisJaWYgKGVycm5vID09IEVBQ0NFUykgeworCQl0c3RfcmVzKFRJ
TkZPIHwgVEVSUk5PLAorCQkJIkxhY2sgcGVybWlzc2lvbiB0byBtYWtlICVzLCBwcmVtYWtlIGl0
IG9yIHJ1biBhcyByb290IiwKKwkJCXBhdGgpOworCQlyZXR1cm47CisJfQorCisJdHN0X2JyayhU
QlJPSyB8IFRFUlJOTywgIm1rZGlyKCVzLCAwNzc3KSIsIHBhdGgpOworCittb3VudDoKKwlpZiAo
bW91bnQoY3NzLT5uYW1lLCBwYXRoLCAiY2dyb3VwIiwgMCwgY3NzLT5uYW1lKSkgeworCQl0c3Rf
cmVzKFRJTkZPIHwgVEVSUk5PLAorCQkJIkNvdWxkIG5vdCBtb3VudCBWMSBDR3JvdXAgb24gJXMi
LCBwYXRoKTsKKworCQlpZiAobWFkZV9kaXIpCisJCQlTQUZFX1JNRElSKHBhdGgpOworCQlyZXR1
cm47CiAJfQogCi0Jc3ByaW50Zih0c3RfY2dyb3VwX3BhdGgtPm1udF9wYXRoLCAiJXMiLCBjZ3Jv
dXBfZGlyKTsKLQlzcHJpbnRmKHRzdF9jZ3JvdXBfcGF0aC0+bmV3X3BhdGgsICIlcyIsIGNncm91
cF9uZXdfZGlyKTsKKwl0c3RfcmVzKFRJTkZPLCAiTW91bnRlZCBWMSAlcyBDR3JvdXAgb24gJXMi
LCBjc3MtPm5hbWUsIHBhdGgpOworCXRzdF9jZ3JvdXBfc2NhbigpOworCWNzcy0+cm9vdC0+d2Vf
bW91bnRlZF9pdCA9IDE7CisJY3NzLT5yb290LT5tbnQud2VfY3JlYXRlZF9pdCA9IG1hZGVfZGly
OworCisJaWYgKHR5cGUgPT0gVFNUX0NHUk9VUF9NRU1PUlkpIHsKKwkJU0FGRV9GSUxFX1BSSU5U
RkFUKGNzcy0+cm9vdC0+bW50LmRpciwKKwkJCQkgICAibWVtb3J5LnVzZV9oaWVyYXJjaHkiLCAi
JWQiLCAxKTsKKwl9CiB9CiAKLXN0YXRpYyBjaGFyICp0c3RfY2dyb3VwX2dldF9wYXRoKGNvbnN0
IGNoYXIgKmNncm91cF9kaXIpCitzdGF0aWMgdm9pZCBjZ3JvdXBfY29weV9jcHVzZXQoY29uc3Qg
c3RydWN0IGNncm91cF9yb290ICp0KQogewotCXN0cnVjdCB0c3RfY2dyb3VwX3BhdGggKmE7CisJ
Y2hhciBidWZbQlVGU0laXTsKKwlpbnQgaTsKKwljb25zdCBjaGFyICpuMFtdID0geyJtZW1zIiwg
ImNwdXMifTsKKwljb25zdCBjaGFyICpuMVtdID0geyJjcHVzZXQubWVtcyIsICJjcHVzZXQuY3B1
cyJ9OworCWNvbnN0IGNoYXIgKipmbmFtZSA9IHQtPm5vX3ByZWZpeCA/IG4wIDogbjE7CisKKwlm
b3IgKGkgPSAwOyBpIDwgMjsgaSsrKSB7CisJCVNBRkVfRklMRV9SRUFEQVQodC0+bW50LmRpciwg
Zm5hbWVbaV0sIGJ1Ziwgc2l6ZW9mKGJ1ZikpOworCQlTQUZFX0ZJTEVfUFJJTlRGQVQodC0+bHRw
LmRpciwgZm5hbWVbaV0sICIlcyIsIGJ1Zik7CisJfQorfQogCi0JaWYgKCF0c3RfY2dyb3VwX3Bh
dGhzKQotCQlyZXR1cm4gTlVMTDsKKy8qIEVuc3VyZSB0aGUgc3BlY2lmaWVkIGNvbnRyb2xsZXIg
aXMgYXZhaWxhYmxlLgorICoKKyAqIEZpcnN0IHdlIGNoZWNrIGlmIHRoZSBzcGVjaWZpZWQgY29u
dHJvbGxlciBoYXMgYSBrbm93biBtb3VudCBwb2ludCwKKyAqIGlmIG5vdCB0aGVuIHdlIHNjYW4g
dGhlIHN5c3RlbS4gSWYgd2UgZmluZCBpdCB0aGVuIHdlIGdvdG8gZW5zdXJpbmcKKyAqIHRoZSBM
VFAgZ3JvdXAgZXhpc3RzIGluIHRoZSBoaWVyYXJjaHkgdGhlIGNvbnRyb2xsZXIgaXMgdXNpbmcu
CisgKgorICogSWYgd2UgY2FuJ3QgZmluZCB0aGUgY29udHJvbGxlciwgdGhlbiB3ZSB0cnkgdG8g
Y3JlYXRlIGl0LiBGaXJzdCB3ZQorICogY2hlY2sgaWYgdGhlIFYyIGhpZXJhcmNoeS90cmVlIGlz
IG1vdW50ZWQuIElmIGl0IGlzbid0IHRoZW4gd2UgdHJ5CisgKiBtb3VudGluZyBpdCBhbmQgbG9v
ayBmb3IgdGhlIGNvbnRyb2xsZXIuIElmIGl0IGlzIGFscmVhZHkgbW91bnRlZAorICogdGhlbiB3
ZSBrbm93IHRoZSBjb250cm9sbGVyIGlzIG5vdCBhdmFpbGFibGUgb24gVjIgb24gdGhpcyBzeXN0
ZW0uCisgKgorICogSWYgd2UgY2FuJ3QgbW91bnQgVjIgb3IgdGhlIGNvbnRyb2xsZXIgaXMgbm90
IG9uIFYyLCB0aGVuIHdlIHRyeQorICogbW91bnRpbmcgaXQgb24gaXRzIG93biBWMSB0cmVlLgor
ICoKKyAqIE9uY2Ugd2UgaGF2ZSBtb3VudGVkIHRoZSBjb250cm9sbGVyIHNvbWVob3csIHdlIGNy
ZWF0ZSBhIGhpZXJhcmNoeQorICogb2YgY2dyb3Vwcy4gSWYgd2UgYXJlIG9uIFYyIHdlIGZpcnN0
IG5lZWQgdG8gZW5hYmxlIHRoZSBjb250cm9sbGVyCisgKiBmb3IgYWxsIGNoaWxkcmVuIG9mIHJv
b3QuIFRoZW4gd2UgY3JlYXRlIGhpZXJhcmNoeSBkZXNjcmliZWQgaW4KKyAqIHRzdF9jZ3JvdXAu
aC4KKyAqCisgKiBJZiB3ZSBhcmUgdXNpbmcgVjEgY3B1c2V0IHRoZW4gd2UgY29weSB0aGUgYXZh
aWxhYmxlIG1lbXMgYW5kIGNwdXMKKyAqIGZyb20gcm9vdCB0byB0aGUgbHRwIGdyb3VwIGFuZCBz
ZXQgY2xvbmVfY2hpbGRyZW4gb24gdGhlIGx0cCBncm91cAorICogdG8gZGlzdHJpYnV0ZSB0aGVz
ZSBzZXR0aW5ncyB0byB0aGUgdGVzdCBjZ3JvdXBzLiBUaGlzIG1lYW5zIHRoZQorICogdGVzdCBh
dXRob3IgZG9lcyBub3QgaGF2ZSB0byBjb3B5IHRoZXNlIHNldHRpbmdzIGJlZm9yZSB1c2luZyB0
aGUKKyAqIGNwdXNldC4KKyAqCisgKi8KK3ZvaWQgdHN0X2Nncm91cF9yZXF1aXJlKGVudW0gdHN0
X2Nncm91cF9jc3MgdHlwZSwKKwkJCWNvbnN0IHN0cnVjdCB0c3RfY2dyb3VwX29wdHMgKm9wdGlv
bnMpCit7CisJY29uc3QgY2hhciAqY29uc3QgY2dzYyA9ICJjZ3JvdXAuc3VidHJlZV9jb250cm9s
IjsKKwlzdHJ1Y3QgY2dyb3VwX2l0ZW0gKmNzcyA9IGNncm91cF9nZXRfY3NzKHR5cGUpOworCXN0
cnVjdCBjZ3JvdXBfcm9vdCAqdDsKIAotCWEgPSB0c3RfY2dyb3VwX3BhdGhzOworCWlmICghb3B0
aW9ucykKKwkJb3B0aW9ucyA9ICZkZWZhdWx0X29wdHM7CiAKLQl3aGlsZSAoc3RyY21wKGEtPm1u
dF9wYXRoLCBjZ3JvdXBfZGlyKSAhPSAwKXsKLQkJaWYgKCFhLT5uZXh0KSB7Ci0JCQl0c3RfcmVz
KFRJTkZPLCAiJXMgaXMgbm90IGZvdW5kIiwgY2dyb3VwX2Rpcik7Ci0JCQlyZXR1cm4gTlVMTDsK
LQkJfQotCQlhID0gYS0+bmV4dDsKLQl9OworCWlmIChjc3MtPndlX3JlcXVpcmVfaXQpCisJCXRz
dF9yZXMoVFdBUk4sICJEdXBsaWNhdGUgdHN0X2Nncm91cF9yZXF1aXJlKCVzLCApIiwgY3NzLT5u
YW1lKTsKKwljc3MtPndlX3JlcXVpcmVfaXQgPSAxOworCisJaWYgKGNzcy0+cm9vdCkKKwkJZ290
byBta2RpcnM7CisKKwl0c3RfY2dyb3VwX3NjYW4oKTsKKworCWlmIChjc3MtPnJvb3QpCisJCWdv
dG8gbWtkaXJzOwogCi0JcmV0dXJuIGEtPm5ld19wYXRoOworCWlmICghY2dyb3VwX3YyX21vdW50
ZWQoKSAmJiAhb3B0aW9ucy0+b25seV9tb3VudF92MSkKKwkJY2dyb3VwX21vdW50X3YyKCk7CisK
KwlpZiAoY3NzLT5yb290KQorCQlnb3RvIG1rZGlyczsKKworCWNncm91cF9tb3VudF92MSh0eXBl
KTsKKworCWlmICghY3NzLT5yb290KSB7CisJCXRzdF9icmsoVENPTkYsCisJCQkiJyVzJyBjb250
cm9sbGVyIHJlcXVpcmVkLCBidXQgbm90IGF2YWlsYWJsZSIsIGNzcy0+bmFtZSk7CisJfQorCitt
a2RpcnM6CisJdCA9IGNzcy0+cm9vdDsKKwlhZGRfY3NzKCZ0LT5tbnQuY3NzX2ZpZWxkLCBjc3Mp
OworCisJaWYgKGNncm91cF9jc3Nfb25fdjIoY3NzKSkgeworCQlpZiAodC0+d2VfbW91bnRlZF9p
dCkKKwkJCVNBRkVfRklMRV9QUklOVEZBVCh0LT5tbnQuZGlyLCBjZ3NjLCAiKyVzIiwgY3NzLT5u
YW1lKTsKKwkJZWxzZQorCQkJdHN0X2ZpbGVfcHJpbnRmYXQodC0+bW50LmRpciwgY2dzYywgIisl
cyIsIGNzcy0+bmFtZSk7CisJfQorCisJaWYgKCF0LT5sdHAuZGlyKQorCQl0c3RfY2dyb3VwX3Ry
ZWVfbWsoJnQtPm1udCwgbHRwX2Nncm91cF9kaXIsICZ0LT5sdHApOworCWVsc2UKKwkJdC0+bHRw
LmNzc19maWVsZCB8PSB0LT5tbnQuY3NzX2ZpZWxkOworCisJaWYgKGNncm91cF9jc3Nfb25fdjIo
Y3NzKSkgeworCQlTQUZFX0ZJTEVfUFJJTlRGQVQodC0+bHRwLmRpciwgY2dzYywgIislcyIsIGNz
cy0+bmFtZSk7CisJfSBlbHNlIHsKKwkJU0FGRV9GSUxFX1BSSU5URkFUKHQtPmx0cC5kaXIsICJj
Z3JvdXAuY2xvbmVfY2hpbGRyZW4iLAorCQkJCSAgICIlZCIsIDEpOworCisJCWlmICh0eXBlID09
IFRTVF9DR1JPVVBfQ1BVU0VUKQorCQkJY2dyb3VwX2NvcHlfY3B1c2V0KHQpOworCX0KKworCXRz
dF9jZ3JvdXBfdHJlZV9taygmdC0+bHRwLCBsdHBfY2dyb3VwX2RyYWluX2RpciwgJnQtPmRyYWlu
KTsKKworCXNwcmludGYodGVzdF9jZ3JvdXBfZGlyLCAidGVzdC0lZCIsIGdldHBpZCgpKTsKKwl0
c3RfY2dyb3VwX3RyZWVfbWsoJnQtPmx0cCwgdGVzdF9jZ3JvdXBfZGlyLCAmdC0+dGVzdCk7CiB9
CiAKLXN0YXRpYyB2b2lkIHRzdF9jZ3JvdXBfZGVsX3BhdGgoY29uc3QgY2hhciAqY2dyb3VwX2Rp
cikKK3N0YXRpYyB2b2lkIGNncm91cF9kcmFpbihlbnVtIHRzdF9jZ3JvdXBfdmVyIHZlciwgaW50
IHNvdXJjZSwgaW50IGRlc3QpCiB7Ci0Jc3RydWN0IHRzdF9jZ3JvdXBfcGF0aCAqYSwgKmI7CisJ
Y2hhciBidWZbQlVGU0laXTsKKwljaGFyICp0b2s7CisJY29uc3QgY2hhciAqZm5hbWUgPSB2ZXIg
PT0gVFNUX0NHUk9VUF9WMSA/ICJ0YXNrcyIgOiAiY2dyb3VwLnByb2NzIjsKKwlpbnQgZmQ7CisJ
c3NpemVfdCByZXQ7CiAKLQlpZiAoIXRzdF9jZ3JvdXBfcGF0aHMpCisJcmV0ID0gU0FGRV9GSUxF
X1JFQURBVChzb3VyY2UsIGZuYW1lLCBidWYsIHNpemVvZihidWYpKTsKKwlpZiAocmV0IDwgMCkK
IAkJcmV0dXJuOwogCi0JYSA9IGIgPSB0c3RfY2dyb3VwX3BhdGhzOworCWZkID0gU0FGRV9PUEVO
QVQoZGVzdCwgZm5hbWUsIE9fV1JPTkxZKTsKKwlpZiAoZmQgPCAwKQorCQlyZXR1cm47CiAKLQl3
aGlsZSAoc3RyY21wKGItPm1udF9wYXRoLCBjZ3JvdXBfZGlyKSAhPSAwKSB7Ci0JCWlmICghYi0+
bmV4dCkgewotCQkJdHN0X3JlcyhUSU5GTywgIiVzIGlzIG5vdCBmb3VuZCIsIGNncm91cF9kaXIp
OwotCQkJcmV0dXJuOwotCQl9Ci0JCWEgPSBiOwotCQliID0gYi0+bmV4dDsKLQl9OworCWZvciAo
dG9rID0gc3RydG9rKGJ1ZiwgIlxuIik7IHRvazsgdG9rID0gc3RydG9rKE5VTEwsICJcbiIpKSB7
CisJCXJldCA9IGRwcmludGYoZmQsICIlcyIsIHRvayk7CiAKLQlpZiAoYiA9PSB0c3RfY2dyb3Vw
X3BhdGhzKQotCQl0c3RfY2dyb3VwX3BhdGhzID0gYi0+bmV4dDsKLQllbHNlCi0JCWEtPm5leHQg
PSBiLT5uZXh0OworCQlpZiAocmV0IDwgKHNzaXplX3Qpc3RybGVuKHRvaykpCisJCQl0c3RfYnJr
KFRCUk9LIHwgVEVSUk5PLCAiRmFpbGVkIHRvIGRyYWluICVzIiwgdG9rKTsKKwl9CisJU0FGRV9D
TE9TRShmZCk7Cit9CiAKLQlmcmVlKGItPm1udF9wYXRoKTsKLQlmcmVlKGItPm5ld19wYXRoKTsK
LQlmcmVlKGIpOworc3RhdGljIHZvaWQgY2xvc2VfcGF0aF9mZHMoc3RydWN0IGNncm91cF9yb290
ICp0KQoreworCWlmICh0LT50ZXN0LmRpciA+IDApCisJCVNBRkVfQ0xPU0UodC0+dGVzdC5kaXIp
OworCWlmICh0LT5sdHAuZGlyID4gMCkKKwkJU0FGRV9DTE9TRSh0LT5sdHAuZGlyKTsKKwlpZiAo
dC0+ZHJhaW4uZGlyID4gMCkKKwkJU0FGRV9DTE9TRSh0LT5kcmFpbi5kaXIpOworCWlmICh0LT5t
bnQuZGlyID4gMCkKKwkJU0FGRV9DTE9TRSh0LT5tbnQuZGlyKTsKIH0KIAotdm9pZCB0c3RfY2dy
b3VwX21vdW50KGVudW0gdHN0X2Nncm91cF9jdHJsIGN0cmwsIGNvbnN0IGNoYXIgKmNncm91cF9k
aXIpCisvKiBNYXliZSByZW1vdmUgQ0dyb3VwcyB1c2VkIGR1cmluZyB0ZXN0aW5nIGFuZCBjbGVh
ciBvdXIgZGF0YQorICoKKyAqIFRoaXMgd2lsbCBuZXZlciByZW1vdmUgQ0dyb3VwcyB3ZSBkaWQg
bm90IGNyZWF0ZSB0byBhbGxvdyB0ZXN0cyB0bworICogYmUgcnVuIGluIHBhcmFsbGVsIChzZWUg
ZW51bSB0c3RfY2dyb3VwX2NsZWFudXApLgorICoKKyAqIEVhY2ggdGVzdCBwcm9jZXNzIGlzIGdp
dmVuIGl0cyBvd24gdW5pcXVlIENHcm91cC4gVW5sZXNzIHdlIHdhbnQgdG8KKyAqIHN0cmVzcyB0
ZXN0IHRoZSBDR3JvdXAgc3lzdGVtLiBXZSBzaG91bGQgYXQgbGVhc3QgcmVtb3ZlIHRoZXNlCisg
KiB1bmlxdWUgdGVzdCBDR3JvdXBzLgorICoKKyAqIFdlIHByb2JhYmx5IGFsc28gd2FudCB0byBy
ZW1vdmUgdGhlIExUUCBwYXJlbnQgQ0dyb3VwLCBhbHRob3VnaAorICogdGhpcyBtYXkgaGF2ZSBi
ZWVuIGNyZWF0ZWQgYnkgdGhlIHN5c3RlbSBtYW5hZ2VyIG9yIGFub3RoZXIgdGVzdAorICogKHNl
ZSBub3RlcyBvbiBwYXJhbGxlbCB0ZXN0aW5nKS4KKyAqCisgKiBPbiBzeXN0ZW1zIHdpdGggbm8g
aW5pdGlhbCBDR3JvdXAgc2V0dXAgd2UgbWF5IHRyeSB0byBkZXN0cm95IHRoZQorICogQ0dyb3Vw
IHJvb3RzIHdlIG1vdW50ZWQgc28gdGhhdCB0aGV5IGNhbiBiZSByZWNyZWF0ZWQgYnkgYW5vdGhl
cgorICogdGVzdC4gTm90ZSB0aGF0IHN1Y2Nlc3NmdWxseSB1bm1vdW50aW5nIGEgQ0dyb3VwIHJv
b3QgZG9lcyBub3QKKyAqIG5lY2Vzc2FyaWx5IGluZGljYXRlIHRoYXQgaXQgd2FzIGRlc3Ryb3ll
ZC4KKyAqCisgKiBUaGUgbHRwL2RyYWluIENHcm91cCBpcyByZXF1aXJlZCBmb3IgY2xlYW5pbmcg
dXAgdGVzdCBDR3JvdXBzIHdoZW4KKyAqIHdlIGNhbiBub3QgbW92ZSB0aGVtIHRvIHRoZSByb290
IENHcm91cC4gQ0dyb3VwcyBjYW4gb25seSBiZQorICogcmVtb3ZlZCB3aGVuIHRoZXkgaGF2ZSBu
byBtZW1iZXJzIGFuZCBvbmx5IGxlYWYgb3Igcm9vdCBDR3JvdXBzIG1heQorICogaGF2ZSBwcm9j
ZXNzZXMgd2l0aGluIHRoZW0uIEFzIHRlc3QgcHJvY2Vzc2VzIGNyZWF0ZSBhbmQgZGVzdHJveQor
ICogdGhlaXIgb3duIENHcm91cHMgdGhleSBtdXN0IG1vdmUgdGhlbXNlbHZlcyBlaXRoZXIgdG8g
cm9vdCBvcgorICogYW5vdGhlciBsZWFmIENHcm91cC4gU28gd2UgbW92ZSB0aGVtIHRvIGRyYWlu
IHdoaWxlIGRlc3Ryb3lpbmcgdGhlCisgKiB1bmlxdWUgdGVzdCBDR3JvdXAuCisgKgorICogSWYg
d2UgaGF2ZSBhY2Nlc3MgdG8gcm9vdCBhbmQgY3JlYXRlZCB0aGUgTFRQIENHcm91cCB3ZSB0aGVu
IG1vdmUKKyAqIHRoZSB0ZXN0IHByb2Nlc3MgdG8gcm9vdCBhbmQgZGVzdHJveSB0aGUgZHJhaW4g
YW5kIExUUAorICogQ0dyb3Vwcy4gT3RoZXJ3aXNlIHdlIGp1c3QgbGVhdmUgdGhlIHRlc3QgcHJv
Y2VzcyB0byBkaWUgaW4gdGhlCisgKiBkcmFpbiwgbXVjaCBsaWtlIG1hbnkgYSB1bndhbnRlZCB0
ZXJyYXBpbi4KKyAqCisgKiBGaW5hbGx5IHdlIGNsZWFyIGFueSBkYXRhIHdlIGhhdmUgY29sbGVj
dGVkIG9uIENHcm91cHMuIFRoaXMgd2lsbAorICogaGFwcGVuIHJlZ2FyZGxlc3Mgb2Ygd2hldGhl
ciBhbnl0aGluZyB3YXMgcmVtb3ZlZC4KKyAqLwordm9pZCB0c3RfY2dyb3VwX2NsZWFudXAodm9p
ZCkKIHsKLQljaGFyICpjZ3JvdXBfbmV3X2RpcjsKLQljaGFyIGtub2JfcGF0aFtQQVRIX01BWF07
CisJc3RydWN0IGNncm91cF9yb290ICp0OworCXN0cnVjdCBjZ3JvdXBfaXRlbSAqY3NzOwogCi0J
dHN0X2NnX3ZlciA9IHRzdF9jZ3JvdXBfdmVyc2lvbigpOworCWlmICghY2dyb3VwX21vdW50ZWQo
KSkKKwkJZ290byBjbGVhcl9kYXRhOwogCi0JdHN0X2Nncm91cF9zZXRfcGF0aChjZ3JvdXBfZGly
KTsKLQljZ3JvdXBfbmV3X2RpciA9IHRzdF9jZ3JvdXBfZ2V0X3BhdGgoY2dyb3VwX2Rpcik7CisJ
Zm9yX2VhY2hfcm9vdCh0KSB7CisJCWlmICghdC0+dGVzdC5uYW1lKQorCQkJY29udGludWU7CiAK
LQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjEpIHsKLQkJc3dpdGNoKGN0cmwpIHsKLQkJ
Y2FzZSBUU1RfQ0dST1VQX01FTUNHOgotCQkJdHN0X2Nncm91cDFfbW91bnQoIm1lbWNnIiwgIm1l
bW9yeSIsIGNncm91cF9kaXIsIGNncm91cF9uZXdfZGlyKTsKLQkJYnJlYWs7Ci0JCWNhc2UgVFNU
X0NHUk9VUF9DUFVTRVQ6Ci0JCQl0c3RfY2dyb3VwMV9tb3VudCgiY3B1c2V0Y2ciLCAiY3B1c2V0
IiwgY2dyb3VwX2RpciwgY2dyb3VwX25ld19kaXIpOwotCQlicmVhazsKLQkJZGVmYXVsdDoKLQkJ
CXRzdF9icmsoVEJST0ssICJJbnZhbGlkIGNncm91cCBjb250cm9sbGVyOiAlZCIsIGN0cmwpOwot
CQl9CisJCWNncm91cF9kcmFpbih0LT52ZXIsIHQtPnRlc3QuZGlyLCB0LT5kcmFpbi5kaXIpOwor
CQlTQUZFX1VOTElOS0FUKHQtPmx0cC5kaXIsIHQtPnRlc3QubmFtZSwgQVRfUkVNT1ZFRElSKTsK
IAl9CiAKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIpIHsKLQkJdHN0X2Nncm91cDJf
bW91bnQoY2dyb3VwX2RpciwgY2dyb3VwX25ld19kaXIpOworCWZvcl9lYWNoX3Jvb3QodCkgewor
CQlpZiAoIXQtPmx0cC53ZV9jcmVhdGVkX2l0KQorCQkJY29udGludWU7CiAKLQkJc3dpdGNoKGN0
cmwpIHsKLQkJY2FzZSBUU1RfQ0dST1VQX01FTUNHOgotCQkJc3ByaW50Zihrbm9iX3BhdGgsICIl
cy9jZ3JvdXAuc3VidHJlZV9jb250cm9sIiwgY2dyb3VwX2Rpcik7Ci0JCQlTQUZFX0ZJTEVfUFJJ
TlRGKGtub2JfcGF0aCwgIiVzIiwgIittZW1vcnkiKTsKLQkJYnJlYWs7Ci0JCWNhc2UgVFNUX0NH
Uk9VUF9DUFVTRVQ6Ci0JCQl0c3RfYnJrKFRDT05GLCAiQ2dyb3VwIHYyIGhhc24ndCBhY2hpZXZl
IGNwdXNldCBzdWJzeXN0ZW0iKTsKLQkJYnJlYWs7Ci0JCWRlZmF1bHQ6Ci0JCQl0c3RfYnJrKFRC
Uk9LLCAiSW52YWxpZCBjZ3JvdXAgY29udHJvbGxlcjogJWQiLCBjdHJsKTsKLQkJfQorCQljZ3Jv
dXBfZHJhaW4odC0+dmVyLCB0LT5kcmFpbi5kaXIsIHQtPm1udC5kaXIpOworCisJCWlmICh0LT5k
cmFpbi5uYW1lKQorCQkJU0FGRV9VTkxJTktBVCh0LT5sdHAuZGlyLCB0LT5kcmFpbi5uYW1lLCBB
VF9SRU1PVkVESVIpOworCisJCWlmICh0LT5sdHAubmFtZSkKKwkJCVNBRkVfVU5MSU5LQVQodC0+
bW50LmRpciwgdC0+bHRwLm5hbWUsIEFUX1JFTU9WRURJUik7CisJfQorCisJZm9yX2VhY2hfY3Nz
KGNzcykgeworCQlpZiAoIWNncm91cF9jc3Nfb25fdjIoY3NzKSB8fCAhY3NzLT5yb290LT53ZV9t
b3VudGVkX2l0KQorCQkJY29udGludWU7CisKKwkJU0FGRV9GSUxFX1BSSU5URkFUKGNzcy0+cm9v
dC0+bW50LmRpciwgImNncm91cC5zdWJ0cmVlX2NvbnRyb2wiLAorCQkJCSAgICItJXMiLCBjc3Mt
Pm5hbWUpOworCX0KKworCWZvcl9lYWNoX3Jvb3QodCkgeworCQlpZiAoIXQtPndlX21vdW50ZWRf
aXQpCisJCQljb250aW51ZTsKKworCQkvKiBUaGlzIHByb2JhYmx5IGRvZXMgbm90IHJlc3VsdCBp
biB0aGUgQ0dyb3VwIHJvb3QKKwkJICogYmVpbmcgZGVzdHJveWVkICovCisJCWlmICh1bW91bnQy
KHQtPnBhdGgsIE1OVF9ERVRBQ0gpKQorCQkJY29udGludWU7CisKKwkJU0FGRV9STURJUih0LT5w
YXRoKTsKKwl9CisKK2NsZWFyX2RhdGE6CisJZm9yX2VhY2hfY3NzKGNzcykgeworCQljc3MtPnJv
b3QgPSBOVUxMOworCQljc3MtPndlX3JlcXVpcmVfaXQgPSAwOwogCX0KKworCWZvcl9lYWNoX3Jv
b3QodCkKKwkJY2xvc2VfcGF0aF9mZHModCk7CisKKwltZW1zZXQocm9vdHMsIDAsIHNpemVvZihy
b290cykpOwogfQogCi12b2lkIHRzdF9jZ3JvdXBfdW1vdW50KGNvbnN0IGNoYXIgKmNncm91cF9k
aXIpCitzdGF0aWMgdm9pZCBjZ3JvdXBfaW5pdChzdHJ1Y3QgdHN0X2Nncm91cCAqY2csIGNvbnN0
IGNoYXIgKm5hbWUpCiB7Ci0JY2hhciAqY2dyb3VwX25ld19kaXI7CisJbWVtc2V0KGNnLCAwLCBz
aXplb2YoKmNnKSk7CisJY2ctPm5hbWUgPSBuYW1lOworfQorCitzdGF0aWMgdm9pZCBjZ3JvdXBf
YWRkKHN0cnVjdCB0c3RfY2dyb3VwICpjZywKKwkJICAgICAgIHN0cnVjdCB0c3RfY2dyb3VwX3Ry
ZWUgKnRyZWUpCit7CisJY29uc3Qgc3RydWN0IGNncm91cF9pdGVtICpjc3M7CisJaW50IGk7CisK
KwlpZiAodHJlZS0+cm9vdC0+dmVyID09IFRTVF9DR1JPVVBfVjIpCisJCWNnLT50cmVlc19ieV9j
c3NbMF0gPSB0cmVlOwogCi0JY2dyb3VwX25ld19kaXIgPSB0c3RfY2dyb3VwX2dldF9wYXRoKGNn
cm91cF9kaXIpOwotCXRzdF9jZ3JvdXBOX3Vtb3VudChjZ3JvdXBfZGlyLCBjZ3JvdXBfbmV3X2Rp
cik7Ci0JdHN0X2Nncm91cF9kZWxfcGF0aChjZ3JvdXBfZGlyKTsKKwlmb3JfZWFjaF9jc3MoY3Nz
KSB7CisJCWlmIChoYXNfY3NzKHRyZWUtPmNzc19maWVsZCwgY3NzLT5jc3NfaW5keCkpCisJCQlj
Zy0+dHJlZXNfYnlfY3NzW2Nzcy0+Y3NzX2luZHhdID0gdHJlZTsKKwl9CisKKwlmb3IgKGkgPSAw
OyBjZy0+dHJlZXNbaV07IGkrKyk7CisJY2ctPnRyZWVzW2ldID0gdHJlZTsKIH0KIAotdm9pZCB0
c3RfY2dyb3VwX3NldF9rbm9iKGNvbnN0IGNoYXIgKmNncm91cF9kaXIsIGNvbnN0IGNoYXIgKmtu
b2IsIGxvbmcgdmFsdWUpCitzdHJ1Y3QgdHN0X2Nncm91cCAqdHN0X2Nncm91cF9tayhjb25zdCBz
dHJ1Y3QgdHN0X2Nncm91cCAqcGFyZW50LAorCQkJCSBjb25zdCBjaGFyICpuYW1lKQogewotCWNo
YXIgKmNncm91cF9uZXdfZGlyOwotCWNoYXIga25vYl9wYXRoW1BBVEhfTUFYXTsKKwlzdHJ1Y3Qg
dHN0X2Nncm91cCAqY2c7CisJc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSAqY29uc3QgKnQ7CisJc3Ry
dWN0IHRzdF9jZ3JvdXBfdHJlZSAqbnQ7CiAKLQljZ3JvdXBfbmV3X2RpciA9IHRzdF9jZ3JvdXBf
Z2V0X3BhdGgoY2dyb3VwX2Rpcik7Ci0Jc3ByaW50Zihrbm9iX3BhdGgsICIlcy8lcyIsIGNncm91
cF9uZXdfZGlyLCBrbm9iKTsKLQlTQUZFX0ZJTEVfUFJJTlRGKGtub2JfcGF0aCwgIiVsZCIsIHZh
bHVlKTsKKwljZyA9IFNBRkVfTUFMTE9DKHNpemVvZigqY2cpKTsKKwljZ3JvdXBfaW5pdChjZywg
bmFtZSk7CisKKwlmb3JfZWFjaF90cmVlKHBhcmVudCwgMCwgdCkgeworCQludCA9IFNBRkVfTUFM
TE9DKHNpemVvZigqbnQpKTsKKwkJdHN0X2Nncm91cF90cmVlX21rKCp0LCBuYW1lLCBudCk7CisJ
CWNncm91cF9hZGQoY2csIG50KTsKKwl9CisKKwlyZXR1cm4gY2c7CiB9CiAKLXZvaWQgdHN0X2Nn
cm91cF9tb3ZlX2N1cnJlbnQoY29uc3QgY2hhciAqY2dyb3VwX2RpcikKK3N0cnVjdCB0c3RfY2dy
b3VwICp0c3RfY2dyb3VwX3JtKHN0cnVjdCB0c3RfY2dyb3VwICpjZykKIHsKLQlpZiAodHN0X2Nn
X3ZlciAmIFRTVF9DR1JPVVBfVjEpCi0JCXRzdF9jZ3JvdXBfc2V0X2tub2IoY2dyb3VwX2Rpciwg
InRhc2tzIiwgZ2V0cGlkKCkpOworCXN0cnVjdCB0c3RfY2dyb3VwX3RyZWUgKip0OworCisJZm9y
X2VhY2hfdHJlZShjZywgMCwgdCkgeworCQljbG9zZSgoKnQpLT5kaXIpOworCQlTQUZFX1VOTElO
S0FUKCgqdCktPnBhcmVudC0+ZGlyLCAoKnQpLT5uYW1lLCBBVF9SRU1PVkVESVIpOworCQlmcmVl
KCp0KTsKKwl9CiAKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIpCi0JCXRzdF9jZ3Jv
dXBfc2V0X2tub2IoY2dyb3VwX2RpciwgImNncm91cC5wcm9jcyIsIGdldHBpZCgpKTsKKwlmcmVl
KGNnKTsKKwlyZXR1cm4gTlVMTDsKIH0KIAotdm9pZCB0c3RfY2dyb3VwX21lbV9zZXRfbWF4Ynl0
ZXMoY29uc3QgY2hhciAqY2dyb3VwX2RpciwgbG9uZyBtZW1zeikKKy8qIFRyYXZlcnNlIHRoZSBp
dGVtIHRyZWUgdG8gZmluZCBhbiBpdGVtLiBBbHNvIGZpeGVzIHVwIHRoZSBpbmR4IGZpZWxkLiAq
Lworc3RhdGljIGNvbnN0IHN0cnVjdCBjZ3JvdXBfaXRlbSAqCitjZ3JvdXBfaXRlbV9maW5kKGNv
bnN0IGNoYXIgKmZpbGUsIGNvbnN0IGludCBsaW5lbm8sIGNvbnN0IGNoYXIgKm5hbWUpCiB7Ci0J
aWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKQotCQl0c3RfY2dyb3VwX3NldF9rbm9iKGNn
cm91cF9kaXIsICJtZW1vcnkubGltaXRfaW5fYnl0ZXMiLCBtZW1zeik7CisJc3RydWN0IGNncm91
cF9pdGVtICppdGVtOworCWNvbnN0IHN0cnVjdCBjZ3JvdXBfaXRlbSAqY3NzOworCWNoYXIgYnVm
WzMyXTsKKwljb25zdCBjaGFyICptZW1fbmFtZTsKKwlzaXplX3QgbGVuID0gTUlOKHNpemVvZihi
dWYpIC0gMSwgc3RyY3NwbihuYW1lLCAiLiIpKTsKIAotCWlmICh0c3RfY2dfdmVyICYgVFNUX0NH
Uk9VUF9WMikKLQkJdHN0X2Nncm91cF9zZXRfa25vYihjZ3JvdXBfZGlyLCAibWVtb3J5Lm1heCIs
IG1lbXN6KTsKKwltZW1jcHkoYnVmLCBuYW1lLCBsZW4pOworCWJ1ZltsZW5dID0gJ1wwJzsKKwor
CWNzcyA9IGNncm91cF9maW5kX2NzcyhidWYpOworCisJaWYgKCFjc3MpIHsKKwkJdHN0X2Jya18o
ZmlsZSwgbGluZW5vLCBUQlJPSywKKwkJCSAiRGlkIG5vdCBmaW5kIGNvbnRyb2xsZXIgJyVzJ1xu
IiwgYnVmKTsKKwkJcmV0dXJuIE5VTEw7CisJfQorCisJbmFtZSArPSBsZW4gKyAxOworCisJZm9y
IChpdGVtID0gY3NzLT5pbm5lcjsgaXRlbS0+bmFtZTsgaXRlbSsrKSB7CisJCW1lbV9uYW1lID0g
aXRlbS0+bmFtZSArIGxlbiArIDE7CisKKwkJaWYgKCFzdHJjbXAobmFtZSwgbWVtX25hbWUpKQor
CQkJYnJlYWs7CisJfQorCisJaWYgKCFpdGVtLT5uYW1lKSB7CisJCXRzdF9icmtfKGZpbGUsIGxp
bmVubywgVEJST0ssCisJCQkgIkRpZCBub3QgZmluZCAnJXMnIGluICclcydcbiIsIG5hbWUsIGNz
cy0+bmFtZSk7CisJCXJldHVybiBOVUxMOworCX0KKworCWl0ZW0tPmNzc19pbmR4ID0gY3NzLT5j
c3NfaW5keDsKKworCXJldHVybiBpdGVtOwogfQogCi1pbnQgdHN0X2Nncm91cF9tZW1fc3dhcGFj
Y3RfZW5hYmxlZChjb25zdCBjaGFyICpjZ3JvdXBfZGlyKQorZW51bSB0c3RfY2dyb3VwX3ZlciBz
YWZlX2Nncm91cF92ZXIoY29uc3QgY2hhciAqZmlsZSwgY29uc3QgaW50IGxpbmVubywKKwkJCQkg
ICAgY29uc3Qgc3RydWN0IHRzdF9jZ3JvdXAgKmNnLAorCQkJCSAgICBjb25zdCBjaGFyICpuYW1l
KQogewotCWNoYXIgKmNncm91cF9uZXdfZGlyOwotCWNoYXIga25vYl9wYXRoW1BBVEhfTUFYXTsK
Kwljb25zdCBzdHJ1Y3QgY2dyb3VwX2l0ZW0gKmNvbnN0IGl0ID0gY2dyb3VwX2ZpbmRfY3NzKG5h
bWUpOworCWNvbnN0IHN0cnVjdCB0c3RfY2dyb3VwX3RyZWUgKnQ7CisKKwlpZiAoIXN0cmNtcChu
YW1lLCAiY2dyb3VwIikpIHsKKwkJdHN0X2Jya18oZmlsZSwgbGluZW5vLAorCQkJIFRCUk9LLAor
CQkJICJjZ3JvdXAgbWF5IGJlIHByZXNlbnQgb24gYm90aCBWMSBhbmQgVjIgaGllcmFyY2hpZXMi
KTsKKwkJcmV0dXJuIDA7CisJfQogCi0JY2dyb3VwX25ld19kaXIgPSB0c3RfY2dyb3VwX2dldF9w
YXRoKGNncm91cF9kaXIpOworCWlmICghaXQpIHsKKwkJdHN0X2Jya18oZmlsZSwgbGluZW5vLAor
CQkJIFRCUk9LLCAiVW5rbm93biBjb250cm9sbGVyICclcyciLCBuYW1lKTsKKwkJcmV0dXJuIDA7
CisJfQogCi0JaWYgKHRzdF9jZ192ZXIgJiBUU1RfQ0dST1VQX1YxKSB7Ci0JCXNwcmludGYoa25v
Yl9wYXRoLCAiJXMvJXMiLAotCQkJCWNncm91cF9uZXdfZGlyLCAiL21lbW9yeS5tZW1zdy5saW1p
dF9pbl9ieXRlcyIpOworCXQgPSBjZy0+dHJlZXNfYnlfY3NzW2l0LT5jc3NfaW5keF07CiAKLQkJ
aWYgKChhY2Nlc3Moa25vYl9wYXRoLCBGX09LKSA9PSAtMSkpIHsKLQkJCWlmIChlcnJubyA9PSBF
Tk9FTlQpCi0JCQkJdHN0X3JlcyhUQ09ORiwgIm1lbWNnIHN3YXAgYWNjb3VudGluZyBpcyBkaXNh
YmxlZCIpOwotCQkJZWxzZQotCQkJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJmYWlsZWQgdG8g
YWNjZXNzICVzIiwga25vYl9wYXRoKTsKLQkJfSBlbHNlIHsKLQkJCXJldHVybiAxOwotCQl9CisJ
aWYgKCF0KSB7CisJCXRzdF9icmtfKGZpbGUsIGxpbmVubywKKwkJCSBUQlJPSywgIiVzIGNvbnRy
b2xsZXIgbm90IGF0dGFjaGVkIHRvIENHcm91cCAlcyIsCisJCQkgbmFtZSwgY2ctPm5hbWUpOwor
CQlyZXR1cm4gMDsKIAl9CiAKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIpIHsKLQkJ
c3ByaW50Zihrbm9iX3BhdGgsICIlcy8lcyIsCi0JCQkJY2dyb3VwX25ld19kaXIsICIvbWVtb3J5
LnN3YXAubWF4Iik7CisJcmV0dXJuIHQtPnJvb3QtPnZlcjsKK30KKworc3RhdGljIGNvbnN0IGNo
YXIgKmNncm91cF9pdGVtX2FsaWFzKGNvbnN0IHN0cnVjdCBjZ3JvdXBfaXRlbSAqY29uc3QgaXQs
CisJCQkJICAgICBjb25zdCBzdHJ1Y3QgdHN0X2Nncm91cF90cmVlICpjb25zdCB0cmVlKQorewor
CWlmICh0cmVlLT5yb290LT52ZXIgIT0gVFNUX0NHUk9VUF9WMSkKKwkJcmV0dXJuIGl0LT5uYW1l
OworCisJaWYgKGl0LT5jc3NfaW5keCA9PSBUU1RfQ0dST1VQX0NQVVNFVCAmJiB0cmVlLT5yb290
LT5ub19wcmVmaXgpCisJCXJldHVybiBzdHJjaHIoaXQtPm5hbWVfdjEsICcuJykgKyAxOworCisJ
cmV0dXJuIGl0LT5uYW1lX3YxOworfQorCitpbnQgc2FmZV9jZ3JvdXBfaGFzKGNvbnN0IGNoYXIg
KmZpbGUsIGNvbnN0IGludCBsaW5lbm8sCisJCSAgICBjb25zdCBzdHJ1Y3QgdHN0X2Nncm91cCAq
Y2csIGNvbnN0IGNoYXIgKm5hbWUpCit7CisJY29uc3Qgc3RydWN0IGNncm91cF9pdGVtICpjb25z
dCBpdCA9CisJCWNncm91cF9pdGVtX2ZpbmQoZmlsZSwgbGluZW5vLCBuYW1lKTsKKwlzdHJ1Y3Qg
dHN0X2Nncm91cF90cmVlICpjb25zdCAqdDsKKwljb25zdCBjaGFyICphbGlhczsKKworCWlmICgh
aXQpCisJCXJldHVybiAwOworCisJZm9yX2VhY2hfdHJlZShjZywgaXQtPmNzc19pbmR4LCB0KSB7
CisJCWlmICghKGFsaWFzID0gY2dyb3VwX2l0ZW1fYWxpYXMoaXQsICp0KSkpCisJCSAgICBjb250
aW51ZTsKIAotCQlpZiAoKGFjY2Vzcyhrbm9iX3BhdGgsIEZfT0spID09IC0xKSkgewotCQkJaWYg
KGVycm5vID09IEVOT0VOVCkKLQkJCQl0c3RfcmVzKFRDT05GLCAibWVtY2cgc3dhcCBhY2NvdW50
aW5nIGlzIGRpc2FibGVkIik7Ci0JCQllbHNlCi0JCQkJdHN0X2JyayhUQlJPSyB8IFRFUlJOTywg
ImZhaWxlZCB0byBhY2Nlc3MgJXMiLCBrbm9iX3BhdGgpOwotCQl9IGVsc2UgeworCQlpZiAoIWZh
Y2Nlc3NhdCgoKnQpLT5kaXIsIG5hbWUsIEZfT0ssIDApKQogCQkJcmV0dXJuIDE7Ci0JCX0KKwor
CQlpZiAoZXJybm8gPT0gRU5PRU5UKQorCQkJY29udGludWU7CisKKwkJdHN0X2Jya18oZmlsZSwg
bGluZW5vLCBUQlJPSyB8IFRFUlJOTywKKwkJCSAiZmFjY2Vzc2F0KCVkPCVzPiwgJXMsIEZfT0ss
IDApIiwKKwkJCSAoKnQpLT5kaXIsIHRzdF9kZWNvZGVfZmQoKCp0KS0+ZGlyKSwgYWxpYXMpOwog
CX0KIAogCXJldHVybiAwOwogfQogCi12b2lkIHRzdF9jZ3JvdXBfbWVtX3NldF9tYXhzd2FwKGNv
bnN0IGNoYXIgKmNncm91cF9kaXIsIGxvbmcgbWVtc3opCitzdGF0aWMgc3RydWN0IHRzdF9jZ3Jv
dXAgKmNncm91cF9mcm9tX3Jvb3RzKHNpemVfdCB0cmVlX29mZikKIHsKLQlpZiAodHN0X2NnX3Zl
ciAmIFRTVF9DR1JPVVBfVjEpCi0JCXRzdF9jZ3JvdXBfc2V0X2tub2IoY2dyb3VwX2RpciwgIm1l
bW9yeS5tZW1zdy5saW1pdF9pbl9ieXRlcyIsIG1lbXN6KTsKKwlzdHJ1Y3QgY2dyb3VwX3Jvb3Qg
KnI7CisJc3RydWN0IHRzdF9jZ3JvdXBfdHJlZSAqdDsKKwlzdHJ1Y3QgdHN0X2Nncm91cCAqY2c7
CiAKLQlpZiAodHN0X2NnX3ZlciAmIFRTVF9DR1JPVVBfVjIpCi0JCXRzdF9jZ3JvdXBfc2V0X2tu
b2IoY2dyb3VwX2RpciwgIm1lbW9yeS5zd2FwLm1heCIsIG1lbXN6KTsKLX0KKwljZyA9IHRzdF9h
bGxvYyhzaXplb2YoKmNnKSk7CisJY2dyb3VwX2luaXQoY2csIE5VTEwpOwogCi12b2lkIHRzdF9j
Z3JvdXBfY3B1c2V0X3JlYWRfZmlsZXMoY29uc3QgY2hhciAqY2dyb3VwX2RpciwgY29uc3QgY2hh
ciAqZmlsZW5hbWUsCi0JY2hhciAqcmV0YnVmLCBzaXplX3QgcmV0YnVmX3N6KQotewotCWludCBm
ZDsKLQljaGFyICpjZ3JvdXBfbmV3X2RpcjsKLQljaGFyIGtub2JfcGF0aFtQQVRIX01BWF07CisJ
Zm9yX2VhY2hfcm9vdChyKSB7CisJCXQgPSAodHlwZW9mKHQpKSgoKGNoYXIgKilyKSArIHRyZWVf
b2ZmKTsKIAotCWNncm91cF9uZXdfZGlyID0gdHN0X2Nncm91cF9nZXRfcGF0aChjZ3JvdXBfZGly
KTsKKwkJaWYgKHQtPmNzc19maWVsZCkKKwkJCWNncm91cF9hZGQoY2csIHQpOworCX0KIAotCS8q
Ci0JICogdHJ5IGVpdGhlciAnL2Rldi9jcHVzZXQvWFhYWCcgb3IgJy9kZXYvY3B1c2V0L2NwdXNl
dC5YWFhYJwotCSAqIHBsZWFzZSBzZWUgRG9jdW1lbnRhdGlvbi9jZ3JvdXBzL2NwdXNldHMudHh0
IGZyb20ga2VybmVsIHNyYwotCSAqIGZvciBkZXRhaWxzCi0JICovCi0Jc3ByaW50Zihrbm9iX3Bh
dGgsICIlcy8lcyIsIGNncm91cF9uZXdfZGlyLCBmaWxlbmFtZSk7Ci0JZmQgPSBvcGVuKGtub2Jf
cGF0aCwgT19SRE9OTFkpOwotCWlmIChmZCA9PSAtMSkgewotCQlpZiAoZXJybm8gPT0gRU5PRU5U
KSB7Ci0JCQlzcHJpbnRmKGtub2JfcGF0aCwgIiVzL2NwdXNldC4lcyIsCi0JCQkJCWNncm91cF9u
ZXdfZGlyLCBmaWxlbmFtZSk7Ci0JCQlmZCA9IFNBRkVfT1BFTihrbm9iX3BhdGgsIE9fUkRPTkxZ
KTsKLQkJfSBlbHNlCi0JCQl0c3RfYnJrKFRCUk9LIHwgVEVSUk5PLCAib3BlbiAlcyIsIGtub2Jf
cGF0aCk7CisJaWYgKGNnLT50cmVlc1swXSkgeworCQljZy0+bmFtZSA9IGNnLT50cmVlc1swXS0+
bmFtZTsKKwkJcmV0dXJuIGNnOwogCX0KIAotCW1lbXNldChyZXRidWYsIDAsIHJldGJ1Zl9zeik7
Ci0JaWYgKHJlYWQoZmQsIHJldGJ1ZiwgcmV0YnVmX3N6KSA8IDApCi0JCXRzdF9icmsoVEJST0sg
fCBURVJSTk8sICJyZWFkICVzIiwga25vYl9wYXRoKTsKKwl0c3RfYnJrKFRCUk9LLAorCQkiTm8g
Q0dyb3VwcyBmb3VuZDsgbWF5YmUgeW91IGZvcmdvdCB0byBjYWxsIHRzdF9jZ3JvdXBfcmVxdWly
ZT8iKTsKIAotCWNsb3NlKGZkKTsKKwlyZXR1cm4gY2c7CiB9CiAKLXZvaWQgdHN0X2Nncm91cF9j
cHVzZXRfd3JpdGVfZmlsZXMoY29uc3QgY2hhciAqY2dyb3VwX2RpciwgY29uc3QgY2hhciAqZmls
ZW5hbWUsIGNvbnN0IGNoYXIgKmJ1ZikKK2NvbnN0IHN0cnVjdCB0c3RfY2dyb3VwICp0c3RfY2dy
b3VwX2dldF90ZXN0KHZvaWQpCiB7Ci0JaW50IGZkOwotCWNoYXIgKmNncm91cF9uZXdfZGlyOwot
CWNoYXIga25vYl9wYXRoW1BBVEhfTUFYXTsKKwlyZXR1cm4gY2dyb3VwX2Zyb21fcm9vdHMob2Zm
c2V0b2Yoc3RydWN0IGNncm91cF9yb290LCB0ZXN0KSk7Cit9CiAKLQljZ3JvdXBfbmV3X2RpciA9
IHRzdF9jZ3JvdXBfZ2V0X3BhdGgoY2dyb3VwX2Rpcik7Citjb25zdCBzdHJ1Y3QgdHN0X2Nncm91
cCAqdHN0X2Nncm91cF9nZXRfZHJhaW4odm9pZCkKK3sKKwlyZXR1cm4gY2dyb3VwX2Zyb21fcm9v
dHMob2Zmc2V0b2Yoc3RydWN0IGNncm91cF9yb290LCBkcmFpbikpOworfQogCi0JLyoKLQkgKiB0
cnkgZWl0aGVyICcvZGV2L2NwdXNldC9YWFhYJyBvciAnL2Rldi9jcHVzZXQvY3B1c2V0LlhYWFgn
Ci0JICogcGxlYXNlIHNlZSBEb2N1bWVudGF0aW9uL2Nncm91cHMvY3B1c2V0cy50eHQgZnJvbSBr
ZXJuZWwgc3JjCi0JICogZm9yIGRldGFpbHMKLQkgKi8KLQlzcHJpbnRmKGtub2JfcGF0aCwgIiVz
LyVzIiwgY2dyb3VwX25ld19kaXIsIGZpbGVuYW1lKTsKLQlmZCA9IG9wZW4oa25vYl9wYXRoLCBP
X1dST05MWSk7Ci0JaWYgKGZkID09IC0xKSB7Ci0JCWlmIChlcnJubyA9PSBFTk9FTlQpIHsKLQkJ
CXNwcmludGYoa25vYl9wYXRoLCAiJXMvY3B1c2V0LiVzIiwgY2dyb3VwX25ld19kaXIsIGZpbGVu
YW1lKTsKLQkJCWZkID0gU0FGRV9PUEVOKGtub2JfcGF0aCwgT19XUk9OTFkpOwotCQl9IGVsc2UK
LQkJCXRzdF9icmsoVEJST0sgfCBURVJSTk8sICJvcGVuICVzIiwga25vYl9wYXRoKTsKK3NzaXpl
X3Qgc2FmZV9jZ3JvdXBfcmVhZChjb25zdCBjaGFyICpmaWxlLCBjb25zdCBpbnQgbGluZW5vLAor
CQkJIGNvbnN0IHN0cnVjdCB0c3RfY2dyb3VwICpjZywgY29uc3QgY2hhciAqbmFtZSwKKwkJCSBj
aGFyICpvdXQsIHNpemVfdCBsZW4pCit7CisJc2l6ZV90IHByZXZfbGVuID0gMDsKKwljb25zdCBz
dHJ1Y3QgY2dyb3VwX2l0ZW0gKmNvbnN0IGl0ID0KKwkJY2dyb3VwX2l0ZW1fZmluZChmaWxlLCBs
aW5lbm8sIG5hbWUpOworCXN0cnVjdCB0c3RfY2dyb3VwX3RyZWUgKmNvbnN0ICp0OworCWNvbnN0
IGNoYXIgKmFsaWFzOworCWNoYXIgYnVmW0JVRlNJWl07CisKKwlmb3JfZWFjaF90cmVlKGNnLCBp
dC0+Y3NzX2luZHgsIHQpIHsKKwkJaWYgKCEoYWxpYXMgPSBjZ3JvdXBfaXRlbV9hbGlhcyhpdCwg
KnQpKSkKKwkJCWNvbnRpbnVlOworCisJCWlmIChwcmV2X2xlbikKKwkJCW1lbWNweShidWYsIG91
dCwgcHJldl9sZW4pOworCisJCVRFU1Qoc2FmZV9maWxlX3JlYWRhdChmaWxlLCBsaW5lbm8sCisJ
CQkJICAgICAgKCp0KS0+ZGlyLCBhbGlhcywgb3V0LCBsZW4pKTsKKwkJaWYgKFRTVF9SRVQgPCAw
KQorCQkJY29udGludWU7CisKKwkJaWYgKHByZXZfbGVuICYmIG1lbWNtcChvdXQsIGJ1ZiwgcHJl
dl9sZW4pKSB7CisJCQl0c3RfYnJrXyhmaWxlLCBsaW5lbm8sIFRCUk9LLAorCQkJCSAiJXMgaGFz
IGRpZmZlcmVudCB2YWx1ZSBhY3Jvc3Mgcm9vdHMiLAorCQkJCSBuYW1lKTsKKwkJCWJyZWFrOwor
CQl9CisKKwkJcHJldl9sZW4gPSBNSU4oc2l6ZW9mKGJ1ZiksIChzaXplX3QpVFNUX1JFVCk7CisJ
fQorCisJb3V0W01BWChUU1RfUkVULCAwKV0gPSAnXDAnOworCisJcmV0dXJuIFRTVF9SRVQ7Cit9
CisKK3ZvaWQgc2FmZV9jZ3JvdXBfcHJpbnRmKGNvbnN0IGNoYXIgKmZpbGUsIGNvbnN0IGludCBs
aW5lbm8sCisJCQljb25zdCBzdHJ1Y3QgdHN0X2Nncm91cCAqY2csIGNvbnN0IGNoYXIgKm5hbWUs
CisJCQljb25zdCBjaGFyICpmbXQsIC4uLikKK3sKKwljb25zdCBzdHJ1Y3QgY2dyb3VwX2l0ZW0g
KmNvbnN0IGl0ID0KKwkJY2dyb3VwX2l0ZW1fZmluZChmaWxlLCBsaW5lbm8sIG5hbWUpOworCXN0
cnVjdCB0c3RfY2dyb3VwX3RyZWUgKmNvbnN0ICp0OworCWNvbnN0IGNoYXIgKmFsaWFzOworCXZh
X2xpc3QgdmE7CisKKwlmb3JfZWFjaF90cmVlKGNnLCBpdC0+Y3NzX2luZHgsIHQpIHsKKwkJaWYg
KCEoYWxpYXMgPSBjZ3JvdXBfaXRlbV9hbGlhcyhpdCwgKnQpKSkKKwkJICAgIGNvbnRpbnVlOwor
CisJCXZhX3N0YXJ0KHZhLCBmbXQpOworCQlzYWZlX2ZpbGVfdnByaW50ZmF0KGZpbGUsIGxpbmVu
bywgKCp0KS0+ZGlyLCBhbGlhcywgZm10LCB2YSk7CisJCXZhX2VuZCh2YSk7CiAJfQorfQogCi0J
U0FGRV9XUklURSgxLCBmZCwgYnVmLCBzdHJsZW4oYnVmKSk7Cit2b2lkIHNhZmVfY2dyb3VwX3Nj
YW5mKGNvbnN0IGNoYXIgKmZpbGUsIGNvbnN0IGludCBsaW5lbm8sCisJCSAgICAgICBjb25zdCBz
dHJ1Y3QgdHN0X2Nncm91cCAqY2csIGNvbnN0IGNoYXIgKm5hbWUsCisJCSAgICAgICBjb25zdCBj
aGFyICpmbXQsIC4uLikKK3sKKwl2YV9saXN0IHZhOworCWNoYXIgYnVmW0JVRlNJWl07CisJc3Np
emVfdCBsZW4gPSBzYWZlX2Nncm91cF9yZWFkKGZpbGUsIGxpbmVubywgY2csIG5hbWUsIGJ1Ziwg
c2l6ZW9mKGJ1ZikpOwogCi0JY2xvc2UoZmQpOworCWlmIChsZW4gPCAxKQorCQlyZXR1cm47CisK
Kwl2YV9zdGFydCh2YSwgZm10KTsKKwlpZiAodnNzY2FuZihidWYsIGZtdCwgdmEpIDwgMSkgewor
CQl0c3RfYnJrXyhmaWxlLCBsaW5lbm8sIFRCUk9LIHwgVEVSUk5PLAorCQkJICInJXMnOiB2c3Nj
YW5mKCclcycsICclcycsIC4uLikiLCBuYW1lLCBidWYsIGZtdCk7CisJfQorCXZhX2VuZCh2YSk7
CiB9Ci0tIAoyLjMwLjIKCgotLSAKTWFpbGluZyBsaXN0IGluZm86IGh0dHBzOi8vbGlzdHMubGlu
dXguaXQvbGlzdGluZm8vbHRwCg==
